/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
(function(global, factory) { /* global define, require, module */

    /* AMD */ if (typeof define === 'function' && define.amd)
        define(["protobufjs/minimal"], factory);

    /* CommonJS */ else if (typeof require === 'function' && typeof module === 'object' && module && module.exports)
        module.exports = factory(require("protobufjs/minimal"));

})(this, function($protobuf) {
    "use strict";

    // Common aliases
    var $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;
    
    // Exported root namespace
    var $root = $protobuf.roots["default"] || ($protobuf.roots["default"] = {});
    
    $root.ic_base_types = (function() {
    
        /**
         * Namespace ic_base_types.
         * @exports ic_base_types
         * @namespace
         */
        var ic_base_types = {};
    
        ic_base_types.pb = (function() {
    
            /**
             * Namespace pb.
             * @memberof ic_base_types
             * @namespace
             */
            var pb = {};
    
            pb.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof ic_base_types.pb
                 * @namespace
                 */
                var v1 = {};
    
                v1.PrincipalId = (function() {
    
                    /**
                     * Properties of a PrincipalId.
                     * @memberof ic_base_types.pb.v1
                     * @interface IPrincipalId
                     * @property {Uint8Array|null} [serializedId] PrincipalId serializedId
                     */
    
                    /**
                     * Constructs a new PrincipalId.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a PrincipalId.
                     * @implements IPrincipalId
                     * @constructor
                     * @param {ic_base_types.pb.v1.IPrincipalId=} [properties] Properties to set
                     */
                    function PrincipalId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * PrincipalId serializedId.
                     * @member {Uint8Array} serializedId
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @instance
                     */
                    PrincipalId.prototype.serializedId = $util.newBuffer([]);
    
                    /**
                     * Creates a new PrincipalId instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {ic_base_types.pb.v1.IPrincipalId=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.PrincipalId} PrincipalId instance
                     */
                    PrincipalId.create = function create(properties) {
                        return new PrincipalId(properties);
                    };
    
                    /**
                     * Encodes the specified PrincipalId message. Does not implicitly {@link ic_base_types.pb.v1.PrincipalId.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {ic_base_types.pb.v1.IPrincipalId} message PrincipalId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PrincipalId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.serializedId != null && Object.hasOwnProperty.call(message, "serializedId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.serializedId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified PrincipalId message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.PrincipalId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {ic_base_types.pb.v1.IPrincipalId} message PrincipalId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    PrincipalId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a PrincipalId message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.PrincipalId} PrincipalId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PrincipalId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.PrincipalId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.serializedId = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a PrincipalId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.PrincipalId} PrincipalId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    PrincipalId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a PrincipalId message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    PrincipalId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.serializedId != null && message.hasOwnProperty("serializedId"))
                            if (!(message.serializedId && typeof message.serializedId.length === "number" || $util.isString(message.serializedId)))
                                return "serializedId: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a PrincipalId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.PrincipalId} PrincipalId
                     */
                    PrincipalId.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.PrincipalId)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.PrincipalId();
                        if (object.serializedId != null)
                            if (typeof object.serializedId === "string")
                                $util.base64.decode(object.serializedId, message.serializedId = $util.newBuffer($util.base64.length(object.serializedId)), 0);
                            else if (object.serializedId.length >= 0)
                                message.serializedId = object.serializedId;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a PrincipalId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {ic_base_types.pb.v1.PrincipalId} message PrincipalId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    PrincipalId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.serializedId = "";
                            else {
                                object.serializedId = [];
                                if (options.bytes !== Array)
                                    object.serializedId = $util.newBuffer(object.serializedId);
                            }
                        if (message.serializedId != null && message.hasOwnProperty("serializedId"))
                            object.serializedId = options.bytes === String ? $util.base64.encode(message.serializedId, 0, message.serializedId.length) : options.bytes === Array ? Array.prototype.slice.call(message.serializedId) : message.serializedId;
                        return object;
                    };
    
                    /**
                     * Converts this PrincipalId to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    PrincipalId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for PrincipalId
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.PrincipalId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    PrincipalId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.PrincipalId";
                    };
    
                    return PrincipalId;
                })();
    
                v1.CanisterId = (function() {
    
                    /**
                     * Properties of a CanisterId.
                     * @memberof ic_base_types.pb.v1
                     * @interface ICanisterId
                     * @property {Uint8Array|null} [serializedId] CanisterId serializedId
                     */
    
                    /**
                     * Constructs a new CanisterId.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a CanisterId.
                     * @implements ICanisterId
                     * @constructor
                     * @param {ic_base_types.pb.v1.ICanisterId=} [properties] Properties to set
                     */
                    function CanisterId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CanisterId serializedId.
                     * @member {Uint8Array} serializedId
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @instance
                     */
                    CanisterId.prototype.serializedId = $util.newBuffer([]);
    
                    /**
                     * Creates a new CanisterId instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterId=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.CanisterId} CanisterId instance
                     */
                    CanisterId.create = function create(properties) {
                        return new CanisterId(properties);
                    };
    
                    /**
                     * Encodes the specified CanisterId message. Does not implicitly {@link ic_base_types.pb.v1.CanisterId.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterId} message CanisterId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CanisterId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.serializedId != null && Object.hasOwnProperty.call(message, "serializedId"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.serializedId);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CanisterId message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.CanisterId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterId} message CanisterId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CanisterId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CanisterId message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.CanisterId} CanisterId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CanisterId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.CanisterId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.serializedId = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CanisterId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.CanisterId} CanisterId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CanisterId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CanisterId message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CanisterId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.serializedId != null && message.hasOwnProperty("serializedId"))
                            if (!(message.serializedId && typeof message.serializedId.length === "number" || $util.isString(message.serializedId)))
                                return "serializedId: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a CanisterId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.CanisterId} CanisterId
                     */
                    CanisterId.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.CanisterId)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.CanisterId();
                        if (object.serializedId != null)
                            if (typeof object.serializedId === "string")
                                $util.base64.decode(object.serializedId, message.serializedId = $util.newBuffer($util.base64.length(object.serializedId)), 0);
                            else if (object.serializedId.length >= 0)
                                message.serializedId = object.serializedId;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CanisterId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {ic_base_types.pb.v1.CanisterId} message CanisterId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CanisterId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.serializedId = "";
                            else {
                                object.serializedId = [];
                                if (options.bytes !== Array)
                                    object.serializedId = $util.newBuffer(object.serializedId);
                            }
                        if (message.serializedId != null && message.hasOwnProperty("serializedId"))
                            object.serializedId = options.bytes === String ? $util.base64.encode(message.serializedId, 0, message.serializedId.length) : options.bytes === Array ? Array.prototype.slice.call(message.serializedId) : message.serializedId;
                        return object;
                    };
    
                    /**
                     * Converts this CanisterId to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CanisterId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CanisterId
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.CanisterId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CanisterId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.CanisterId";
                    };
    
                    return CanisterId;
                })();
    
                v1.NeuronId = (function() {
    
                    /**
                     * Properties of a NeuronId.
                     * @memberof ic_base_types.pb.v1
                     * @interface INeuronId
                     * @property {number|Long|null} [id] NeuronId id
                     */
    
                    /**
                     * Constructs a new NeuronId.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a NeuronId.
                     * @implements INeuronId
                     * @constructor
                     * @param {ic_base_types.pb.v1.INeuronId=} [properties] Properties to set
                     */
                    function NeuronId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NeuronId id.
                     * @member {number|Long} id
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @instance
                     */
                    NeuronId.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new NeuronId instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {ic_base_types.pb.v1.INeuronId=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.NeuronId} NeuronId instance
                     */
                    NeuronId.create = function create(properties) {
                        return new NeuronId(properties);
                    };
    
                    /**
                     * Encodes the specified NeuronId message. Does not implicitly {@link ic_base_types.pb.v1.NeuronId.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {ic_base_types.pb.v1.INeuronId} message NeuronId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NeuronId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NeuronId message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.NeuronId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {ic_base_types.pb.v1.INeuronId} message NeuronId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NeuronId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NeuronId message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.NeuronId} NeuronId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NeuronId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.NeuronId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.id = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NeuronId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.NeuronId} NeuronId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NeuronId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NeuronId message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NeuronId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                return "id: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a NeuronId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.NeuronId} NeuronId
                     */
                    NeuronId.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.NeuronId)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.NeuronId();
                        if (object.id != null)
                            if ($util.Long)
                                (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                            else if (typeof object.id === "string")
                                message.id = parseInt(object.id, 10);
                            else if (typeof object.id === "number")
                                message.id = object.id;
                            else if (typeof object.id === "object")
                                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NeuronId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {ic_base_types.pb.v1.NeuronId} message NeuronId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NeuronId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.id = options.longs === String ? "0" : 0;
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (typeof message.id === "number")
                                object.id = options.longs === String ? String(message.id) : message.id;
                            else
                                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                        return object;
                    };
    
                    /**
                     * Converts this NeuronId to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NeuronId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NeuronId
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.NeuronId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NeuronId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.NeuronId";
                    };
    
                    return NeuronId;
                })();
    
                v1.ProposalId = (function() {
    
                    /**
                     * Properties of a ProposalId.
                     * @memberof ic_base_types.pb.v1
                     * @interface IProposalId
                     * @property {number|Long|null} [id] ProposalId id
                     */
    
                    /**
                     * Constructs a new ProposalId.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a ProposalId.
                     * @implements IProposalId
                     * @constructor
                     * @param {ic_base_types.pb.v1.IProposalId=} [properties] Properties to set
                     */
                    function ProposalId(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ProposalId id.
                     * @member {number|Long} id
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @instance
                     */
                    ProposalId.prototype.id = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new ProposalId instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {ic_base_types.pb.v1.IProposalId=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.ProposalId} ProposalId instance
                     */
                    ProposalId.create = function create(properties) {
                        return new ProposalId(properties);
                    };
    
                    /**
                     * Encodes the specified ProposalId message. Does not implicitly {@link ic_base_types.pb.v1.ProposalId.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {ic_base_types.pb.v1.IProposalId} message ProposalId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProposalId.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.id != null && Object.hasOwnProperty.call(message, "id"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.id);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ProposalId message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.ProposalId.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {ic_base_types.pb.v1.IProposalId} message ProposalId message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ProposalId.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ProposalId message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.ProposalId} ProposalId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProposalId.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.ProposalId();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.id = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ProposalId message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.ProposalId} ProposalId
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ProposalId.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ProposalId message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ProposalId.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (!$util.isInteger(message.id) && !(message.id && $util.isInteger(message.id.low) && $util.isInteger(message.id.high)))
                                return "id: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a ProposalId message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.ProposalId} ProposalId
                     */
                    ProposalId.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.ProposalId)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.ProposalId();
                        if (object.id != null)
                            if ($util.Long)
                                (message.id = $util.Long.fromValue(object.id)).unsigned = true;
                            else if (typeof object.id === "string")
                                message.id = parseInt(object.id, 10);
                            else if (typeof object.id === "number")
                                message.id = object.id;
                            else if (typeof object.id === "object")
                                message.id = new $util.LongBits(object.id.low >>> 0, object.id.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ProposalId message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {ic_base_types.pb.v1.ProposalId} message ProposalId
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ProposalId.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.id = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.id = options.longs === String ? "0" : 0;
                        if (message.id != null && message.hasOwnProperty("id"))
                            if (typeof message.id === "number")
                                object.id = options.longs === String ? String(message.id) : message.id;
                            else
                                object.id = options.longs === String ? $util.Long.prototype.toString.call(message.id) : options.longs === Number ? new $util.LongBits(message.id.low >>> 0, message.id.high >>> 0).toNumber(true) : message.id;
                        return object;
                    };
    
                    /**
                     * Converts this ProposalId to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ProposalId.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ProposalId
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.ProposalId
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ProposalId.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.ProposalId";
                    };
    
                    return ProposalId;
                })();
    
                v1.MethodAuthzInfo = (function() {
    
                    /**
                     * Properties of a MethodAuthzInfo.
                     * @memberof ic_base_types.pb.v1
                     * @interface IMethodAuthzInfo
                     * @property {string|null} [methodName] MethodAuthzInfo methodName
                     * @property {Array.<Uint8Array>|null} [principalIds] MethodAuthzInfo principalIds
                     */
    
                    /**
                     * Constructs a new MethodAuthzInfo.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a MethodAuthzInfo.
                     * @implements IMethodAuthzInfo
                     * @constructor
                     * @param {ic_base_types.pb.v1.IMethodAuthzInfo=} [properties] Properties to set
                     */
                    function MethodAuthzInfo(properties) {
                        this.principalIds = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * MethodAuthzInfo methodName.
                     * @member {string} methodName
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @instance
                     */
                    MethodAuthzInfo.prototype.methodName = "";
    
                    /**
                     * MethodAuthzInfo principalIds.
                     * @member {Array.<Uint8Array>} principalIds
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @instance
                     */
                    MethodAuthzInfo.prototype.principalIds = $util.emptyArray;
    
                    /**
                     * Creates a new MethodAuthzInfo instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.IMethodAuthzInfo=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.MethodAuthzInfo} MethodAuthzInfo instance
                     */
                    MethodAuthzInfo.create = function create(properties) {
                        return new MethodAuthzInfo(properties);
                    };
    
                    /**
                     * Encodes the specified MethodAuthzInfo message. Does not implicitly {@link ic_base_types.pb.v1.MethodAuthzInfo.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.IMethodAuthzInfo} message MethodAuthzInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MethodAuthzInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.methodName != null && Object.hasOwnProperty.call(message, "methodName"))
                            writer.uint32(/* id 1, wireType 2 =*/10).string(message.methodName);
                        if (message.principalIds != null && message.principalIds.length)
                            for (var i = 0; i < message.principalIds.length; ++i)
                                writer.uint32(/* id 2, wireType 2 =*/18).bytes(message.principalIds[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified MethodAuthzInfo message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.MethodAuthzInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.IMethodAuthzInfo} message MethodAuthzInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    MethodAuthzInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a MethodAuthzInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.MethodAuthzInfo} MethodAuthzInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MethodAuthzInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.MethodAuthzInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.methodName = reader.string();
                                    break;
                                }
                            case 2: {
                                    if (!(message.principalIds && message.principalIds.length))
                                        message.principalIds = [];
                                    message.principalIds.push(reader.bytes());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a MethodAuthzInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.MethodAuthzInfo} MethodAuthzInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    MethodAuthzInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a MethodAuthzInfo message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    MethodAuthzInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.methodName != null && message.hasOwnProperty("methodName"))
                            if (!$util.isString(message.methodName))
                                return "methodName: string expected";
                        if (message.principalIds != null && message.hasOwnProperty("principalIds")) {
                            if (!Array.isArray(message.principalIds))
                                return "principalIds: array expected";
                            for (var i = 0; i < message.principalIds.length; ++i)
                                if (!(message.principalIds[i] && typeof message.principalIds[i].length === "number" || $util.isString(message.principalIds[i])))
                                    return "principalIds: buffer[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a MethodAuthzInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.MethodAuthzInfo} MethodAuthzInfo
                     */
                    MethodAuthzInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.MethodAuthzInfo)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.MethodAuthzInfo();
                        if (object.methodName != null)
                            message.methodName = String(object.methodName);
                        if (object.principalIds) {
                            if (!Array.isArray(object.principalIds))
                                throw TypeError(".ic_base_types.pb.v1.MethodAuthzInfo.principalIds: array expected");
                            message.principalIds = [];
                            for (var i = 0; i < object.principalIds.length; ++i)
                                if (typeof object.principalIds[i] === "string")
                                    $util.base64.decode(object.principalIds[i], message.principalIds[i] = $util.newBuffer($util.base64.length(object.principalIds[i])), 0);
                                else if (object.principalIds[i].length >= 0)
                                    message.principalIds[i] = object.principalIds[i];
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a MethodAuthzInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.MethodAuthzInfo} message MethodAuthzInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    MethodAuthzInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.principalIds = [];
                        if (options.defaults)
                            object.methodName = "";
                        if (message.methodName != null && message.hasOwnProperty("methodName"))
                            object.methodName = message.methodName;
                        if (message.principalIds && message.principalIds.length) {
                            object.principalIds = [];
                            for (var j = 0; j < message.principalIds.length; ++j)
                                object.principalIds[j] = options.bytes === String ? $util.base64.encode(message.principalIds[j], 0, message.principalIds[j].length) : options.bytes === Array ? Array.prototype.slice.call(message.principalIds[j]) : message.principalIds[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this MethodAuthzInfo to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    MethodAuthzInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for MethodAuthzInfo
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.MethodAuthzInfo
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    MethodAuthzInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.MethodAuthzInfo";
                    };
    
                    return MethodAuthzInfo;
                })();
    
                v1.CanisterAuthzInfo = (function() {
    
                    /**
                     * Properties of a CanisterAuthzInfo.
                     * @memberof ic_base_types.pb.v1
                     * @interface ICanisterAuthzInfo
                     * @property {Array.<ic_base_types.pb.v1.IMethodAuthzInfo>|null} [methodsAuthz] CanisterAuthzInfo methodsAuthz
                     */
    
                    /**
                     * Constructs a new CanisterAuthzInfo.
                     * @memberof ic_base_types.pb.v1
                     * @classdesc Represents a CanisterAuthzInfo.
                     * @implements ICanisterAuthzInfo
                     * @constructor
                     * @param {ic_base_types.pb.v1.ICanisterAuthzInfo=} [properties] Properties to set
                     */
                    function CanisterAuthzInfo(properties) {
                        this.methodsAuthz = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CanisterAuthzInfo methodsAuthz.
                     * @member {Array.<ic_base_types.pb.v1.IMethodAuthzInfo>} methodsAuthz
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @instance
                     */
                    CanisterAuthzInfo.prototype.methodsAuthz = $util.emptyArray;
    
                    /**
                     * Creates a new CanisterAuthzInfo instance using the specified properties.
                     * @function create
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterAuthzInfo=} [properties] Properties to set
                     * @returns {ic_base_types.pb.v1.CanisterAuthzInfo} CanisterAuthzInfo instance
                     */
                    CanisterAuthzInfo.create = function create(properties) {
                        return new CanisterAuthzInfo(properties);
                    };
    
                    /**
                     * Encodes the specified CanisterAuthzInfo message. Does not implicitly {@link ic_base_types.pb.v1.CanisterAuthzInfo.verify|verify} messages.
                     * @function encode
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterAuthzInfo} message CanisterAuthzInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CanisterAuthzInfo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.methodsAuthz != null && message.methodsAuthz.length)
                            for (var i = 0; i < message.methodsAuthz.length; ++i)
                                $root.ic_base_types.pb.v1.MethodAuthzInfo.encode(message.methodsAuthz[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CanisterAuthzInfo message, length delimited. Does not implicitly {@link ic_base_types.pb.v1.CanisterAuthzInfo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.ICanisterAuthzInfo} message CanisterAuthzInfo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CanisterAuthzInfo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CanisterAuthzInfo message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_base_types.pb.v1.CanisterAuthzInfo} CanisterAuthzInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CanisterAuthzInfo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_base_types.pb.v1.CanisterAuthzInfo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.methodsAuthz && message.methodsAuthz.length))
                                        message.methodsAuthz = [];
                                    message.methodsAuthz.push($root.ic_base_types.pb.v1.MethodAuthzInfo.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CanisterAuthzInfo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_base_types.pb.v1.CanisterAuthzInfo} CanisterAuthzInfo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CanisterAuthzInfo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CanisterAuthzInfo message.
                     * @function verify
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CanisterAuthzInfo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.methodsAuthz != null && message.hasOwnProperty("methodsAuthz")) {
                            if (!Array.isArray(message.methodsAuthz))
                                return "methodsAuthz: array expected";
                            for (var i = 0; i < message.methodsAuthz.length; ++i) {
                                var error = $root.ic_base_types.pb.v1.MethodAuthzInfo.verify(message.methodsAuthz[i]);
                                if (error)
                                    return "methodsAuthz." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CanisterAuthzInfo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_base_types.pb.v1.CanisterAuthzInfo} CanisterAuthzInfo
                     */
                    CanisterAuthzInfo.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_base_types.pb.v1.CanisterAuthzInfo)
                            return object;
                        var message = new $root.ic_base_types.pb.v1.CanisterAuthzInfo();
                        if (object.methodsAuthz) {
                            if (!Array.isArray(object.methodsAuthz))
                                throw TypeError(".ic_base_types.pb.v1.CanisterAuthzInfo.methodsAuthz: array expected");
                            message.methodsAuthz = [];
                            for (var i = 0; i < object.methodsAuthz.length; ++i) {
                                if (typeof object.methodsAuthz[i] !== "object")
                                    throw TypeError(".ic_base_types.pb.v1.CanisterAuthzInfo.methodsAuthz: object expected");
                                message.methodsAuthz[i] = $root.ic_base_types.pb.v1.MethodAuthzInfo.fromObject(object.methodsAuthz[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CanisterAuthzInfo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {ic_base_types.pb.v1.CanisterAuthzInfo} message CanisterAuthzInfo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CanisterAuthzInfo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.methodsAuthz = [];
                        if (message.methodsAuthz && message.methodsAuthz.length) {
                            object.methodsAuthz = [];
                            for (var j = 0; j < message.methodsAuthz.length; ++j)
                                object.methodsAuthz[j] = $root.ic_base_types.pb.v1.MethodAuthzInfo.toObject(message.methodsAuthz[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CanisterAuthzInfo to JSON.
                     * @function toJSON
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CanisterAuthzInfo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CanisterAuthzInfo
                     * @function getTypeUrl
                     * @memberof ic_base_types.pb.v1.CanisterAuthzInfo
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CanisterAuthzInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_base_types.pb.v1.CanisterAuthzInfo";
                    };
    
                    return CanisterAuthzInfo;
                })();
    
                return v1;
            })();
    
            return pb;
        })();
    
        return ic_base_types;
    })();
    
    $root.google = (function() {
    
        /**
         * Namespace google.
         * @exports google
         * @namespace
         */
        var google = {};
    
        google.protobuf = (function() {
    
            /**
             * Namespace protobuf.
             * @memberof google
             * @namespace
             */
            var protobuf = {};
    
            protobuf.FileDescriptorSet = (function() {
    
                /**
                 * Properties of a FileDescriptorSet.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorSet
                 * @property {Array.<google.protobuf.IFileDescriptorProto>|null} [file] FileDescriptorSet file
                 */
    
                /**
                 * Constructs a new FileDescriptorSet.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorSet.
                 * @implements IFileDescriptorSet
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 */
                function FileDescriptorSet(properties) {
                    this.file = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorSet file.
                 * @member {Array.<google.protobuf.IFileDescriptorProto>} file
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 */
                FileDescriptorSet.prototype.file = $util.emptyArray;
    
                /**
                 * Creates a new FileDescriptorSet instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet instance
                 */
                FileDescriptorSet.create = function create(properties) {
                    return new FileDescriptorSet(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.file != null && message.file.length)
                        for (var i = 0; i < message.file.length; ++i)
                            $root.google.protobuf.FileDescriptorProto.encode(message.file[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorSet message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorSet.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.IFileDescriptorSet} message FileDescriptorSet message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorSet.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorSet();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.file && message.file.length))
                                    message.file = [];
                                message.file.push($root.google.protobuf.FileDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorSet message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorSet.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorSet message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorSet.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.file != null && message.hasOwnProperty("file")) {
                        if (!Array.isArray(message.file))
                            return "file: array expected";
                        for (var i = 0; i < message.file.length; ++i) {
                            var error = $root.google.protobuf.FileDescriptorProto.verify(message.file[i]);
                            if (error)
                                return "file." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorSet message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorSet} FileDescriptorSet
                 */
                FileDescriptorSet.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorSet)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorSet();
                    if (object.file) {
                        if (!Array.isArray(object.file))
                            throw TypeError(".google.protobuf.FileDescriptorSet.file: array expected");
                        message.file = [];
                        for (var i = 0; i < object.file.length; ++i) {
                            if (typeof object.file[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorSet.file: object expected");
                            message.file[i] = $root.google.protobuf.FileDescriptorProto.fromObject(object.file[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorSet message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {google.protobuf.FileDescriptorSet} message FileDescriptorSet
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorSet.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.file = [];
                    if (message.file && message.file.length) {
                        object.file = [];
                        for (var j = 0; j < message.file.length; ++j)
                            object.file[j] = $root.google.protobuf.FileDescriptorProto.toObject(message.file[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorSet to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorSet
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorSet.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorSet
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorSet
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorSet.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorSet";
                };
    
                return FileDescriptorSet;
            })();
    
            protobuf.FileDescriptorProto = (function() {
    
                /**
                 * Properties of a FileDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFileDescriptorProto
                 * @property {string|null} [name] FileDescriptorProto name
                 * @property {string|null} ["package"] FileDescriptorProto package
                 * @property {Array.<string>|null} [dependency] FileDescriptorProto dependency
                 * @property {Array.<number>|null} [publicDependency] FileDescriptorProto publicDependency
                 * @property {Array.<number>|null} [weakDependency] FileDescriptorProto weakDependency
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [messageType] FileDescriptorProto messageType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] FileDescriptorProto enumType
                 * @property {Array.<google.protobuf.IServiceDescriptorProto>|null} [service] FileDescriptorProto service
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] FileDescriptorProto extension
                 * @property {google.protobuf.IFileOptions|null} [options] FileDescriptorProto options
                 * @property {google.protobuf.ISourceCodeInfo|null} [sourceCodeInfo] FileDescriptorProto sourceCodeInfo
                 * @property {string|null} [syntax] FileDescriptorProto syntax
                 * @property {string|null} [edition] FileDescriptorProto edition
                 */
    
                /**
                 * Constructs a new FileDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileDescriptorProto.
                 * @implements IFileDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 */
                function FileDescriptorProto(properties) {
                    this.dependency = [];
                    this.publicDependency = [];
                    this.weakDependency = [];
                    this.messageType = [];
                    this.enumType = [];
                    this.service = [];
                    this.extension = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.name = "";
    
                /**
                 * FileDescriptorProto package.
                 * @member {string} package
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype["package"] = "";
    
                /**
                 * FileDescriptorProto dependency.
                 * @member {Array.<string>} dependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.dependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto publicDependency.
                 * @member {Array.<number>} publicDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.publicDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto weakDependency.
                 * @member {Array.<number>} weakDependency
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.weakDependency = $util.emptyArray;
    
                /**
                 * FileDescriptorProto messageType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} messageType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.messageType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * FileDescriptorProto service.
                 * @member {Array.<google.protobuf.IServiceDescriptorProto>} service
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.service = $util.emptyArray;
    
                /**
                 * FileDescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * FileDescriptorProto options.
                 * @member {google.protobuf.IFileOptions|null|undefined} options
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.options = null;
    
                /**
                 * FileDescriptorProto sourceCodeInfo.
                 * @member {google.protobuf.ISourceCodeInfo|null|undefined} sourceCodeInfo
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.sourceCodeInfo = null;
    
                /**
                 * FileDescriptorProto syntax.
                 * @member {string} syntax
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.syntax = "";
    
                /**
                 * FileDescriptorProto edition.
                 * @member {string} edition
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 */
                FileDescriptorProto.prototype.edition = "";
    
                /**
                 * Creates a new FileDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto instance
                 */
                FileDescriptorProto.create = function create(properties) {
                    return new FileDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message["package"] != null && Object.hasOwnProperty.call(message, "package"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message["package"]);
                    if (message.dependency != null && message.dependency.length)
                        for (var i = 0; i < message.dependency.length; ++i)
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.dependency[i]);
                    if (message.messageType != null && message.messageType.length)
                        for (var i = 0; i < message.messageType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.messageType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.service != null && message.service.length)
                        for (var i = 0; i < message.service.length; ++i)
                            $root.google.protobuf.ServiceDescriptorProto.encode(message.service[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FileOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.sourceCodeInfo != null && Object.hasOwnProperty.call(message, "sourceCodeInfo"))
                        $root.google.protobuf.SourceCodeInfo.encode(message.sourceCodeInfo, writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.publicDependency != null && message.publicDependency.length)
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            writer.uint32(/* id 10, wireType 0 =*/80).int32(message.publicDependency[i]);
                    if (message.weakDependency != null && message.weakDependency.length)
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            writer.uint32(/* id 11, wireType 0 =*/88).int32(message.weakDependency[i]);
                    if (message.syntax != null && Object.hasOwnProperty.call(message, "syntax"))
                        writer.uint32(/* id 12, wireType 2 =*/98).string(message.syntax);
                    if (message.edition != null && Object.hasOwnProperty.call(message, "edition"))
                        writer.uint32(/* id 13, wireType 2 =*/106).string(message.edition);
                    return writer;
                };
    
                /**
                 * Encodes the specified FileDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FileDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.IFileDescriptorProto} message FileDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message["package"] = reader.string();
                                break;
                            }
                        case 3: {
                                if (!(message.dependency && message.dependency.length))
                                    message.dependency = [];
                                message.dependency.push(reader.string());
                                break;
                            }
                        case 10: {
                                if (!(message.publicDependency && message.publicDependency.length))
                                    message.publicDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.publicDependency.push(reader.int32());
                                } else
                                    message.publicDependency.push(reader.int32());
                                break;
                            }
                        case 11: {
                                if (!(message.weakDependency && message.weakDependency.length))
                                    message.weakDependency = [];
                                if ((tag & 7) === 2) {
                                    var end2 = reader.uint32() + reader.pos;
                                    while (reader.pos < end2)
                                        message.weakDependency.push(reader.int32());
                                } else
                                    message.weakDependency.push(reader.int32());
                                break;
                            }
                        case 4: {
                                if (!(message.messageType && message.messageType.length))
                                    message.messageType = [];
                                message.messageType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.service && message.service.length))
                                    message.service = [];
                                message.service.push($root.google.protobuf.ServiceDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FileOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.decode(reader, reader.uint32());
                                break;
                            }
                        case 12: {
                                message.syntax = reader.string();
                                break;
                            }
                        case 13: {
                                message.edition = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        if (!$util.isString(message["package"]))
                            return "package: string expected";
                    if (message.dependency != null && message.hasOwnProperty("dependency")) {
                        if (!Array.isArray(message.dependency))
                            return "dependency: array expected";
                        for (var i = 0; i < message.dependency.length; ++i)
                            if (!$util.isString(message.dependency[i]))
                                return "dependency: string[] expected";
                    }
                    if (message.publicDependency != null && message.hasOwnProperty("publicDependency")) {
                        if (!Array.isArray(message.publicDependency))
                            return "publicDependency: array expected";
                        for (var i = 0; i < message.publicDependency.length; ++i)
                            if (!$util.isInteger(message.publicDependency[i]))
                                return "publicDependency: integer[] expected";
                    }
                    if (message.weakDependency != null && message.hasOwnProperty("weakDependency")) {
                        if (!Array.isArray(message.weakDependency))
                            return "weakDependency: array expected";
                        for (var i = 0; i < message.weakDependency.length; ++i)
                            if (!$util.isInteger(message.weakDependency[i]))
                                return "weakDependency: integer[] expected";
                    }
                    if (message.messageType != null && message.hasOwnProperty("messageType")) {
                        if (!Array.isArray(message.messageType))
                            return "messageType: array expected";
                        for (var i = 0; i < message.messageType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.messageType[i]);
                            if (error)
                                return "messageType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.service != null && message.hasOwnProperty("service")) {
                        if (!Array.isArray(message.service))
                            return "service: array expected";
                        for (var i = 0; i < message.service.length; ++i) {
                            var error = $root.google.protobuf.ServiceDescriptorProto.verify(message.service[i]);
                            if (error)
                                return "service." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FileOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo")) {
                        var error = $root.google.protobuf.SourceCodeInfo.verify(message.sourceCodeInfo);
                        if (error)
                            return "sourceCodeInfo." + error;
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        if (!$util.isString(message.syntax))
                            return "syntax: string expected";
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        if (!$util.isString(message.edition))
                            return "edition: string expected";
                    return null;
                };
    
                /**
                 * Creates a FileDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileDescriptorProto} FileDescriptorProto
                 */
                FileDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FileDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object["package"] != null)
                        message["package"] = String(object["package"]);
                    if (object.dependency) {
                        if (!Array.isArray(object.dependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.dependency: array expected");
                        message.dependency = [];
                        for (var i = 0; i < object.dependency.length; ++i)
                            message.dependency[i] = String(object.dependency[i]);
                    }
                    if (object.publicDependency) {
                        if (!Array.isArray(object.publicDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.publicDependency: array expected");
                        message.publicDependency = [];
                        for (var i = 0; i < object.publicDependency.length; ++i)
                            message.publicDependency[i] = object.publicDependency[i] | 0;
                    }
                    if (object.weakDependency) {
                        if (!Array.isArray(object.weakDependency))
                            throw TypeError(".google.protobuf.FileDescriptorProto.weakDependency: array expected");
                        message.weakDependency = [];
                        for (var i = 0; i < object.weakDependency.length; ++i)
                            message.weakDependency[i] = object.weakDependency[i] | 0;
                    }
                    if (object.messageType) {
                        if (!Array.isArray(object.messageType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.messageType: array expected");
                        message.messageType = [];
                        for (var i = 0; i < object.messageType.length; ++i) {
                            if (typeof object.messageType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.messageType: object expected");
                            message.messageType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.messageType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.FileDescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.service) {
                        if (!Array.isArray(object.service))
                            throw TypeError(".google.protobuf.FileDescriptorProto.service: array expected");
                        message.service = [];
                        for (var i = 0; i < object.service.length; ++i) {
                            if (typeof object.service[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.service: object expected");
                            message.service[i] = $root.google.protobuf.ServiceDescriptorProto.fromObject(object.service[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.FileDescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.FileDescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FileOptions.fromObject(object.options);
                    }
                    if (object.sourceCodeInfo != null) {
                        if (typeof object.sourceCodeInfo !== "object")
                            throw TypeError(".google.protobuf.FileDescriptorProto.sourceCodeInfo: object expected");
                        message.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.fromObject(object.sourceCodeInfo);
                    }
                    if (object.syntax != null)
                        message.syntax = String(object.syntax);
                    if (object.edition != null)
                        message.edition = String(object.edition);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {google.protobuf.FileDescriptorProto} message FileDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.dependency = [];
                        object.messageType = [];
                        object.enumType = [];
                        object.service = [];
                        object.extension = [];
                        object.publicDependency = [];
                        object.weakDependency = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object["package"] = "";
                        object.options = null;
                        object.sourceCodeInfo = null;
                        object.syntax = "";
                        object.edition = "";
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message["package"] != null && message.hasOwnProperty("package"))
                        object["package"] = message["package"];
                    if (message.dependency && message.dependency.length) {
                        object.dependency = [];
                        for (var j = 0; j < message.dependency.length; ++j)
                            object.dependency[j] = message.dependency[j];
                    }
                    if (message.messageType && message.messageType.length) {
                        object.messageType = [];
                        for (var j = 0; j < message.messageType.length; ++j)
                            object.messageType[j] = $root.google.protobuf.DescriptorProto.toObject(message.messageType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.service && message.service.length) {
                        object.service = [];
                        for (var j = 0; j < message.service.length; ++j)
                            object.service[j] = $root.google.protobuf.ServiceDescriptorProto.toObject(message.service[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FileOptions.toObject(message.options, options);
                    if (message.sourceCodeInfo != null && message.hasOwnProperty("sourceCodeInfo"))
                        object.sourceCodeInfo = $root.google.protobuf.SourceCodeInfo.toObject(message.sourceCodeInfo, options);
                    if (message.publicDependency && message.publicDependency.length) {
                        object.publicDependency = [];
                        for (var j = 0; j < message.publicDependency.length; ++j)
                            object.publicDependency[j] = message.publicDependency[j];
                    }
                    if (message.weakDependency && message.weakDependency.length) {
                        object.weakDependency = [];
                        for (var j = 0; j < message.weakDependency.length; ++j)
                            object.weakDependency[j] = message.weakDependency[j];
                    }
                    if (message.syntax != null && message.hasOwnProperty("syntax"))
                        object.syntax = message.syntax;
                    if (message.edition != null && message.hasOwnProperty("edition"))
                        object.edition = message.edition;
                    return object;
                };
    
                /**
                 * Converts this FileDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileDescriptorProto";
                };
    
                return FileDescriptorProto;
            })();
    
            protobuf.DescriptorProto = (function() {
    
                /**
                 * Properties of a DescriptorProto.
                 * @memberof google.protobuf
                 * @interface IDescriptorProto
                 * @property {string|null} [name] DescriptorProto name
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [field] DescriptorProto field
                 * @property {Array.<google.protobuf.IFieldDescriptorProto>|null} [extension] DescriptorProto extension
                 * @property {Array.<google.protobuf.IDescriptorProto>|null} [nestedType] DescriptorProto nestedType
                 * @property {Array.<google.protobuf.IEnumDescriptorProto>|null} [enumType] DescriptorProto enumType
                 * @property {Array.<google.protobuf.DescriptorProto.IExtensionRange>|null} [extensionRange] DescriptorProto extensionRange
                 * @property {Array.<google.protobuf.IOneofDescriptorProto>|null} [oneofDecl] DescriptorProto oneofDecl
                 * @property {google.protobuf.IMessageOptions|null} [options] DescriptorProto options
                 * @property {Array.<google.protobuf.DescriptorProto.IReservedRange>|null} [reservedRange] DescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] DescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new DescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a DescriptorProto.
                 * @implements IDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 */
                function DescriptorProto(properties) {
                    this.field = [];
                    this.extension = [];
                    this.nestedType = [];
                    this.enumType = [];
                    this.extensionRange = [];
                    this.oneofDecl = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * DescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.name = "";
    
                /**
                 * DescriptorProto field.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} field
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.field = $util.emptyArray;
    
                /**
                 * DescriptorProto extension.
                 * @member {Array.<google.protobuf.IFieldDescriptorProto>} extension
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extension = $util.emptyArray;
    
                /**
                 * DescriptorProto nestedType.
                 * @member {Array.<google.protobuf.IDescriptorProto>} nestedType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.nestedType = $util.emptyArray;
    
                /**
                 * DescriptorProto enumType.
                 * @member {Array.<google.protobuf.IEnumDescriptorProto>} enumType
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.enumType = $util.emptyArray;
    
                /**
                 * DescriptorProto extensionRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IExtensionRange>} extensionRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.extensionRange = $util.emptyArray;
    
                /**
                 * DescriptorProto oneofDecl.
                 * @member {Array.<google.protobuf.IOneofDescriptorProto>} oneofDecl
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.oneofDecl = $util.emptyArray;
    
                /**
                 * DescriptorProto options.
                 * @member {google.protobuf.IMessageOptions|null|undefined} options
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.options = null;
    
                /**
                 * DescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.DescriptorProto.IReservedRange>} reservedRange
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * DescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 */
                DescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new DescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto instance
                 */
                DescriptorProto.create = function create(properties) {
                    return new DescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified DescriptorProto message. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.field != null && message.field.length)
                        for (var i = 0; i < message.field.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.nestedType != null && message.nestedType.length)
                        for (var i = 0; i < message.nestedType.length; ++i)
                            $root.google.protobuf.DescriptorProto.encode(message.nestedType[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.enumType != null && message.enumType.length)
                        for (var i = 0; i < message.enumType.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.encode(message.enumType[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.extensionRange != null && message.extensionRange.length)
                        for (var i = 0; i < message.extensionRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ExtensionRange.encode(message.extensionRange[i], writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                    if (message.extension != null && message.extension.length)
                        for (var i = 0; i < message.extension.length; ++i)
                            $root.google.protobuf.FieldDescriptorProto.encode(message.extension[i], writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MessageOptions.encode(message.options, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                    if (message.oneofDecl != null && message.oneofDecl.length)
                        for (var i = 0; i < message.oneofDecl.length; ++i)
                            $root.google.protobuf.OneofDescriptorProto.encode(message.oneofDecl[i], writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.DescriptorProto.ReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 9, wireType 2 =*/74).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 10, wireType 2 =*/82).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified DescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.IDescriptorProto} message DescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                DescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.field && message.field.length))
                                    message.field = [];
                                message.field.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 6: {
                                if (!(message.extension && message.extension.length))
                                    message.extension = [];
                                message.extension.push($root.google.protobuf.FieldDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                if (!(message.nestedType && message.nestedType.length))
                                    message.nestedType = [];
                                message.nestedType.push($root.google.protobuf.DescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 4: {
                                if (!(message.enumType && message.enumType.length))
                                    message.enumType = [];
                                message.enumType.push($root.google.protobuf.EnumDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.extensionRange && message.extensionRange.length))
                                    message.extensionRange = [];
                                message.extensionRange.push($root.google.protobuf.DescriptorProto.ExtensionRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 8: {
                                if (!(message.oneofDecl && message.oneofDecl.length))
                                    message.oneofDecl = [];
                                message.oneofDecl.push($root.google.protobuf.OneofDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 7: {
                                message.options = $root.google.protobuf.MessageOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 9: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.DescriptorProto.ReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 10: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a DescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                DescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a DescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                DescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.field != null && message.hasOwnProperty("field")) {
                        if (!Array.isArray(message.field))
                            return "field: array expected";
                        for (var i = 0; i < message.field.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.field[i]);
                            if (error)
                                return "field." + error;
                        }
                    }
                    if (message.extension != null && message.hasOwnProperty("extension")) {
                        if (!Array.isArray(message.extension))
                            return "extension: array expected";
                        for (var i = 0; i < message.extension.length; ++i) {
                            var error = $root.google.protobuf.FieldDescriptorProto.verify(message.extension[i]);
                            if (error)
                                return "extension." + error;
                        }
                    }
                    if (message.nestedType != null && message.hasOwnProperty("nestedType")) {
                        if (!Array.isArray(message.nestedType))
                            return "nestedType: array expected";
                        for (var i = 0; i < message.nestedType.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.verify(message.nestedType[i]);
                            if (error)
                                return "nestedType." + error;
                        }
                    }
                    if (message.enumType != null && message.hasOwnProperty("enumType")) {
                        if (!Array.isArray(message.enumType))
                            return "enumType: array expected";
                        for (var i = 0; i < message.enumType.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.verify(message.enumType[i]);
                            if (error)
                                return "enumType." + error;
                        }
                    }
                    if (message.extensionRange != null && message.hasOwnProperty("extensionRange")) {
                        if (!Array.isArray(message.extensionRange))
                            return "extensionRange: array expected";
                        for (var i = 0; i < message.extensionRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ExtensionRange.verify(message.extensionRange[i]);
                            if (error)
                                return "extensionRange." + error;
                        }
                    }
                    if (message.oneofDecl != null && message.hasOwnProperty("oneofDecl")) {
                        if (!Array.isArray(message.oneofDecl))
                            return "oneofDecl: array expected";
                        for (var i = 0; i < message.oneofDecl.length; ++i) {
                            var error = $root.google.protobuf.OneofDescriptorProto.verify(message.oneofDecl[i]);
                            if (error)
                                return "oneofDecl." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MessageOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.DescriptorProto.ReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates a DescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.DescriptorProto} DescriptorProto
                 */
                DescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.DescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.DescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.field) {
                        if (!Array.isArray(object.field))
                            throw TypeError(".google.protobuf.DescriptorProto.field: array expected");
                        message.field = [];
                        for (var i = 0; i < object.field.length; ++i) {
                            if (typeof object.field[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.field: object expected");
                            message.field[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.field[i]);
                        }
                    }
                    if (object.extension) {
                        if (!Array.isArray(object.extension))
                            throw TypeError(".google.protobuf.DescriptorProto.extension: array expected");
                        message.extension = [];
                        for (var i = 0; i < object.extension.length; ++i) {
                            if (typeof object.extension[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extension: object expected");
                            message.extension[i] = $root.google.protobuf.FieldDescriptorProto.fromObject(object.extension[i]);
                        }
                    }
                    if (object.nestedType) {
                        if (!Array.isArray(object.nestedType))
                            throw TypeError(".google.protobuf.DescriptorProto.nestedType: array expected");
                        message.nestedType = [];
                        for (var i = 0; i < object.nestedType.length; ++i) {
                            if (typeof object.nestedType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.nestedType: object expected");
                            message.nestedType[i] = $root.google.protobuf.DescriptorProto.fromObject(object.nestedType[i]);
                        }
                    }
                    if (object.enumType) {
                        if (!Array.isArray(object.enumType))
                            throw TypeError(".google.protobuf.DescriptorProto.enumType: array expected");
                        message.enumType = [];
                        for (var i = 0; i < object.enumType.length; ++i) {
                            if (typeof object.enumType[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.enumType: object expected");
                            message.enumType[i] = $root.google.protobuf.EnumDescriptorProto.fromObject(object.enumType[i]);
                        }
                    }
                    if (object.extensionRange) {
                        if (!Array.isArray(object.extensionRange))
                            throw TypeError(".google.protobuf.DescriptorProto.extensionRange: array expected");
                        message.extensionRange = [];
                        for (var i = 0; i < object.extensionRange.length; ++i) {
                            if (typeof object.extensionRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.extensionRange: object expected");
                            message.extensionRange[i] = $root.google.protobuf.DescriptorProto.ExtensionRange.fromObject(object.extensionRange[i]);
                        }
                    }
                    if (object.oneofDecl) {
                        if (!Array.isArray(object.oneofDecl))
                            throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: array expected");
                        message.oneofDecl = [];
                        for (var i = 0; i < object.oneofDecl.length; ++i) {
                            if (typeof object.oneofDecl[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.oneofDecl: object expected");
                            message.oneofDecl[i] = $root.google.protobuf.OneofDescriptorProto.fromObject(object.oneofDecl[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.DescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MessageOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.DescriptorProto.ReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.DescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a DescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {google.protobuf.DescriptorProto} message DescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                DescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.field = [];
                        object.nestedType = [];
                        object.enumType = [];
                        object.extensionRange = [];
                        object.extension = [];
                        object.oneofDecl = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.field && message.field.length) {
                        object.field = [];
                        for (var j = 0; j < message.field.length; ++j)
                            object.field[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.field[j], options);
                    }
                    if (message.nestedType && message.nestedType.length) {
                        object.nestedType = [];
                        for (var j = 0; j < message.nestedType.length; ++j)
                            object.nestedType[j] = $root.google.protobuf.DescriptorProto.toObject(message.nestedType[j], options);
                    }
                    if (message.enumType && message.enumType.length) {
                        object.enumType = [];
                        for (var j = 0; j < message.enumType.length; ++j)
                            object.enumType[j] = $root.google.protobuf.EnumDescriptorProto.toObject(message.enumType[j], options);
                    }
                    if (message.extensionRange && message.extensionRange.length) {
                        object.extensionRange = [];
                        for (var j = 0; j < message.extensionRange.length; ++j)
                            object.extensionRange[j] = $root.google.protobuf.DescriptorProto.ExtensionRange.toObject(message.extensionRange[j], options);
                    }
                    if (message.extension && message.extension.length) {
                        object.extension = [];
                        for (var j = 0; j < message.extension.length; ++j)
                            object.extension[j] = $root.google.protobuf.FieldDescriptorProto.toObject(message.extension[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MessageOptions.toObject(message.options, options);
                    if (message.oneofDecl && message.oneofDecl.length) {
                        object.oneofDecl = [];
                        for (var j = 0; j < message.oneofDecl.length; ++j)
                            object.oneofDecl[j] = $root.google.protobuf.OneofDescriptorProto.toObject(message.oneofDecl[j], options);
                    }
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.DescriptorProto.ReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this DescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.DescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                DescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for DescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.DescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                DescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.DescriptorProto";
                };
    
                DescriptorProto.ExtensionRange = (function() {
    
                    /**
                     * Properties of an ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IExtensionRange
                     * @property {number|null} [start] ExtensionRange start
                     * @property {number|null} [end] ExtensionRange end
                     * @property {google.protobuf.IExtensionRangeOptions|null} [options] ExtensionRange options
                     */
    
                    /**
                     * Constructs a new ExtensionRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents an ExtensionRange.
                     * @implements IExtensionRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     */
                    function ExtensionRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ExtensionRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.start = 0;
    
                    /**
                     * ExtensionRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.end = 0;
    
                    /**
                     * ExtensionRange options.
                     * @member {google.protobuf.IExtensionRangeOptions|null|undefined} options
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     */
                    ExtensionRange.prototype.options = null;
    
                    /**
                     * Creates a new ExtensionRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange instance
                     */
                    ExtensionRange.create = function create(properties) {
                        return new ExtensionRange(properties);
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                            $root.google.protobuf.ExtensionRangeOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ExtensionRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ExtensionRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IExtensionRange} message ExtensionRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ExtensionRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 3: {
                                    message.options = $root.google.protobuf.ExtensionRangeOptions.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an ExtensionRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ExtensionRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an ExtensionRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ExtensionRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.options != null && message.hasOwnProperty("options")) {
                            var error = $root.google.protobuf.ExtensionRangeOptions.verify(message.options);
                            if (error)
                                return "options." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an ExtensionRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ExtensionRange} ExtensionRange
                     */
                    ExtensionRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ExtensionRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ExtensionRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        if (object.options != null) {
                            if (typeof object.options !== "object")
                                throw TypeError(".google.protobuf.DescriptorProto.ExtensionRange.options: object expected");
                            message.options = $root.google.protobuf.ExtensionRangeOptions.fromObject(object.options);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an ExtensionRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ExtensionRange} message ExtensionRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ExtensionRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                            object.options = null;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.options != null && message.hasOwnProperty("options"))
                            object.options = $root.google.protobuf.ExtensionRangeOptions.toObject(message.options, options);
                        return object;
                    };
    
                    /**
                     * Converts this ExtensionRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ExtensionRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ExtensionRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ExtensionRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ExtensionRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ExtensionRange";
                    };
    
                    return ExtensionRange;
                })();
    
                DescriptorProto.ReservedRange = (function() {
    
                    /**
                     * Properties of a ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @interface IReservedRange
                     * @property {number|null} [start] ReservedRange start
                     * @property {number|null} [end] ReservedRange end
                     */
    
                    /**
                     * Constructs a new ReservedRange.
                     * @memberof google.protobuf.DescriptorProto
                     * @classdesc Represents a ReservedRange.
                     * @implements IReservedRange
                     * @constructor
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     */
                    function ReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.start = 0;
    
                    /**
                     * ReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     */
                    ReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new ReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange instance
                     */
                    ReservedRange.create = function create(properties) {
                        return new ReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified ReservedRange message. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ReservedRange message, length delimited. Does not implicitly {@link google.protobuf.DescriptorProto.ReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.IReservedRange} message ReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates a ReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.DescriptorProto.ReservedRange} ReservedRange
                     */
                    ReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.DescriptorProto.ReservedRange)
                            return object;
                        var message = new $root.google.protobuf.DescriptorProto.ReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {google.protobuf.DescriptorProto.ReservedRange} message ReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this ReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.DescriptorProto.ReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.DescriptorProto.ReservedRange";
                    };
    
                    return ReservedRange;
                })();
    
                return DescriptorProto;
            })();
    
            protobuf.ExtensionRangeOptions = (function() {
    
                /**
                 * Properties of an ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @interface IExtensionRangeOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ExtensionRangeOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ExtensionRangeOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an ExtensionRangeOptions.
                 * @implements IExtensionRangeOptions
                 * @constructor
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 */
                function ExtensionRangeOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ExtensionRangeOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 */
                ExtensionRangeOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ExtensionRangeOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions instance
                 */
                ExtensionRangeOptions.create = function create(properties) {
                    return new ExtensionRangeOptions(properties);
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ExtensionRangeOptions message, length delimited. Does not implicitly {@link google.protobuf.ExtensionRangeOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.IExtensionRangeOptions} message ExtensionRangeOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ExtensionRangeOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ExtensionRangeOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an ExtensionRangeOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ExtensionRangeOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an ExtensionRangeOptions message.
                 * @function verify
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ExtensionRangeOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an ExtensionRangeOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ExtensionRangeOptions} ExtensionRangeOptions
                 */
                ExtensionRangeOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ExtensionRangeOptions)
                        return object;
                    var message = new $root.google.protobuf.ExtensionRangeOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ExtensionRangeOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an ExtensionRangeOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {google.protobuf.ExtensionRangeOptions} message ExtensionRangeOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ExtensionRangeOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ExtensionRangeOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ExtensionRangeOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ExtensionRangeOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ExtensionRangeOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ExtensionRangeOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ExtensionRangeOptions";
                };
    
                return ExtensionRangeOptions;
            })();
    
            protobuf.FieldDescriptorProto = (function() {
    
                /**
                 * Properties of a FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IFieldDescriptorProto
                 * @property {string|null} [name] FieldDescriptorProto name
                 * @property {number|null} [number] FieldDescriptorProto number
                 * @property {google.protobuf.FieldDescriptorProto.Label|null} [label] FieldDescriptorProto label
                 * @property {google.protobuf.FieldDescriptorProto.Type|null} [type] FieldDescriptorProto type
                 * @property {string|null} [typeName] FieldDescriptorProto typeName
                 * @property {string|null} [extendee] FieldDescriptorProto extendee
                 * @property {string|null} [defaultValue] FieldDescriptorProto defaultValue
                 * @property {number|null} [oneofIndex] FieldDescriptorProto oneofIndex
                 * @property {string|null} [jsonName] FieldDescriptorProto jsonName
                 * @property {google.protobuf.IFieldOptions|null} [options] FieldDescriptorProto options
                 * @property {boolean|null} [proto3Optional] FieldDescriptorProto proto3Optional
                 */
    
                /**
                 * Constructs a new FieldDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldDescriptorProto.
                 * @implements IFieldDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 */
                function FieldDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.name = "";
    
                /**
                 * FieldDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.number = 0;
    
                /**
                 * FieldDescriptorProto label.
                 * @member {google.protobuf.FieldDescriptorProto.Label} label
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.label = 1;
    
                /**
                 * FieldDescriptorProto type.
                 * @member {google.protobuf.FieldDescriptorProto.Type} type
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.type = 1;
    
                /**
                 * FieldDescriptorProto typeName.
                 * @member {string} typeName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.typeName = "";
    
                /**
                 * FieldDescriptorProto extendee.
                 * @member {string} extendee
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.extendee = "";
    
                /**
                 * FieldDescriptorProto defaultValue.
                 * @member {string} defaultValue
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.defaultValue = "";
    
                /**
                 * FieldDescriptorProto oneofIndex.
                 * @member {number} oneofIndex
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.oneofIndex = 0;
    
                /**
                 * FieldDescriptorProto jsonName.
                 * @member {string} jsonName
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.jsonName = "";
    
                /**
                 * FieldDescriptorProto options.
                 * @member {google.protobuf.IFieldOptions|null|undefined} options
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.options = null;
    
                /**
                 * FieldDescriptorProto proto3Optional.
                 * @member {boolean} proto3Optional
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 */
                FieldDescriptorProto.prototype.proto3Optional = false;
    
                /**
                 * Creates a new FieldDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto instance
                 */
                FieldDescriptorProto.create = function create(properties) {
                    return new FieldDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.extendee != null && Object.hasOwnProperty.call(message, "extendee"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.extendee);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 3, wireType 0 =*/24).int32(message.number);
                    if (message.label != null && Object.hasOwnProperty.call(message, "label"))
                        writer.uint32(/* id 4, wireType 0 =*/32).int32(message.label);
                    if (message.type != null && Object.hasOwnProperty.call(message, "type"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int32(message.type);
                    if (message.typeName != null && Object.hasOwnProperty.call(message, "typeName"))
                        writer.uint32(/* id 6, wireType 2 =*/50).string(message.typeName);
                    if (message.defaultValue != null && Object.hasOwnProperty.call(message, "defaultValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).string(message.defaultValue);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.FieldOptions.encode(message.options, writer.uint32(/* id 8, wireType 2 =*/66).fork()).ldelim();
                    if (message.oneofIndex != null && Object.hasOwnProperty.call(message, "oneofIndex"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.oneofIndex);
                    if (message.jsonName != null && Object.hasOwnProperty.call(message, "jsonName"))
                        writer.uint32(/* id 10, wireType 2 =*/82).string(message.jsonName);
                    if (message.proto3Optional != null && Object.hasOwnProperty.call(message, "proto3Optional"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.proto3Optional);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.FieldDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.IFieldDescriptorProto} message FieldDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 3: {
                                message.number = reader.int32();
                                break;
                            }
                        case 4: {
                                message.label = reader.int32();
                                break;
                            }
                        case 5: {
                                message.type = reader.int32();
                                break;
                            }
                        case 6: {
                                message.typeName = reader.string();
                                break;
                            }
                        case 2: {
                                message.extendee = reader.string();
                                break;
                            }
                        case 7: {
                                message.defaultValue = reader.string();
                                break;
                            }
                        case 9: {
                                message.oneofIndex = reader.int32();
                                break;
                            }
                        case 10: {
                                message.jsonName = reader.string();
                                break;
                            }
                        case 8: {
                                message.options = $root.google.protobuf.FieldOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 17: {
                                message.proto3Optional = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.label != null && message.hasOwnProperty("label"))
                        switch (message.label) {
                        default:
                            return "label: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.type != null && message.hasOwnProperty("type"))
                        switch (message.type) {
                        default:
                            return "type: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                            break;
                        }
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        if (!$util.isString(message.typeName))
                            return "typeName: string expected";
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        if (!$util.isString(message.extendee))
                            return "extendee: string expected";
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        if (!$util.isString(message.defaultValue))
                            return "defaultValue: string expected";
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        if (!$util.isInteger(message.oneofIndex))
                            return "oneofIndex: integer expected";
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        if (!$util.isString(message.jsonName))
                            return "jsonName: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.FieldOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        if (typeof message.proto3Optional !== "boolean")
                            return "proto3Optional: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldDescriptorProto} FieldDescriptorProto
                 */
                FieldDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.FieldDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    switch (object.label) {
                    default:
                        if (typeof object.label === "number") {
                            message.label = object.label;
                            break;
                        }
                        break;
                    case "LABEL_OPTIONAL":
                    case 1:
                        message.label = 1;
                        break;
                    case "LABEL_REQUIRED":
                    case 2:
                        message.label = 2;
                        break;
                    case "LABEL_REPEATED":
                    case 3:
                        message.label = 3;
                        break;
                    }
                    switch (object.type) {
                    default:
                        if (typeof object.type === "number") {
                            message.type = object.type;
                            break;
                        }
                        break;
                    case "TYPE_DOUBLE":
                    case 1:
                        message.type = 1;
                        break;
                    case "TYPE_FLOAT":
                    case 2:
                        message.type = 2;
                        break;
                    case "TYPE_INT64":
                    case 3:
                        message.type = 3;
                        break;
                    case "TYPE_UINT64":
                    case 4:
                        message.type = 4;
                        break;
                    case "TYPE_INT32":
                    case 5:
                        message.type = 5;
                        break;
                    case "TYPE_FIXED64":
                    case 6:
                        message.type = 6;
                        break;
                    case "TYPE_FIXED32":
                    case 7:
                        message.type = 7;
                        break;
                    case "TYPE_BOOL":
                    case 8:
                        message.type = 8;
                        break;
                    case "TYPE_STRING":
                    case 9:
                        message.type = 9;
                        break;
                    case "TYPE_GROUP":
                    case 10:
                        message.type = 10;
                        break;
                    case "TYPE_MESSAGE":
                    case 11:
                        message.type = 11;
                        break;
                    case "TYPE_BYTES":
                    case 12:
                        message.type = 12;
                        break;
                    case "TYPE_UINT32":
                    case 13:
                        message.type = 13;
                        break;
                    case "TYPE_ENUM":
                    case 14:
                        message.type = 14;
                        break;
                    case "TYPE_SFIXED32":
                    case 15:
                        message.type = 15;
                        break;
                    case "TYPE_SFIXED64":
                    case 16:
                        message.type = 16;
                        break;
                    case "TYPE_SINT32":
                    case 17:
                        message.type = 17;
                        break;
                    case "TYPE_SINT64":
                    case 18:
                        message.type = 18;
                        break;
                    }
                    if (object.typeName != null)
                        message.typeName = String(object.typeName);
                    if (object.extendee != null)
                        message.extendee = String(object.extendee);
                    if (object.defaultValue != null)
                        message.defaultValue = String(object.defaultValue);
                    if (object.oneofIndex != null)
                        message.oneofIndex = object.oneofIndex | 0;
                    if (object.jsonName != null)
                        message.jsonName = String(object.jsonName);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.FieldDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.FieldOptions.fromObject(object.options);
                    }
                    if (object.proto3Optional != null)
                        message.proto3Optional = Boolean(object.proto3Optional);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {google.protobuf.FieldDescriptorProto} message FieldDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.extendee = "";
                        object.number = 0;
                        object.label = options.enums === String ? "LABEL_OPTIONAL" : 1;
                        object.type = options.enums === String ? "TYPE_DOUBLE" : 1;
                        object.typeName = "";
                        object.defaultValue = "";
                        object.options = null;
                        object.oneofIndex = 0;
                        object.jsonName = "";
                        object.proto3Optional = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.extendee != null && message.hasOwnProperty("extendee"))
                        object.extendee = message.extendee;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.label != null && message.hasOwnProperty("label"))
                        object.label = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Label[message.label] === undefined ? message.label : $root.google.protobuf.FieldDescriptorProto.Label[message.label] : message.label;
                    if (message.type != null && message.hasOwnProperty("type"))
                        object.type = options.enums === String ? $root.google.protobuf.FieldDescriptorProto.Type[message.type] === undefined ? message.type : $root.google.protobuf.FieldDescriptorProto.Type[message.type] : message.type;
                    if (message.typeName != null && message.hasOwnProperty("typeName"))
                        object.typeName = message.typeName;
                    if (message.defaultValue != null && message.hasOwnProperty("defaultValue"))
                        object.defaultValue = message.defaultValue;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.FieldOptions.toObject(message.options, options);
                    if (message.oneofIndex != null && message.hasOwnProperty("oneofIndex"))
                        object.oneofIndex = message.oneofIndex;
                    if (message.jsonName != null && message.hasOwnProperty("jsonName"))
                        object.jsonName = message.jsonName;
                    if (message.proto3Optional != null && message.hasOwnProperty("proto3Optional"))
                        object.proto3Optional = message.proto3Optional;
                    return object;
                };
    
                /**
                 * Converts this FieldDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldDescriptorProto";
                };
    
                /**
                 * Type enum.
                 * @name google.protobuf.FieldDescriptorProto.Type
                 * @enum {number}
                 * @property {number} TYPE_DOUBLE=1 TYPE_DOUBLE value
                 * @property {number} TYPE_FLOAT=2 TYPE_FLOAT value
                 * @property {number} TYPE_INT64=3 TYPE_INT64 value
                 * @property {number} TYPE_UINT64=4 TYPE_UINT64 value
                 * @property {number} TYPE_INT32=5 TYPE_INT32 value
                 * @property {number} TYPE_FIXED64=6 TYPE_FIXED64 value
                 * @property {number} TYPE_FIXED32=7 TYPE_FIXED32 value
                 * @property {number} TYPE_BOOL=8 TYPE_BOOL value
                 * @property {number} TYPE_STRING=9 TYPE_STRING value
                 * @property {number} TYPE_GROUP=10 TYPE_GROUP value
                 * @property {number} TYPE_MESSAGE=11 TYPE_MESSAGE value
                 * @property {number} TYPE_BYTES=12 TYPE_BYTES value
                 * @property {number} TYPE_UINT32=13 TYPE_UINT32 value
                 * @property {number} TYPE_ENUM=14 TYPE_ENUM value
                 * @property {number} TYPE_SFIXED32=15 TYPE_SFIXED32 value
                 * @property {number} TYPE_SFIXED64=16 TYPE_SFIXED64 value
                 * @property {number} TYPE_SINT32=17 TYPE_SINT32 value
                 * @property {number} TYPE_SINT64=18 TYPE_SINT64 value
                 */
                FieldDescriptorProto.Type = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "TYPE_DOUBLE"] = 1;
                    values[valuesById[2] = "TYPE_FLOAT"] = 2;
                    values[valuesById[3] = "TYPE_INT64"] = 3;
                    values[valuesById[4] = "TYPE_UINT64"] = 4;
                    values[valuesById[5] = "TYPE_INT32"] = 5;
                    values[valuesById[6] = "TYPE_FIXED64"] = 6;
                    values[valuesById[7] = "TYPE_FIXED32"] = 7;
                    values[valuesById[8] = "TYPE_BOOL"] = 8;
                    values[valuesById[9] = "TYPE_STRING"] = 9;
                    values[valuesById[10] = "TYPE_GROUP"] = 10;
                    values[valuesById[11] = "TYPE_MESSAGE"] = 11;
                    values[valuesById[12] = "TYPE_BYTES"] = 12;
                    values[valuesById[13] = "TYPE_UINT32"] = 13;
                    values[valuesById[14] = "TYPE_ENUM"] = 14;
                    values[valuesById[15] = "TYPE_SFIXED32"] = 15;
                    values[valuesById[16] = "TYPE_SFIXED64"] = 16;
                    values[valuesById[17] = "TYPE_SINT32"] = 17;
                    values[valuesById[18] = "TYPE_SINT64"] = 18;
                    return values;
                })();
    
                /**
                 * Label enum.
                 * @name google.protobuf.FieldDescriptorProto.Label
                 * @enum {number}
                 * @property {number} LABEL_OPTIONAL=1 LABEL_OPTIONAL value
                 * @property {number} LABEL_REQUIRED=2 LABEL_REQUIRED value
                 * @property {number} LABEL_REPEATED=3 LABEL_REPEATED value
                 */
                FieldDescriptorProto.Label = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "LABEL_OPTIONAL"] = 1;
                    values[valuesById[2] = "LABEL_REQUIRED"] = 2;
                    values[valuesById[3] = "LABEL_REPEATED"] = 3;
                    return values;
                })();
    
                return FieldDescriptorProto;
            })();
    
            protobuf.OneofDescriptorProto = (function() {
    
                /**
                 * Properties of an OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IOneofDescriptorProto
                 * @property {string|null} [name] OneofDescriptorProto name
                 * @property {google.protobuf.IOneofOptions|null} [options] OneofDescriptorProto options
                 */
    
                /**
                 * Constructs a new OneofDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofDescriptorProto.
                 * @implements IOneofDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 */
                function OneofDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.name = "";
    
                /**
                 * OneofDescriptorProto options.
                 * @member {google.protobuf.IOneofOptions|null|undefined} options
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 */
                OneofDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new OneofDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto instance
                 */
                OneofDescriptorProto.create = function create(properties) {
                    return new OneofDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.OneofOptions.encode(message.options, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.OneofDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.IOneofDescriptorProto} message OneofDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.options = $root.google.protobuf.OneofOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.OneofOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofDescriptorProto} OneofDescriptorProto
                 */
                OneofDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.OneofDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.OneofDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.OneofOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {google.protobuf.OneofDescriptorProto} message OneofDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.OneofOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this OneofDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofDescriptorProto";
                };
    
                return OneofDescriptorProto;
            })();
    
            protobuf.EnumDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumDescriptorProto
                 * @property {string|null} [name] EnumDescriptorProto name
                 * @property {Array.<google.protobuf.IEnumValueDescriptorProto>|null} [value] EnumDescriptorProto value
                 * @property {google.protobuf.IEnumOptions|null} [options] EnumDescriptorProto options
                 * @property {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>|null} [reservedRange] EnumDescriptorProto reservedRange
                 * @property {Array.<string>|null} [reservedName] EnumDescriptorProto reservedName
                 */
    
                /**
                 * Constructs a new EnumDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumDescriptorProto.
                 * @implements IEnumDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 */
                function EnumDescriptorProto(properties) {
                    this.value = [];
                    this.reservedRange = [];
                    this.reservedName = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.name = "";
    
                /**
                 * EnumDescriptorProto value.
                 * @member {Array.<google.protobuf.IEnumValueDescriptorProto>} value
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.value = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto options.
                 * @member {google.protobuf.IEnumOptions|null|undefined} options
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.options = null;
    
                /**
                 * EnumDescriptorProto reservedRange.
                 * @member {Array.<google.protobuf.EnumDescriptorProto.IEnumReservedRange>} reservedRange
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedRange = $util.emptyArray;
    
                /**
                 * EnumDescriptorProto reservedName.
                 * @member {Array.<string>} reservedName
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 */
                EnumDescriptorProto.prototype.reservedName = $util.emptyArray;
    
                /**
                 * Creates a new EnumDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto instance
                 */
                EnumDescriptorProto.create = function create(properties) {
                    return new EnumDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.value != null && message.value.length)
                        for (var i = 0; i < message.value.length; ++i)
                            $root.google.protobuf.EnumValueDescriptorProto.encode(message.value[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    if (message.reservedRange != null && message.reservedRange.length)
                        for (var i = 0; i < message.reservedRange.length; ++i)
                            $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.encode(message.reservedRange[i], writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.reservedName != null && message.reservedName.length)
                        for (var i = 0; i < message.reservedName.length; ++i)
                            writer.uint32(/* id 5, wireType 2 =*/42).string(message.reservedName[i]);
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumDescriptorProto} message EnumDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.value && message.value.length))
                                    message.value = [];
                                message.value.push($root.google.protobuf.EnumValueDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 4: {
                                if (!(message.reservedRange && message.reservedRange.length))
                                    message.reservedRange = [];
                                message.reservedRange.push($root.google.protobuf.EnumDescriptorProto.EnumReservedRange.decode(reader, reader.uint32()));
                                break;
                            }
                        case 5: {
                                if (!(message.reservedName && message.reservedName.length))
                                    message.reservedName = [];
                                message.reservedName.push(reader.string());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.value != null && message.hasOwnProperty("value")) {
                        if (!Array.isArray(message.value))
                            return "value: array expected";
                        for (var i = 0; i < message.value.length; ++i) {
                            var error = $root.google.protobuf.EnumValueDescriptorProto.verify(message.value[i]);
                            if (error)
                                return "value." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.reservedRange != null && message.hasOwnProperty("reservedRange")) {
                        if (!Array.isArray(message.reservedRange))
                            return "reservedRange: array expected";
                        for (var i = 0; i < message.reservedRange.length; ++i) {
                            var error = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.verify(message.reservedRange[i]);
                            if (error)
                                return "reservedRange." + error;
                        }
                    }
                    if (message.reservedName != null && message.hasOwnProperty("reservedName")) {
                        if (!Array.isArray(message.reservedName))
                            return "reservedName: array expected";
                        for (var i = 0; i < message.reservedName.length; ++i)
                            if (!$util.isString(message.reservedName[i]))
                                return "reservedName: string[] expected";
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumDescriptorProto} EnumDescriptorProto
                 */
                EnumDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.value) {
                        if (!Array.isArray(object.value))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.value: array expected");
                        message.value = [];
                        for (var i = 0; i < object.value.length; ++i) {
                            if (typeof object.value[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.value: object expected");
                            message.value[i] = $root.google.protobuf.EnumValueDescriptorProto.fromObject(object.value[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumOptions.fromObject(object.options);
                    }
                    if (object.reservedRange) {
                        if (!Array.isArray(object.reservedRange))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: array expected");
                        message.reservedRange = [];
                        for (var i = 0; i < object.reservedRange.length; ++i) {
                            if (typeof object.reservedRange[i] !== "object")
                                throw TypeError(".google.protobuf.EnumDescriptorProto.reservedRange: object expected");
                            message.reservedRange[i] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.fromObject(object.reservedRange[i]);
                        }
                    }
                    if (object.reservedName) {
                        if (!Array.isArray(object.reservedName))
                            throw TypeError(".google.protobuf.EnumDescriptorProto.reservedName: array expected");
                        message.reservedName = [];
                        for (var i = 0; i < object.reservedName.length; ++i)
                            message.reservedName[i] = String(object.reservedName[i]);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumDescriptorProto} message EnumDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults) {
                        object.value = [];
                        object.reservedRange = [];
                        object.reservedName = [];
                    }
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.value && message.value.length) {
                        object.value = [];
                        for (var j = 0; j < message.value.length; ++j)
                            object.value[j] = $root.google.protobuf.EnumValueDescriptorProto.toObject(message.value[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumOptions.toObject(message.options, options);
                    if (message.reservedRange && message.reservedRange.length) {
                        object.reservedRange = [];
                        for (var j = 0; j < message.reservedRange.length; ++j)
                            object.reservedRange[j] = $root.google.protobuf.EnumDescriptorProto.EnumReservedRange.toObject(message.reservedRange[j], options);
                    }
                    if (message.reservedName && message.reservedName.length) {
                        object.reservedName = [];
                        for (var j = 0; j < message.reservedName.length; ++j)
                            object.reservedName[j] = message.reservedName[j];
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto";
                };
    
                EnumDescriptorProto.EnumReservedRange = (function() {
    
                    /**
                     * Properties of an EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @interface IEnumReservedRange
                     * @property {number|null} [start] EnumReservedRange start
                     * @property {number|null} [end] EnumReservedRange end
                     */
    
                    /**
                     * Constructs a new EnumReservedRange.
                     * @memberof google.protobuf.EnumDescriptorProto
                     * @classdesc Represents an EnumReservedRange.
                     * @implements IEnumReservedRange
                     * @constructor
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     */
                    function EnumReservedRange(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EnumReservedRange start.
                     * @member {number} start
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.start = 0;
    
                    /**
                     * EnumReservedRange end.
                     * @member {number} end
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     */
                    EnumReservedRange.prototype.end = 0;
    
                    /**
                     * Creates a new EnumReservedRange instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange=} [properties] Properties to set
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange instance
                     */
                    EnumReservedRange.create = function create(properties) {
                        return new EnumReservedRange(properties);
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).int32(message.start);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 2, wireType 0 =*/16).int32(message.end);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EnumReservedRange message, length delimited. Does not implicitly {@link google.protobuf.EnumDescriptorProto.EnumReservedRange.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.IEnumReservedRange} message EnumReservedRange message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EnumReservedRange.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.int32();
                                    break;
                                }
                            case 2: {
                                    message.end = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EnumReservedRange message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EnumReservedRange.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EnumReservedRange message.
                     * @function verify
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EnumReservedRange.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start))
                                return "start: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EnumReservedRange message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.EnumDescriptorProto.EnumReservedRange} EnumReservedRange
                     */
                    EnumReservedRange.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.EnumDescriptorProto.EnumReservedRange)
                            return object;
                        var message = new $root.google.protobuf.EnumDescriptorProto.EnumReservedRange();
                        if (object.start != null)
                            message.start = object.start | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EnumReservedRange message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {google.protobuf.EnumDescriptorProto.EnumReservedRange} message EnumReservedRange
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EnumReservedRange.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.start = 0;
                            object.end = 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            object.start = message.start;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        return object;
                    };
    
                    /**
                     * Converts this EnumReservedRange to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EnumReservedRange.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EnumReservedRange
                     * @function getTypeUrl
                     * @memberof google.protobuf.EnumDescriptorProto.EnumReservedRange
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EnumReservedRange.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.EnumDescriptorProto.EnumReservedRange";
                    };
    
                    return EnumReservedRange;
                })();
    
                return EnumDescriptorProto;
            })();
    
            protobuf.EnumValueDescriptorProto = (function() {
    
                /**
                 * Properties of an EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IEnumValueDescriptorProto
                 * @property {string|null} [name] EnumValueDescriptorProto name
                 * @property {number|null} [number] EnumValueDescriptorProto number
                 * @property {google.protobuf.IEnumValueOptions|null} [options] EnumValueDescriptorProto options
                 */
    
                /**
                 * Constructs a new EnumValueDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueDescriptorProto.
                 * @implements IEnumValueDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 */
                function EnumValueDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.name = "";
    
                /**
                 * EnumValueDescriptorProto number.
                 * @member {number} number
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.number = 0;
    
                /**
                 * EnumValueDescriptorProto options.
                 * @member {google.protobuf.IEnumValueOptions|null|undefined} options
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 */
                EnumValueDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new EnumValueDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto instance
                 */
                EnumValueDescriptorProto.create = function create(properties) {
                    return new EnumValueDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.number != null && Object.hasOwnProperty.call(message, "number"))
                        writer.uint32(/* id 2, wireType 0 =*/16).int32(message.number);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.EnumValueOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.EnumValueDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.IEnumValueDescriptorProto} message EnumValueDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.number = reader.int32();
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.EnumValueOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.number != null && message.hasOwnProperty("number"))
                        if (!$util.isInteger(message.number))
                            return "number: integer expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.EnumValueOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueDescriptorProto} EnumValueDescriptorProto
                 */
                EnumValueDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.EnumValueDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.number != null)
                        message.number = object.number | 0;
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.EnumValueDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.EnumValueOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {google.protobuf.EnumValueDescriptorProto} message EnumValueDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.number = 0;
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.number != null && message.hasOwnProperty("number"))
                        object.number = message.number;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.EnumValueOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this EnumValueDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueDescriptorProto";
                };
    
                return EnumValueDescriptorProto;
            })();
    
            protobuf.ServiceDescriptorProto = (function() {
    
                /**
                 * Properties of a ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IServiceDescriptorProto
                 * @property {string|null} [name] ServiceDescriptorProto name
                 * @property {Array.<google.protobuf.IMethodDescriptorProto>|null} [method] ServiceDescriptorProto method
                 * @property {google.protobuf.IServiceOptions|null} [options] ServiceDescriptorProto options
                 */
    
                /**
                 * Constructs a new ServiceDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceDescriptorProto.
                 * @implements IServiceDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 */
                function ServiceDescriptorProto(properties) {
                    this.method = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.name = "";
    
                /**
                 * ServiceDescriptorProto method.
                 * @member {Array.<google.protobuf.IMethodDescriptorProto>} method
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.method = $util.emptyArray;
    
                /**
                 * ServiceDescriptorProto options.
                 * @member {google.protobuf.IServiceOptions|null|undefined} options
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 */
                ServiceDescriptorProto.prototype.options = null;
    
                /**
                 * Creates a new ServiceDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto instance
                 */
                ServiceDescriptorProto.create = function create(properties) {
                    return new ServiceDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.method != null && message.method.length)
                        for (var i = 0; i < message.method.length; ++i)
                            $root.google.protobuf.MethodDescriptorProto.encode(message.method[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.ServiceOptions.encode(message.options, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.ServiceDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.IServiceDescriptorProto} message ServiceDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                if (!(message.method && message.method.length))
                                    message.method = [];
                                message.method.push($root.google.protobuf.MethodDescriptorProto.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.options = $root.google.protobuf.ServiceOptions.decode(reader, reader.uint32());
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.method != null && message.hasOwnProperty("method")) {
                        if (!Array.isArray(message.method))
                            return "method: array expected";
                        for (var i = 0; i < message.method.length; ++i) {
                            var error = $root.google.protobuf.MethodDescriptorProto.verify(message.method[i]);
                            if (error)
                                return "method." + error;
                        }
                    }
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.ServiceOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceDescriptorProto} ServiceDescriptorProto
                 */
                ServiceDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.ServiceDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.method) {
                        if (!Array.isArray(object.method))
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.method: array expected");
                        message.method = [];
                        for (var i = 0; i < object.method.length; ++i) {
                            if (typeof object.method[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceDescriptorProto.method: object expected");
                            message.method[i] = $root.google.protobuf.MethodDescriptorProto.fromObject(object.method[i]);
                        }
                    }
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.ServiceDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.ServiceOptions.fromObject(object.options);
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {google.protobuf.ServiceDescriptorProto} message ServiceDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.method = [];
                    if (options.defaults) {
                        object.name = "";
                        object.options = null;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.method && message.method.length) {
                        object.method = [];
                        for (var j = 0; j < message.method.length; ++j)
                            object.method[j] = $root.google.protobuf.MethodDescriptorProto.toObject(message.method[j], options);
                    }
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.ServiceOptions.toObject(message.options, options);
                    return object;
                };
    
                /**
                 * Converts this ServiceDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceDescriptorProto";
                };
    
                return ServiceDescriptorProto;
            })();
    
            protobuf.MethodDescriptorProto = (function() {
    
                /**
                 * Properties of a MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @interface IMethodDescriptorProto
                 * @property {string|null} [name] MethodDescriptorProto name
                 * @property {string|null} [inputType] MethodDescriptorProto inputType
                 * @property {string|null} [outputType] MethodDescriptorProto outputType
                 * @property {google.protobuf.IMethodOptions|null} [options] MethodDescriptorProto options
                 * @property {boolean|null} [clientStreaming] MethodDescriptorProto clientStreaming
                 * @property {boolean|null} [serverStreaming] MethodDescriptorProto serverStreaming
                 */
    
                /**
                 * Constructs a new MethodDescriptorProto.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodDescriptorProto.
                 * @implements IMethodDescriptorProto
                 * @constructor
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 */
                function MethodDescriptorProto(properties) {
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodDescriptorProto name.
                 * @member {string} name
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.name = "";
    
                /**
                 * MethodDescriptorProto inputType.
                 * @member {string} inputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.inputType = "";
    
                /**
                 * MethodDescriptorProto outputType.
                 * @member {string} outputType
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.outputType = "";
    
                /**
                 * MethodDescriptorProto options.
                 * @member {google.protobuf.IMethodOptions|null|undefined} options
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.options = null;
    
                /**
                 * MethodDescriptorProto clientStreaming.
                 * @member {boolean} clientStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.clientStreaming = false;
    
                /**
                 * MethodDescriptorProto serverStreaming.
                 * @member {boolean} serverStreaming
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 */
                MethodDescriptorProto.prototype.serverStreaming = false;
    
                /**
                 * Creates a new MethodDescriptorProto instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto=} [properties] Properties to set
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto instance
                 */
                MethodDescriptorProto.create = function create(properties) {
                    return new MethodDescriptorProto(properties);
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && Object.hasOwnProperty.call(message, "name"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);
                    if (message.inputType != null && Object.hasOwnProperty.call(message, "inputType"))
                        writer.uint32(/* id 2, wireType 2 =*/18).string(message.inputType);
                    if (message.outputType != null && Object.hasOwnProperty.call(message, "outputType"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.outputType);
                    if (message.options != null && Object.hasOwnProperty.call(message, "options"))
                        $root.google.protobuf.MethodOptions.encode(message.options, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                    if (message.clientStreaming != null && Object.hasOwnProperty.call(message, "clientStreaming"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.clientStreaming);
                    if (message.serverStreaming != null && Object.hasOwnProperty.call(message, "serverStreaming"))
                        writer.uint32(/* id 6, wireType 0 =*/48).bool(message.serverStreaming);
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodDescriptorProto message, length delimited. Does not implicitly {@link google.protobuf.MethodDescriptorProto.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.IMethodDescriptorProto} message MethodDescriptorProto message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodDescriptorProto.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodDescriptorProto();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.name = reader.string();
                                break;
                            }
                        case 2: {
                                message.inputType = reader.string();
                                break;
                            }
                        case 3: {
                                message.outputType = reader.string();
                                break;
                            }
                        case 4: {
                                message.options = $root.google.protobuf.MethodOptions.decode(reader, reader.uint32());
                                break;
                            }
                        case 5: {
                                message.clientStreaming = reader.bool();
                                break;
                            }
                        case 6: {
                                message.serverStreaming = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodDescriptorProto message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodDescriptorProto.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodDescriptorProto message.
                 * @function verify
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodDescriptorProto.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name"))
                        if (!$util.isString(message.name))
                            return "name: string expected";
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        if (!$util.isString(message.inputType))
                            return "inputType: string expected";
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        if (!$util.isString(message.outputType))
                            return "outputType: string expected";
                    if (message.options != null && message.hasOwnProperty("options")) {
                        var error = $root.google.protobuf.MethodOptions.verify(message.options);
                        if (error)
                            return "options." + error;
                    }
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        if (typeof message.clientStreaming !== "boolean")
                            return "clientStreaming: boolean expected";
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        if (typeof message.serverStreaming !== "boolean")
                            return "serverStreaming: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MethodDescriptorProto message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodDescriptorProto} MethodDescriptorProto
                 */
                MethodDescriptorProto.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodDescriptorProto)
                        return object;
                    var message = new $root.google.protobuf.MethodDescriptorProto();
                    if (object.name != null)
                        message.name = String(object.name);
                    if (object.inputType != null)
                        message.inputType = String(object.inputType);
                    if (object.outputType != null)
                        message.outputType = String(object.outputType);
                    if (object.options != null) {
                        if (typeof object.options !== "object")
                            throw TypeError(".google.protobuf.MethodDescriptorProto.options: object expected");
                        message.options = $root.google.protobuf.MethodOptions.fromObject(object.options);
                    }
                    if (object.clientStreaming != null)
                        message.clientStreaming = Boolean(object.clientStreaming);
                    if (object.serverStreaming != null)
                        message.serverStreaming = Boolean(object.serverStreaming);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodDescriptorProto message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {google.protobuf.MethodDescriptorProto} message MethodDescriptorProto
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodDescriptorProto.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.defaults) {
                        object.name = "";
                        object.inputType = "";
                        object.outputType = "";
                        object.options = null;
                        object.clientStreaming = false;
                        object.serverStreaming = false;
                    }
                    if (message.name != null && message.hasOwnProperty("name"))
                        object.name = message.name;
                    if (message.inputType != null && message.hasOwnProperty("inputType"))
                        object.inputType = message.inputType;
                    if (message.outputType != null && message.hasOwnProperty("outputType"))
                        object.outputType = message.outputType;
                    if (message.options != null && message.hasOwnProperty("options"))
                        object.options = $root.google.protobuf.MethodOptions.toObject(message.options, options);
                    if (message.clientStreaming != null && message.hasOwnProperty("clientStreaming"))
                        object.clientStreaming = message.clientStreaming;
                    if (message.serverStreaming != null && message.hasOwnProperty("serverStreaming"))
                        object.serverStreaming = message.serverStreaming;
                    return object;
                };
    
                /**
                 * Converts this MethodDescriptorProto to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodDescriptorProto.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodDescriptorProto
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodDescriptorProto
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodDescriptorProto.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodDescriptorProto";
                };
    
                return MethodDescriptorProto;
            })();
    
            protobuf.FileOptions = (function() {
    
                /**
                 * Properties of a FileOptions.
                 * @memberof google.protobuf
                 * @interface IFileOptions
                 * @property {string|null} [javaPackage] FileOptions javaPackage
                 * @property {string|null} [javaOuterClassname] FileOptions javaOuterClassname
                 * @property {boolean|null} [javaMultipleFiles] FileOptions javaMultipleFiles
                 * @property {boolean|null} [javaGenerateEqualsAndHash] FileOptions javaGenerateEqualsAndHash
                 * @property {boolean|null} [javaStringCheckUtf8] FileOptions javaStringCheckUtf8
                 * @property {google.protobuf.FileOptions.OptimizeMode|null} [optimizeFor] FileOptions optimizeFor
                 * @property {string|null} [goPackage] FileOptions goPackage
                 * @property {boolean|null} [ccGenericServices] FileOptions ccGenericServices
                 * @property {boolean|null} [javaGenericServices] FileOptions javaGenericServices
                 * @property {boolean|null} [pyGenericServices] FileOptions pyGenericServices
                 * @property {boolean|null} [phpGenericServices] FileOptions phpGenericServices
                 * @property {boolean|null} [deprecated] FileOptions deprecated
                 * @property {boolean|null} [ccEnableArenas] FileOptions ccEnableArenas
                 * @property {string|null} [objcClassPrefix] FileOptions objcClassPrefix
                 * @property {string|null} [csharpNamespace] FileOptions csharpNamespace
                 * @property {string|null} [swiftPrefix] FileOptions swiftPrefix
                 * @property {string|null} [phpClassPrefix] FileOptions phpClassPrefix
                 * @property {string|null} [phpNamespace] FileOptions phpNamespace
                 * @property {string|null} [phpMetadataNamespace] FileOptions phpMetadataNamespace
                 * @property {string|null} [rubyPackage] FileOptions rubyPackage
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FileOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new FileOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FileOptions.
                 * @implements IFileOptions
                 * @constructor
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 */
                function FileOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FileOptions javaPackage.
                 * @member {string} javaPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaPackage = "";
    
                /**
                 * FileOptions javaOuterClassname.
                 * @member {string} javaOuterClassname
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaOuterClassname = "";
    
                /**
                 * FileOptions javaMultipleFiles.
                 * @member {boolean} javaMultipleFiles
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaMultipleFiles = false;
    
                /**
                 * FileOptions javaGenerateEqualsAndHash.
                 * @member {boolean} javaGenerateEqualsAndHash
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenerateEqualsAndHash = false;
    
                /**
                 * FileOptions javaStringCheckUtf8.
                 * @member {boolean} javaStringCheckUtf8
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaStringCheckUtf8 = false;
    
                /**
                 * FileOptions optimizeFor.
                 * @member {google.protobuf.FileOptions.OptimizeMode} optimizeFor
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.optimizeFor = 1;
    
                /**
                 * FileOptions goPackage.
                 * @member {string} goPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.goPackage = "";
    
                /**
                 * FileOptions ccGenericServices.
                 * @member {boolean} ccGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccGenericServices = false;
    
                /**
                 * FileOptions javaGenericServices.
                 * @member {boolean} javaGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.javaGenericServices = false;
    
                /**
                 * FileOptions pyGenericServices.
                 * @member {boolean} pyGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.pyGenericServices = false;
    
                /**
                 * FileOptions phpGenericServices.
                 * @member {boolean} phpGenericServices
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpGenericServices = false;
    
                /**
                 * FileOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.deprecated = false;
    
                /**
                 * FileOptions ccEnableArenas.
                 * @member {boolean} ccEnableArenas
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.ccEnableArenas = true;
    
                /**
                 * FileOptions objcClassPrefix.
                 * @member {string} objcClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.objcClassPrefix = "";
    
                /**
                 * FileOptions csharpNamespace.
                 * @member {string} csharpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.csharpNamespace = "";
    
                /**
                 * FileOptions swiftPrefix.
                 * @member {string} swiftPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.swiftPrefix = "";
    
                /**
                 * FileOptions phpClassPrefix.
                 * @member {string} phpClassPrefix
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpClassPrefix = "";
    
                /**
                 * FileOptions phpNamespace.
                 * @member {string} phpNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpNamespace = "";
    
                /**
                 * FileOptions phpMetadataNamespace.
                 * @member {string} phpMetadataNamespace
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.phpMetadataNamespace = "";
    
                /**
                 * FileOptions rubyPackage.
                 * @member {string} rubyPackage
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.rubyPackage = "";
    
                /**
                 * FileOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 */
                FileOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new FileOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FileOptions} FileOptions instance
                 */
                FileOptions.create = function create(properties) {
                    return new FileOptions(properties);
                };
    
                /**
                 * Encodes the specified FileOptions message. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.javaPackage != null && Object.hasOwnProperty.call(message, "javaPackage"))
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.javaPackage);
                    if (message.javaOuterClassname != null && Object.hasOwnProperty.call(message, "javaOuterClassname"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.javaOuterClassname);
                    if (message.optimizeFor != null && Object.hasOwnProperty.call(message, "optimizeFor"))
                        writer.uint32(/* id 9, wireType 0 =*/72).int32(message.optimizeFor);
                    if (message.javaMultipleFiles != null && Object.hasOwnProperty.call(message, "javaMultipleFiles"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.javaMultipleFiles);
                    if (message.goPackage != null && Object.hasOwnProperty.call(message, "goPackage"))
                        writer.uint32(/* id 11, wireType 2 =*/90).string(message.goPackage);
                    if (message.ccGenericServices != null && Object.hasOwnProperty.call(message, "ccGenericServices"))
                        writer.uint32(/* id 16, wireType 0 =*/128).bool(message.ccGenericServices);
                    if (message.javaGenericServices != null && Object.hasOwnProperty.call(message, "javaGenericServices"))
                        writer.uint32(/* id 17, wireType 0 =*/136).bool(message.javaGenericServices);
                    if (message.pyGenericServices != null && Object.hasOwnProperty.call(message, "pyGenericServices"))
                        writer.uint32(/* id 18, wireType 0 =*/144).bool(message.pyGenericServices);
                    if (message.javaGenerateEqualsAndHash != null && Object.hasOwnProperty.call(message, "javaGenerateEqualsAndHash"))
                        writer.uint32(/* id 20, wireType 0 =*/160).bool(message.javaGenerateEqualsAndHash);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 23, wireType 0 =*/184).bool(message.deprecated);
                    if (message.javaStringCheckUtf8 != null && Object.hasOwnProperty.call(message, "javaStringCheckUtf8"))
                        writer.uint32(/* id 27, wireType 0 =*/216).bool(message.javaStringCheckUtf8);
                    if (message.ccEnableArenas != null && Object.hasOwnProperty.call(message, "ccEnableArenas"))
                        writer.uint32(/* id 31, wireType 0 =*/248).bool(message.ccEnableArenas);
                    if (message.objcClassPrefix != null && Object.hasOwnProperty.call(message, "objcClassPrefix"))
                        writer.uint32(/* id 36, wireType 2 =*/290).string(message.objcClassPrefix);
                    if (message.csharpNamespace != null && Object.hasOwnProperty.call(message, "csharpNamespace"))
                        writer.uint32(/* id 37, wireType 2 =*/298).string(message.csharpNamespace);
                    if (message.swiftPrefix != null && Object.hasOwnProperty.call(message, "swiftPrefix"))
                        writer.uint32(/* id 39, wireType 2 =*/314).string(message.swiftPrefix);
                    if (message.phpClassPrefix != null && Object.hasOwnProperty.call(message, "phpClassPrefix"))
                        writer.uint32(/* id 40, wireType 2 =*/322).string(message.phpClassPrefix);
                    if (message.phpNamespace != null && Object.hasOwnProperty.call(message, "phpNamespace"))
                        writer.uint32(/* id 41, wireType 2 =*/330).string(message.phpNamespace);
                    if (message.phpGenericServices != null && Object.hasOwnProperty.call(message, "phpGenericServices"))
                        writer.uint32(/* id 42, wireType 0 =*/336).bool(message.phpGenericServices);
                    if (message.phpMetadataNamespace != null && Object.hasOwnProperty.call(message, "phpMetadataNamespace"))
                        writer.uint32(/* id 44, wireType 2 =*/354).string(message.phpMetadataNamespace);
                    if (message.rubyPackage != null && Object.hasOwnProperty.call(message, "rubyPackage"))
                        writer.uint32(/* id 45, wireType 2 =*/362).string(message.rubyPackage);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified FileOptions message, length delimited. Does not implicitly {@link google.protobuf.FileOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.IFileOptions} message FileOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FileOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FileOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.javaPackage = reader.string();
                                break;
                            }
                        case 8: {
                                message.javaOuterClassname = reader.string();
                                break;
                            }
                        case 10: {
                                message.javaMultipleFiles = reader.bool();
                                break;
                            }
                        case 20: {
                                message.javaGenerateEqualsAndHash = reader.bool();
                                break;
                            }
                        case 27: {
                                message.javaStringCheckUtf8 = reader.bool();
                                break;
                            }
                        case 9: {
                                message.optimizeFor = reader.int32();
                                break;
                            }
                        case 11: {
                                message.goPackage = reader.string();
                                break;
                            }
                        case 16: {
                                message.ccGenericServices = reader.bool();
                                break;
                            }
                        case 17: {
                                message.javaGenericServices = reader.bool();
                                break;
                            }
                        case 18: {
                                message.pyGenericServices = reader.bool();
                                break;
                            }
                        case 42: {
                                message.phpGenericServices = reader.bool();
                                break;
                            }
                        case 23: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 31: {
                                message.ccEnableArenas = reader.bool();
                                break;
                            }
                        case 36: {
                                message.objcClassPrefix = reader.string();
                                break;
                            }
                        case 37: {
                                message.csharpNamespace = reader.string();
                                break;
                            }
                        case 39: {
                                message.swiftPrefix = reader.string();
                                break;
                            }
                        case 40: {
                                message.phpClassPrefix = reader.string();
                                break;
                            }
                        case 41: {
                                message.phpNamespace = reader.string();
                                break;
                            }
                        case 44: {
                                message.phpMetadataNamespace = reader.string();
                                break;
                            }
                        case 45: {
                                message.rubyPackage = reader.string();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FileOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FileOptions} FileOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FileOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FileOptions message.
                 * @function verify
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FileOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        if (!$util.isString(message.javaPackage))
                            return "javaPackage: string expected";
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        if (!$util.isString(message.javaOuterClassname))
                            return "javaOuterClassname: string expected";
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        if (typeof message.javaMultipleFiles !== "boolean")
                            return "javaMultipleFiles: boolean expected";
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        if (typeof message.javaGenerateEqualsAndHash !== "boolean")
                            return "javaGenerateEqualsAndHash: boolean expected";
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        if (typeof message.javaStringCheckUtf8 !== "boolean")
                            return "javaStringCheckUtf8: boolean expected";
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        switch (message.optimizeFor) {
                        default:
                            return "optimizeFor: enum value expected";
                        case 1:
                        case 2:
                        case 3:
                            break;
                        }
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        if (!$util.isString(message.goPackage))
                            return "goPackage: string expected";
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        if (typeof message.ccGenericServices !== "boolean")
                            return "ccGenericServices: boolean expected";
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        if (typeof message.javaGenericServices !== "boolean")
                            return "javaGenericServices: boolean expected";
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        if (typeof message.pyGenericServices !== "boolean")
                            return "pyGenericServices: boolean expected";
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        if (typeof message.phpGenericServices !== "boolean")
                            return "phpGenericServices: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        if (typeof message.ccEnableArenas !== "boolean")
                            return "ccEnableArenas: boolean expected";
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        if (!$util.isString(message.objcClassPrefix))
                            return "objcClassPrefix: string expected";
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        if (!$util.isString(message.csharpNamespace))
                            return "csharpNamespace: string expected";
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        if (!$util.isString(message.swiftPrefix))
                            return "swiftPrefix: string expected";
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        if (!$util.isString(message.phpClassPrefix))
                            return "phpClassPrefix: string expected";
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        if (!$util.isString(message.phpNamespace))
                            return "phpNamespace: string expected";
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        if (!$util.isString(message.phpMetadataNamespace))
                            return "phpMetadataNamespace: string expected";
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        if (!$util.isString(message.rubyPackage))
                            return "rubyPackage: string expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a FileOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FileOptions} FileOptions
                 */
                FileOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FileOptions)
                        return object;
                    var message = new $root.google.protobuf.FileOptions();
                    if (object.javaPackage != null)
                        message.javaPackage = String(object.javaPackage);
                    if (object.javaOuterClassname != null)
                        message.javaOuterClassname = String(object.javaOuterClassname);
                    if (object.javaMultipleFiles != null)
                        message.javaMultipleFiles = Boolean(object.javaMultipleFiles);
                    if (object.javaGenerateEqualsAndHash != null)
                        message.javaGenerateEqualsAndHash = Boolean(object.javaGenerateEqualsAndHash);
                    if (object.javaStringCheckUtf8 != null)
                        message.javaStringCheckUtf8 = Boolean(object.javaStringCheckUtf8);
                    switch (object.optimizeFor) {
                    default:
                        if (typeof object.optimizeFor === "number") {
                            message.optimizeFor = object.optimizeFor;
                            break;
                        }
                        break;
                    case "SPEED":
                    case 1:
                        message.optimizeFor = 1;
                        break;
                    case "CODE_SIZE":
                    case 2:
                        message.optimizeFor = 2;
                        break;
                    case "LITE_RUNTIME":
                    case 3:
                        message.optimizeFor = 3;
                        break;
                    }
                    if (object.goPackage != null)
                        message.goPackage = String(object.goPackage);
                    if (object.ccGenericServices != null)
                        message.ccGenericServices = Boolean(object.ccGenericServices);
                    if (object.javaGenericServices != null)
                        message.javaGenericServices = Boolean(object.javaGenericServices);
                    if (object.pyGenericServices != null)
                        message.pyGenericServices = Boolean(object.pyGenericServices);
                    if (object.phpGenericServices != null)
                        message.phpGenericServices = Boolean(object.phpGenericServices);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.ccEnableArenas != null)
                        message.ccEnableArenas = Boolean(object.ccEnableArenas);
                    if (object.objcClassPrefix != null)
                        message.objcClassPrefix = String(object.objcClassPrefix);
                    if (object.csharpNamespace != null)
                        message.csharpNamespace = String(object.csharpNamespace);
                    if (object.swiftPrefix != null)
                        message.swiftPrefix = String(object.swiftPrefix);
                    if (object.phpClassPrefix != null)
                        message.phpClassPrefix = String(object.phpClassPrefix);
                    if (object.phpNamespace != null)
                        message.phpNamespace = String(object.phpNamespace);
                    if (object.phpMetadataNamespace != null)
                        message.phpMetadataNamespace = String(object.phpMetadataNamespace);
                    if (object.rubyPackage != null)
                        message.rubyPackage = String(object.rubyPackage);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FileOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a FileOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {google.protobuf.FileOptions} message FileOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FileOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.javaPackage = "";
                        object.javaOuterClassname = "";
                        object.optimizeFor = options.enums === String ? "SPEED" : 1;
                        object.javaMultipleFiles = false;
                        object.goPackage = "";
                        object.ccGenericServices = false;
                        object.javaGenericServices = false;
                        object.pyGenericServices = false;
                        object.javaGenerateEqualsAndHash = false;
                        object.deprecated = false;
                        object.javaStringCheckUtf8 = false;
                        object.ccEnableArenas = true;
                        object.objcClassPrefix = "";
                        object.csharpNamespace = "";
                        object.swiftPrefix = "";
                        object.phpClassPrefix = "";
                        object.phpNamespace = "";
                        object.phpGenericServices = false;
                        object.phpMetadataNamespace = "";
                        object.rubyPackage = "";
                    }
                    if (message.javaPackage != null && message.hasOwnProperty("javaPackage"))
                        object.javaPackage = message.javaPackage;
                    if (message.javaOuterClassname != null && message.hasOwnProperty("javaOuterClassname"))
                        object.javaOuterClassname = message.javaOuterClassname;
                    if (message.optimizeFor != null && message.hasOwnProperty("optimizeFor"))
                        object.optimizeFor = options.enums === String ? $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] === undefined ? message.optimizeFor : $root.google.protobuf.FileOptions.OptimizeMode[message.optimizeFor] : message.optimizeFor;
                    if (message.javaMultipleFiles != null && message.hasOwnProperty("javaMultipleFiles"))
                        object.javaMultipleFiles = message.javaMultipleFiles;
                    if (message.goPackage != null && message.hasOwnProperty("goPackage"))
                        object.goPackage = message.goPackage;
                    if (message.ccGenericServices != null && message.hasOwnProperty("ccGenericServices"))
                        object.ccGenericServices = message.ccGenericServices;
                    if (message.javaGenericServices != null && message.hasOwnProperty("javaGenericServices"))
                        object.javaGenericServices = message.javaGenericServices;
                    if (message.pyGenericServices != null && message.hasOwnProperty("pyGenericServices"))
                        object.pyGenericServices = message.pyGenericServices;
                    if (message.javaGenerateEqualsAndHash != null && message.hasOwnProperty("javaGenerateEqualsAndHash"))
                        object.javaGenerateEqualsAndHash = message.javaGenerateEqualsAndHash;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.javaStringCheckUtf8 != null && message.hasOwnProperty("javaStringCheckUtf8"))
                        object.javaStringCheckUtf8 = message.javaStringCheckUtf8;
                    if (message.ccEnableArenas != null && message.hasOwnProperty("ccEnableArenas"))
                        object.ccEnableArenas = message.ccEnableArenas;
                    if (message.objcClassPrefix != null && message.hasOwnProperty("objcClassPrefix"))
                        object.objcClassPrefix = message.objcClassPrefix;
                    if (message.csharpNamespace != null && message.hasOwnProperty("csharpNamespace"))
                        object.csharpNamespace = message.csharpNamespace;
                    if (message.swiftPrefix != null && message.hasOwnProperty("swiftPrefix"))
                        object.swiftPrefix = message.swiftPrefix;
                    if (message.phpClassPrefix != null && message.hasOwnProperty("phpClassPrefix"))
                        object.phpClassPrefix = message.phpClassPrefix;
                    if (message.phpNamespace != null && message.hasOwnProperty("phpNamespace"))
                        object.phpNamespace = message.phpNamespace;
                    if (message.phpGenericServices != null && message.hasOwnProperty("phpGenericServices"))
                        object.phpGenericServices = message.phpGenericServices;
                    if (message.phpMetadataNamespace != null && message.hasOwnProperty("phpMetadataNamespace"))
                        object.phpMetadataNamespace = message.phpMetadataNamespace;
                    if (message.rubyPackage != null && message.hasOwnProperty("rubyPackage"))
                        object.rubyPackage = message.rubyPackage;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this FileOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FileOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FileOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FileOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FileOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FileOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FileOptions";
                };
    
                /**
                 * OptimizeMode enum.
                 * @name google.protobuf.FileOptions.OptimizeMode
                 * @enum {number}
                 * @property {number} SPEED=1 SPEED value
                 * @property {number} CODE_SIZE=2 CODE_SIZE value
                 * @property {number} LITE_RUNTIME=3 LITE_RUNTIME value
                 */
                FileOptions.OptimizeMode = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[1] = "SPEED"] = 1;
                    values[valuesById[2] = "CODE_SIZE"] = 2;
                    values[valuesById[3] = "LITE_RUNTIME"] = 3;
                    return values;
                })();
    
                return FileOptions;
            })();
    
            protobuf.MessageOptions = (function() {
    
                /**
                 * Properties of a MessageOptions.
                 * @memberof google.protobuf
                 * @interface IMessageOptions
                 * @property {boolean|null} [messageSetWireFormat] MessageOptions messageSetWireFormat
                 * @property {boolean|null} [noStandardDescriptorAccessor] MessageOptions noStandardDescriptorAccessor
                 * @property {boolean|null} [deprecated] MessageOptions deprecated
                 * @property {boolean|null} [mapEntry] MessageOptions mapEntry
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MessageOptions uninterpretedOption
                 * @property {boolean|null} [".ic_base_types.pb.v1.tuiSignedMessage"] MessageOptions .ic_base_types.pb.v1.tuiSignedMessage
                 */
    
                /**
                 * Constructs a new MessageOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MessageOptions.
                 * @implements IMessageOptions
                 * @constructor
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 */
                function MessageOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MessageOptions messageSetWireFormat.
                 * @member {boolean} messageSetWireFormat
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.messageSetWireFormat = false;
    
                /**
                 * MessageOptions noStandardDescriptorAccessor.
                 * @member {boolean} noStandardDescriptorAccessor
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.noStandardDescriptorAccessor = false;
    
                /**
                 * MessageOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.deprecated = false;
    
                /**
                 * MessageOptions mapEntry.
                 * @member {boolean} mapEntry
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.mapEntry = false;
    
                /**
                 * MessageOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * MessageOptions .ic_base_types.pb.v1.tuiSignedMessage.
                 * @member {boolean} .ic_base_types.pb.v1.tuiSignedMessage
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 */
                MessageOptions.prototype[".ic_base_types.pb.v1.tuiSignedMessage"] = false;
    
                /**
                 * Creates a new MessageOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MessageOptions} MessageOptions instance
                 */
                MessageOptions.create = function create(properties) {
                    return new MessageOptions(properties);
                };
    
                /**
                 * Encodes the specified MessageOptions message. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.messageSetWireFormat != null && Object.hasOwnProperty.call(message, "messageSetWireFormat"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.messageSetWireFormat);
                    if (message.noStandardDescriptorAccessor != null && Object.hasOwnProperty.call(message, "noStandardDescriptorAccessor"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.noStandardDescriptorAccessor);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.mapEntry != null && Object.hasOwnProperty.call(message, "mapEntry"))
                        writer.uint32(/* id 7, wireType 0 =*/56).bool(message.mapEntry);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".ic_base_types.pb.v1.tuiSignedMessage"] != null && Object.hasOwnProperty.call(message, ".ic_base_types.pb.v1.tuiSignedMessage"))
                        writer.uint32(/* id 20000, wireType 0 =*/160000).bool(message[".ic_base_types.pb.v1.tuiSignedMessage"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified MessageOptions message, length delimited. Does not implicitly {@link google.protobuf.MessageOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.IMessageOptions} message MessageOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MessageOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MessageOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.messageSetWireFormat = reader.bool();
                                break;
                            }
                        case 2: {
                                message.noStandardDescriptorAccessor = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 7: {
                                message.mapEntry = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 20000: {
                                message[".ic_base_types.pb.v1.tuiSignedMessage"] = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MessageOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MessageOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MessageOptions message.
                 * @function verify
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MessageOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        if (typeof message.messageSetWireFormat !== "boolean")
                            return "messageSetWireFormat: boolean expected";
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        if (typeof message.noStandardDescriptorAccessor !== "boolean")
                            return "noStandardDescriptorAccessor: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        if (typeof message.mapEntry !== "boolean")
                            return "mapEntry: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".ic_base_types.pb.v1.tuiSignedMessage"] != null && message.hasOwnProperty(".ic_base_types.pb.v1.tuiSignedMessage"))
                        if (typeof message[".ic_base_types.pb.v1.tuiSignedMessage"] !== "boolean")
                            return ".ic_base_types.pb.v1.tuiSignedMessage: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a MessageOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MessageOptions} MessageOptions
                 */
                MessageOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MessageOptions)
                        return object;
                    var message = new $root.google.protobuf.MessageOptions();
                    if (object.messageSetWireFormat != null)
                        message.messageSetWireFormat = Boolean(object.messageSetWireFormat);
                    if (object.noStandardDescriptorAccessor != null)
                        message.noStandardDescriptorAccessor = Boolean(object.noStandardDescriptorAccessor);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.mapEntry != null)
                        message.mapEntry = Boolean(object.mapEntry);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MessageOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".ic_base_types.pb.v1.tuiSignedMessage"] != null)
                        message[".ic_base_types.pb.v1.tuiSignedMessage"] = Boolean(object[".ic_base_types.pb.v1.tuiSignedMessage"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a MessageOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {google.protobuf.MessageOptions} message MessageOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MessageOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.messageSetWireFormat = false;
                        object.noStandardDescriptorAccessor = false;
                        object.deprecated = false;
                        object.mapEntry = false;
                        object[".ic_base_types.pb.v1.tuiSignedMessage"] = false;
                    }
                    if (message.messageSetWireFormat != null && message.hasOwnProperty("messageSetWireFormat"))
                        object.messageSetWireFormat = message.messageSetWireFormat;
                    if (message.noStandardDescriptorAccessor != null && message.hasOwnProperty("noStandardDescriptorAccessor"))
                        object.noStandardDescriptorAccessor = message.noStandardDescriptorAccessor;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.mapEntry != null && message.hasOwnProperty("mapEntry"))
                        object.mapEntry = message.mapEntry;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".ic_base_types.pb.v1.tuiSignedMessage"] != null && message.hasOwnProperty(".ic_base_types.pb.v1.tuiSignedMessage"))
                        object[".ic_base_types.pb.v1.tuiSignedMessage"] = message[".ic_base_types.pb.v1.tuiSignedMessage"];
                    return object;
                };
    
                /**
                 * Converts this MessageOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MessageOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MessageOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MessageOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MessageOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MessageOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MessageOptions";
                };
    
                return MessageOptions;
            })();
    
            protobuf.FieldOptions = (function() {
    
                /**
                 * Properties of a FieldOptions.
                 * @memberof google.protobuf
                 * @interface IFieldOptions
                 * @property {google.protobuf.FieldOptions.CType|null} [ctype] FieldOptions ctype
                 * @property {boolean|null} [packed] FieldOptions packed
                 * @property {google.protobuf.FieldOptions.JSType|null} [jstype] FieldOptions jstype
                 * @property {boolean|null} [lazy] FieldOptions lazy
                 * @property {boolean|null} [unverifiedLazy] FieldOptions unverifiedLazy
                 * @property {boolean|null} [deprecated] FieldOptions deprecated
                 * @property {boolean|null} [weak] FieldOptions weak
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] FieldOptions uninterpretedOption
                 * @property {boolean|null} [".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] FieldOptions .ic_base_types.pb.v1.tuiSignedDisplayQ2_2021
                 */
    
                /**
                 * Constructs a new FieldOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a FieldOptions.
                 * @implements IFieldOptions
                 * @constructor
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 */
                function FieldOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * FieldOptions ctype.
                 * @member {google.protobuf.FieldOptions.CType} ctype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.ctype = 0;
    
                /**
                 * FieldOptions packed.
                 * @member {boolean} packed
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.packed = false;
    
                /**
                 * FieldOptions jstype.
                 * @member {google.protobuf.FieldOptions.JSType} jstype
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.jstype = 0;
    
                /**
                 * FieldOptions lazy.
                 * @member {boolean} lazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.lazy = false;
    
                /**
                 * FieldOptions unverifiedLazy.
                 * @member {boolean} unverifiedLazy
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.unverifiedLazy = false;
    
                /**
                 * FieldOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.deprecated = false;
    
                /**
                 * FieldOptions weak.
                 * @member {boolean} weak
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.weak = false;
    
                /**
                 * FieldOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * FieldOptions .ic_base_types.pb.v1.tuiSignedDisplayQ2_2021.
                 * @member {boolean} .ic_base_types.pb.v1.tuiSignedDisplayQ2_2021
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 */
                FieldOptions.prototype[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] = false;
    
                /**
                 * Creates a new FieldOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions=} [properties] Properties to set
                 * @returns {google.protobuf.FieldOptions} FieldOptions instance
                 */
                FieldOptions.create = function create(properties) {
                    return new FieldOptions(properties);
                };
    
                /**
                 * Encodes the specified FieldOptions message. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.ctype != null && Object.hasOwnProperty.call(message, "ctype"))
                        writer.uint32(/* id 1, wireType 0 =*/8).int32(message.ctype);
                    if (message.packed != null && Object.hasOwnProperty.call(message, "packed"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.packed);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.lazy != null && Object.hasOwnProperty.call(message, "lazy"))
                        writer.uint32(/* id 5, wireType 0 =*/40).bool(message.lazy);
                    if (message.jstype != null && Object.hasOwnProperty.call(message, "jstype"))
                        writer.uint32(/* id 6, wireType 0 =*/48).int32(message.jstype);
                    if (message.weak != null && Object.hasOwnProperty.call(message, "weak"))
                        writer.uint32(/* id 10, wireType 0 =*/80).bool(message.weak);
                    if (message.unverifiedLazy != null && Object.hasOwnProperty.call(message, "unverifiedLazy"))
                        writer.uint32(/* id 15, wireType 0 =*/120).bool(message.unverifiedLazy);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    if (message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] != null && Object.hasOwnProperty.call(message, ".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"))
                        writer.uint32(/* id 20001, wireType 0 =*/160008).bool(message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"]);
                    return writer;
                };
    
                /**
                 * Encodes the specified FieldOptions message, length delimited. Does not implicitly {@link google.protobuf.FieldOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.IFieldOptions} message FieldOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                FieldOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.FieldOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.ctype = reader.int32();
                                break;
                            }
                        case 2: {
                                message.packed = reader.bool();
                                break;
                            }
                        case 6: {
                                message.jstype = reader.int32();
                                break;
                            }
                        case 5: {
                                message.lazy = reader.bool();
                                break;
                            }
                        case 15: {
                                message.unverifiedLazy = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 10: {
                                message.weak = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        case 20001: {
                                message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] = reader.bool();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a FieldOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                FieldOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a FieldOptions message.
                 * @function verify
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                FieldOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        switch (message.ctype) {
                        default:
                            return "ctype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        if (typeof message.packed !== "boolean")
                            return "packed: boolean expected";
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        switch (message.jstype) {
                        default:
                            return "jstype: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        if (typeof message.lazy !== "boolean")
                            return "lazy: boolean expected";
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        if (typeof message.unverifiedLazy !== "boolean")
                            return "unverifiedLazy: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        if (typeof message.weak !== "boolean")
                            return "weak: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    if (message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] != null && message.hasOwnProperty(".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"))
                        if (typeof message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] !== "boolean")
                            return ".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021: boolean expected";
                    return null;
                };
    
                /**
                 * Creates a FieldOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.FieldOptions} FieldOptions
                 */
                FieldOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.FieldOptions)
                        return object;
                    var message = new $root.google.protobuf.FieldOptions();
                    switch (object.ctype) {
                    default:
                        if (typeof object.ctype === "number") {
                            message.ctype = object.ctype;
                            break;
                        }
                        break;
                    case "STRING":
                    case 0:
                        message.ctype = 0;
                        break;
                    case "CORD":
                    case 1:
                        message.ctype = 1;
                        break;
                    case "STRING_PIECE":
                    case 2:
                        message.ctype = 2;
                        break;
                    }
                    if (object.packed != null)
                        message.packed = Boolean(object.packed);
                    switch (object.jstype) {
                    default:
                        if (typeof object.jstype === "number") {
                            message.jstype = object.jstype;
                            break;
                        }
                        break;
                    case "JS_NORMAL":
                    case 0:
                        message.jstype = 0;
                        break;
                    case "JS_STRING":
                    case 1:
                        message.jstype = 1;
                        break;
                    case "JS_NUMBER":
                    case 2:
                        message.jstype = 2;
                        break;
                    }
                    if (object.lazy != null)
                        message.lazy = Boolean(object.lazy);
                    if (object.unverifiedLazy != null)
                        message.unverifiedLazy = Boolean(object.unverifiedLazy);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.weak != null)
                        message.weak = Boolean(object.weak);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.FieldOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    if (object[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] != null)
                        message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] = Boolean(object[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"]);
                    return message;
                };
    
                /**
                 * Creates a plain object from a FieldOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {google.protobuf.FieldOptions} message FieldOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                FieldOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.ctype = options.enums === String ? "STRING" : 0;
                        object.packed = false;
                        object.deprecated = false;
                        object.lazy = false;
                        object.jstype = options.enums === String ? "JS_NORMAL" : 0;
                        object.weak = false;
                        object.unverifiedLazy = false;
                        object[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] = false;
                    }
                    if (message.ctype != null && message.hasOwnProperty("ctype"))
                        object.ctype = options.enums === String ? $root.google.protobuf.FieldOptions.CType[message.ctype] === undefined ? message.ctype : $root.google.protobuf.FieldOptions.CType[message.ctype] : message.ctype;
                    if (message.packed != null && message.hasOwnProperty("packed"))
                        object.packed = message.packed;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.lazy != null && message.hasOwnProperty("lazy"))
                        object.lazy = message.lazy;
                    if (message.jstype != null && message.hasOwnProperty("jstype"))
                        object.jstype = options.enums === String ? $root.google.protobuf.FieldOptions.JSType[message.jstype] === undefined ? message.jstype : $root.google.protobuf.FieldOptions.JSType[message.jstype] : message.jstype;
                    if (message.weak != null && message.hasOwnProperty("weak"))
                        object.weak = message.weak;
                    if (message.unverifiedLazy != null && message.hasOwnProperty("unverifiedLazy"))
                        object.unverifiedLazy = message.unverifiedLazy;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    if (message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] != null && message.hasOwnProperty(".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"))
                        object[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"] = message[".ic_base_types.pb.v1.tuiSignedDisplayQ2_2021"];
                    return object;
                };
    
                /**
                 * Converts this FieldOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.FieldOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                FieldOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for FieldOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.FieldOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                FieldOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.FieldOptions";
                };
    
                /**
                 * CType enum.
                 * @name google.protobuf.FieldOptions.CType
                 * @enum {number}
                 * @property {number} STRING=0 STRING value
                 * @property {number} CORD=1 CORD value
                 * @property {number} STRING_PIECE=2 STRING_PIECE value
                 */
                FieldOptions.CType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "STRING"] = 0;
                    values[valuesById[1] = "CORD"] = 1;
                    values[valuesById[2] = "STRING_PIECE"] = 2;
                    return values;
                })();
    
                /**
                 * JSType enum.
                 * @name google.protobuf.FieldOptions.JSType
                 * @enum {number}
                 * @property {number} JS_NORMAL=0 JS_NORMAL value
                 * @property {number} JS_STRING=1 JS_STRING value
                 * @property {number} JS_NUMBER=2 JS_NUMBER value
                 */
                FieldOptions.JSType = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "JS_NORMAL"] = 0;
                    values[valuesById[1] = "JS_STRING"] = 1;
                    values[valuesById[2] = "JS_NUMBER"] = 2;
                    return values;
                })();
    
                return FieldOptions;
            })();
    
            protobuf.OneofOptions = (function() {
    
                /**
                 * Properties of an OneofOptions.
                 * @memberof google.protobuf
                 * @interface IOneofOptions
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] OneofOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new OneofOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an OneofOptions.
                 * @implements IOneofOptions
                 * @constructor
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 */
                function OneofOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * OneofOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 */
                OneofOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new OneofOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions=} [properties] Properties to set
                 * @returns {google.protobuf.OneofOptions} OneofOptions instance
                 */
                OneofOptions.create = function create(properties) {
                    return new OneofOptions(properties);
                };
    
                /**
                 * Encodes the specified OneofOptions message. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified OneofOptions message, length delimited. Does not implicitly {@link google.protobuf.OneofOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.IOneofOptions} message OneofOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                OneofOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.OneofOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an OneofOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                OneofOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an OneofOptions message.
                 * @function verify
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                OneofOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an OneofOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.OneofOptions} OneofOptions
                 */
                OneofOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.OneofOptions)
                        return object;
                    var message = new $root.google.protobuf.OneofOptions();
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.OneofOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an OneofOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {google.protobuf.OneofOptions} message OneofOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                OneofOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this OneofOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.OneofOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                OneofOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for OneofOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.OneofOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                OneofOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.OneofOptions";
                };
    
                return OneofOptions;
            })();
    
            protobuf.EnumOptions = (function() {
    
                /**
                 * Properties of an EnumOptions.
                 * @memberof google.protobuf
                 * @interface IEnumOptions
                 * @property {boolean|null} [allowAlias] EnumOptions allowAlias
                 * @property {boolean|null} [deprecated] EnumOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumOptions.
                 * @implements IEnumOptions
                 * @constructor
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 */
                function EnumOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumOptions allowAlias.
                 * @member {boolean} allowAlias
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.allowAlias = false;
    
                /**
                 * EnumOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.deprecated = false;
    
                /**
                 * EnumOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 */
                EnumOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumOptions} EnumOptions instance
                 */
                EnumOptions.create = function create(properties) {
                    return new EnumOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumOptions message. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.allowAlias != null && Object.hasOwnProperty.call(message, "allowAlias"))
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.allowAlias);
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 3, wireType 0 =*/24).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.IEnumOptions} message EnumOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                message.allowAlias = reader.bool();
                                break;
                            }
                        case 3: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        if (typeof message.allowAlias !== "boolean")
                            return "allowAlias: boolean expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumOptions} EnumOptions
                 */
                EnumOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumOptions();
                    if (object.allowAlias != null)
                        message.allowAlias = Boolean(object.allowAlias);
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {google.protobuf.EnumOptions} message EnumOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.allowAlias = false;
                        object.deprecated = false;
                    }
                    if (message.allowAlias != null && message.hasOwnProperty("allowAlias"))
                        object.allowAlias = message.allowAlias;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumOptions";
                };
    
                return EnumOptions;
            })();
    
            protobuf.EnumValueOptions = (function() {
    
                /**
                 * Properties of an EnumValueOptions.
                 * @memberof google.protobuf
                 * @interface IEnumValueOptions
                 * @property {boolean|null} [deprecated] EnumValueOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] EnumValueOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new EnumValueOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents an EnumValueOptions.
                 * @implements IEnumValueOptions
                 * @constructor
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 */
                function EnumValueOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * EnumValueOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.deprecated = false;
    
                /**
                 * EnumValueOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 */
                EnumValueOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new EnumValueOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions=} [properties] Properties to set
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions instance
                 */
                EnumValueOptions.create = function create(properties) {
                    return new EnumValueOptions(properties);
                };
    
                /**
                 * Encodes the specified EnumValueOptions message. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 1, wireType 0 =*/8).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified EnumValueOptions message, length delimited. Does not implicitly {@link google.protobuf.EnumValueOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.IEnumValueOptions} message EnumValueOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                EnumValueOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.EnumValueOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an EnumValueOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                EnumValueOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an EnumValueOptions message.
                 * @function verify
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                EnumValueOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates an EnumValueOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.EnumValueOptions} EnumValueOptions
                 */
                EnumValueOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.EnumValueOptions)
                        return object;
                    var message = new $root.google.protobuf.EnumValueOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.EnumValueOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from an EnumValueOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {google.protobuf.EnumValueOptions} message EnumValueOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                EnumValueOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this EnumValueOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.EnumValueOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                EnumValueOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for EnumValueOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.EnumValueOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                EnumValueOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.EnumValueOptions";
                };
    
                return EnumValueOptions;
            })();
    
            protobuf.ServiceOptions = (function() {
    
                /**
                 * Properties of a ServiceOptions.
                 * @memberof google.protobuf
                 * @interface IServiceOptions
                 * @property {boolean|null} [deprecated] ServiceOptions deprecated
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] ServiceOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new ServiceOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a ServiceOptions.
                 * @implements IServiceOptions
                 * @constructor
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 */
                function ServiceOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * ServiceOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.deprecated = false;
    
                /**
                 * ServiceOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 */
                ServiceOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new ServiceOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions=} [properties] Properties to set
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions instance
                 */
                ServiceOptions.create = function create(properties) {
                    return new ServiceOptions(properties);
                };
    
                /**
                 * Encodes the specified ServiceOptions message. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified ServiceOptions message, length delimited. Does not implicitly {@link google.protobuf.ServiceOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.IServiceOptions} message ServiceOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                ServiceOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.ServiceOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a ServiceOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                ServiceOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a ServiceOptions message.
                 * @function verify
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                ServiceOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a ServiceOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.ServiceOptions} ServiceOptions
                 */
                ServiceOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.ServiceOptions)
                        return object;
                    var message = new $root.google.protobuf.ServiceOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.ServiceOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a ServiceOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {google.protobuf.ServiceOptions} message ServiceOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                ServiceOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults)
                        object.deprecated = false;
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this ServiceOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.ServiceOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                ServiceOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for ServiceOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.ServiceOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                ServiceOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.ServiceOptions";
                };
    
                return ServiceOptions;
            })();
    
            protobuf.MethodOptions = (function() {
    
                /**
                 * Properties of a MethodOptions.
                 * @memberof google.protobuf
                 * @interface IMethodOptions
                 * @property {boolean|null} [deprecated] MethodOptions deprecated
                 * @property {google.protobuf.MethodOptions.IdempotencyLevel|null} [idempotencyLevel] MethodOptions idempotencyLevel
                 * @property {Array.<google.protobuf.IUninterpretedOption>|null} [uninterpretedOption] MethodOptions uninterpretedOption
                 */
    
                /**
                 * Constructs a new MethodOptions.
                 * @memberof google.protobuf
                 * @classdesc Represents a MethodOptions.
                 * @implements IMethodOptions
                 * @constructor
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 */
                function MethodOptions(properties) {
                    this.uninterpretedOption = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * MethodOptions deprecated.
                 * @member {boolean} deprecated
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.deprecated = false;
    
                /**
                 * MethodOptions idempotencyLevel.
                 * @member {google.protobuf.MethodOptions.IdempotencyLevel} idempotencyLevel
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.idempotencyLevel = 0;
    
                /**
                 * MethodOptions uninterpretedOption.
                 * @member {Array.<google.protobuf.IUninterpretedOption>} uninterpretedOption
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 */
                MethodOptions.prototype.uninterpretedOption = $util.emptyArray;
    
                /**
                 * Creates a new MethodOptions instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions=} [properties] Properties to set
                 * @returns {google.protobuf.MethodOptions} MethodOptions instance
                 */
                MethodOptions.create = function create(properties) {
                    return new MethodOptions(properties);
                };
    
                /**
                 * Encodes the specified MethodOptions message. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.deprecated != null && Object.hasOwnProperty.call(message, "deprecated"))
                        writer.uint32(/* id 33, wireType 0 =*/264).bool(message.deprecated);
                    if (message.idempotencyLevel != null && Object.hasOwnProperty.call(message, "idempotencyLevel"))
                        writer.uint32(/* id 34, wireType 0 =*/272).int32(message.idempotencyLevel);
                    if (message.uninterpretedOption != null && message.uninterpretedOption.length)
                        for (var i = 0; i < message.uninterpretedOption.length; ++i)
                            $root.google.protobuf.UninterpretedOption.encode(message.uninterpretedOption[i], writer.uint32(/* id 999, wireType 2 =*/7994).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified MethodOptions message, length delimited. Does not implicitly {@link google.protobuf.MethodOptions.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.IMethodOptions} message MethodOptions message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                MethodOptions.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.MethodOptions();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 33: {
                                message.deprecated = reader.bool();
                                break;
                            }
                        case 34: {
                                message.idempotencyLevel = reader.int32();
                                break;
                            }
                        case 999: {
                                if (!(message.uninterpretedOption && message.uninterpretedOption.length))
                                    message.uninterpretedOption = [];
                                message.uninterpretedOption.push($root.google.protobuf.UninterpretedOption.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a MethodOptions message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                MethodOptions.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a MethodOptions message.
                 * @function verify
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                MethodOptions.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        if (typeof message.deprecated !== "boolean")
                            return "deprecated: boolean expected";
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        switch (message.idempotencyLevel) {
                        default:
                            return "idempotencyLevel: enum value expected";
                        case 0:
                        case 1:
                        case 2:
                            break;
                        }
                    if (message.uninterpretedOption != null && message.hasOwnProperty("uninterpretedOption")) {
                        if (!Array.isArray(message.uninterpretedOption))
                            return "uninterpretedOption: array expected";
                        for (var i = 0; i < message.uninterpretedOption.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.verify(message.uninterpretedOption[i]);
                            if (error)
                                return "uninterpretedOption." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a MethodOptions message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.MethodOptions} MethodOptions
                 */
                MethodOptions.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.MethodOptions)
                        return object;
                    var message = new $root.google.protobuf.MethodOptions();
                    if (object.deprecated != null)
                        message.deprecated = Boolean(object.deprecated);
                    switch (object.idempotencyLevel) {
                    default:
                        if (typeof object.idempotencyLevel === "number") {
                            message.idempotencyLevel = object.idempotencyLevel;
                            break;
                        }
                        break;
                    case "IDEMPOTENCY_UNKNOWN":
                    case 0:
                        message.idempotencyLevel = 0;
                        break;
                    case "NO_SIDE_EFFECTS":
                    case 1:
                        message.idempotencyLevel = 1;
                        break;
                    case "IDEMPOTENT":
                    case 2:
                        message.idempotencyLevel = 2;
                        break;
                    }
                    if (object.uninterpretedOption) {
                        if (!Array.isArray(object.uninterpretedOption))
                            throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: array expected");
                        message.uninterpretedOption = [];
                        for (var i = 0; i < object.uninterpretedOption.length; ++i) {
                            if (typeof object.uninterpretedOption[i] !== "object")
                                throw TypeError(".google.protobuf.MethodOptions.uninterpretedOption: object expected");
                            message.uninterpretedOption[i] = $root.google.protobuf.UninterpretedOption.fromObject(object.uninterpretedOption[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a MethodOptions message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {google.protobuf.MethodOptions} message MethodOptions
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                MethodOptions.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.uninterpretedOption = [];
                    if (options.defaults) {
                        object.deprecated = false;
                        object.idempotencyLevel = options.enums === String ? "IDEMPOTENCY_UNKNOWN" : 0;
                    }
                    if (message.deprecated != null && message.hasOwnProperty("deprecated"))
                        object.deprecated = message.deprecated;
                    if (message.idempotencyLevel != null && message.hasOwnProperty("idempotencyLevel"))
                        object.idempotencyLevel = options.enums === String ? $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] === undefined ? message.idempotencyLevel : $root.google.protobuf.MethodOptions.IdempotencyLevel[message.idempotencyLevel] : message.idempotencyLevel;
                    if (message.uninterpretedOption && message.uninterpretedOption.length) {
                        object.uninterpretedOption = [];
                        for (var j = 0; j < message.uninterpretedOption.length; ++j)
                            object.uninterpretedOption[j] = $root.google.protobuf.UninterpretedOption.toObject(message.uninterpretedOption[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this MethodOptions to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.MethodOptions
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                MethodOptions.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for MethodOptions
                 * @function getTypeUrl
                 * @memberof google.protobuf.MethodOptions
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                MethodOptions.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.MethodOptions";
                };
    
                /**
                 * IdempotencyLevel enum.
                 * @name google.protobuf.MethodOptions.IdempotencyLevel
                 * @enum {number}
                 * @property {number} IDEMPOTENCY_UNKNOWN=0 IDEMPOTENCY_UNKNOWN value
                 * @property {number} NO_SIDE_EFFECTS=1 NO_SIDE_EFFECTS value
                 * @property {number} IDEMPOTENT=2 IDEMPOTENT value
                 */
                MethodOptions.IdempotencyLevel = (function() {
                    var valuesById = {}, values = Object.create(valuesById);
                    values[valuesById[0] = "IDEMPOTENCY_UNKNOWN"] = 0;
                    values[valuesById[1] = "NO_SIDE_EFFECTS"] = 1;
                    values[valuesById[2] = "IDEMPOTENT"] = 2;
                    return values;
                })();
    
                return MethodOptions;
            })();
    
            protobuf.UninterpretedOption = (function() {
    
                /**
                 * Properties of an UninterpretedOption.
                 * @memberof google.protobuf
                 * @interface IUninterpretedOption
                 * @property {Array.<google.protobuf.UninterpretedOption.INamePart>|null} [name] UninterpretedOption name
                 * @property {string|null} [identifierValue] UninterpretedOption identifierValue
                 * @property {number|Long|null} [positiveIntValue] UninterpretedOption positiveIntValue
                 * @property {number|Long|null} [negativeIntValue] UninterpretedOption negativeIntValue
                 * @property {number|null} [doubleValue] UninterpretedOption doubleValue
                 * @property {Uint8Array|null} [stringValue] UninterpretedOption stringValue
                 * @property {string|null} [aggregateValue] UninterpretedOption aggregateValue
                 */
    
                /**
                 * Constructs a new UninterpretedOption.
                 * @memberof google.protobuf
                 * @classdesc Represents an UninterpretedOption.
                 * @implements IUninterpretedOption
                 * @constructor
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 */
                function UninterpretedOption(properties) {
                    this.name = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * UninterpretedOption name.
                 * @member {Array.<google.protobuf.UninterpretedOption.INamePart>} name
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.name = $util.emptyArray;
    
                /**
                 * UninterpretedOption identifierValue.
                 * @member {string} identifierValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.identifierValue = "";
    
                /**
                 * UninterpretedOption positiveIntValue.
                 * @member {number|Long} positiveIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.positiveIntValue = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                /**
                 * UninterpretedOption negativeIntValue.
                 * @member {number|Long} negativeIntValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.negativeIntValue = $util.Long ? $util.Long.fromBits(0,0,false) : 0;
    
                /**
                 * UninterpretedOption doubleValue.
                 * @member {number} doubleValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.doubleValue = 0;
    
                /**
                 * UninterpretedOption stringValue.
                 * @member {Uint8Array} stringValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.stringValue = $util.newBuffer([]);
    
                /**
                 * UninterpretedOption aggregateValue.
                 * @member {string} aggregateValue
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 */
                UninterpretedOption.prototype.aggregateValue = "";
    
                /**
                 * Creates a new UninterpretedOption instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption=} [properties] Properties to set
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption instance
                 */
                UninterpretedOption.create = function create(properties) {
                    return new UninterpretedOption(properties);
                };
    
                /**
                 * Encodes the specified UninterpretedOption message. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.name != null && message.name.length)
                        for (var i = 0; i < message.name.length; ++i)
                            $root.google.protobuf.UninterpretedOption.NamePart.encode(message.name[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                    if (message.identifierValue != null && Object.hasOwnProperty.call(message, "identifierValue"))
                        writer.uint32(/* id 3, wireType 2 =*/26).string(message.identifierValue);
                    if (message.positiveIntValue != null && Object.hasOwnProperty.call(message, "positiveIntValue"))
                        writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.positiveIntValue);
                    if (message.negativeIntValue != null && Object.hasOwnProperty.call(message, "negativeIntValue"))
                        writer.uint32(/* id 5, wireType 0 =*/40).int64(message.negativeIntValue);
                    if (message.doubleValue != null && Object.hasOwnProperty.call(message, "doubleValue"))
                        writer.uint32(/* id 6, wireType 1 =*/49).double(message.doubleValue);
                    if (message.stringValue != null && Object.hasOwnProperty.call(message, "stringValue"))
                        writer.uint32(/* id 7, wireType 2 =*/58).bytes(message.stringValue);
                    if (message.aggregateValue != null && Object.hasOwnProperty.call(message, "aggregateValue"))
                        writer.uint32(/* id 8, wireType 2 =*/66).string(message.aggregateValue);
                    return writer;
                };
    
                /**
                 * Encodes the specified UninterpretedOption message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.IUninterpretedOption} message UninterpretedOption message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                UninterpretedOption.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 2: {
                                if (!(message.name && message.name.length))
                                    message.name = [];
                                message.name.push($root.google.protobuf.UninterpretedOption.NamePart.decode(reader, reader.uint32()));
                                break;
                            }
                        case 3: {
                                message.identifierValue = reader.string();
                                break;
                            }
                        case 4: {
                                message.positiveIntValue = reader.uint64();
                                break;
                            }
                        case 5: {
                                message.negativeIntValue = reader.int64();
                                break;
                            }
                        case 6: {
                                message.doubleValue = reader.double();
                                break;
                            }
                        case 7: {
                                message.stringValue = reader.bytes();
                                break;
                            }
                        case 8: {
                                message.aggregateValue = reader.string();
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes an UninterpretedOption message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                UninterpretedOption.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies an UninterpretedOption message.
                 * @function verify
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                UninterpretedOption.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.name != null && message.hasOwnProperty("name")) {
                        if (!Array.isArray(message.name))
                            return "name: array expected";
                        for (var i = 0; i < message.name.length; ++i) {
                            var error = $root.google.protobuf.UninterpretedOption.NamePart.verify(message.name[i]);
                            if (error)
                                return "name." + error;
                        }
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        if (!$util.isString(message.identifierValue))
                            return "identifierValue: string expected";
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (!$util.isInteger(message.positiveIntValue) && !(message.positiveIntValue && $util.isInteger(message.positiveIntValue.low) && $util.isInteger(message.positiveIntValue.high)))
                            return "positiveIntValue: integer|Long expected";
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (!$util.isInteger(message.negativeIntValue) && !(message.negativeIntValue && $util.isInteger(message.negativeIntValue.low) && $util.isInteger(message.negativeIntValue.high)))
                            return "negativeIntValue: integer|Long expected";
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        if (typeof message.doubleValue !== "number")
                            return "doubleValue: number expected";
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        if (!(message.stringValue && typeof message.stringValue.length === "number" || $util.isString(message.stringValue)))
                            return "stringValue: buffer expected";
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        if (!$util.isString(message.aggregateValue))
                            return "aggregateValue: string expected";
                    return null;
                };
    
                /**
                 * Creates an UninterpretedOption message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.UninterpretedOption} UninterpretedOption
                 */
                UninterpretedOption.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.UninterpretedOption)
                        return object;
                    var message = new $root.google.protobuf.UninterpretedOption();
                    if (object.name) {
                        if (!Array.isArray(object.name))
                            throw TypeError(".google.protobuf.UninterpretedOption.name: array expected");
                        message.name = [];
                        for (var i = 0; i < object.name.length; ++i) {
                            if (typeof object.name[i] !== "object")
                                throw TypeError(".google.protobuf.UninterpretedOption.name: object expected");
                            message.name[i] = $root.google.protobuf.UninterpretedOption.NamePart.fromObject(object.name[i]);
                        }
                    }
                    if (object.identifierValue != null)
                        message.identifierValue = String(object.identifierValue);
                    if (object.positiveIntValue != null)
                        if ($util.Long)
                            (message.positiveIntValue = $util.Long.fromValue(object.positiveIntValue)).unsigned = true;
                        else if (typeof object.positiveIntValue === "string")
                            message.positiveIntValue = parseInt(object.positiveIntValue, 10);
                        else if (typeof object.positiveIntValue === "number")
                            message.positiveIntValue = object.positiveIntValue;
                        else if (typeof object.positiveIntValue === "object")
                            message.positiveIntValue = new $util.LongBits(object.positiveIntValue.low >>> 0, object.positiveIntValue.high >>> 0).toNumber(true);
                    if (object.negativeIntValue != null)
                        if ($util.Long)
                            (message.negativeIntValue = $util.Long.fromValue(object.negativeIntValue)).unsigned = false;
                        else if (typeof object.negativeIntValue === "string")
                            message.negativeIntValue = parseInt(object.negativeIntValue, 10);
                        else if (typeof object.negativeIntValue === "number")
                            message.negativeIntValue = object.negativeIntValue;
                        else if (typeof object.negativeIntValue === "object")
                            message.negativeIntValue = new $util.LongBits(object.negativeIntValue.low >>> 0, object.negativeIntValue.high >>> 0).toNumber();
                    if (object.doubleValue != null)
                        message.doubleValue = Number(object.doubleValue);
                    if (object.stringValue != null)
                        if (typeof object.stringValue === "string")
                            $util.base64.decode(object.stringValue, message.stringValue = $util.newBuffer($util.base64.length(object.stringValue)), 0);
                        else if (object.stringValue.length >= 0)
                            message.stringValue = object.stringValue;
                    if (object.aggregateValue != null)
                        message.aggregateValue = String(object.aggregateValue);
                    return message;
                };
    
                /**
                 * Creates a plain object from an UninterpretedOption message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {google.protobuf.UninterpretedOption} message UninterpretedOption
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                UninterpretedOption.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.name = [];
                    if (options.defaults) {
                        object.identifierValue = "";
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, true);
                            object.positiveIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.positiveIntValue = options.longs === String ? "0" : 0;
                        if ($util.Long) {
                            var long = new $util.Long(0, 0, false);
                            object.negativeIntValue = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                        } else
                            object.negativeIntValue = options.longs === String ? "0" : 0;
                        object.doubleValue = 0;
                        if (options.bytes === String)
                            object.stringValue = "";
                        else {
                            object.stringValue = [];
                            if (options.bytes !== Array)
                                object.stringValue = $util.newBuffer(object.stringValue);
                        }
                        object.aggregateValue = "";
                    }
                    if (message.name && message.name.length) {
                        object.name = [];
                        for (var j = 0; j < message.name.length; ++j)
                            object.name[j] = $root.google.protobuf.UninterpretedOption.NamePart.toObject(message.name[j], options);
                    }
                    if (message.identifierValue != null && message.hasOwnProperty("identifierValue"))
                        object.identifierValue = message.identifierValue;
                    if (message.positiveIntValue != null && message.hasOwnProperty("positiveIntValue"))
                        if (typeof message.positiveIntValue === "number")
                            object.positiveIntValue = options.longs === String ? String(message.positiveIntValue) : message.positiveIntValue;
                        else
                            object.positiveIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.positiveIntValue) : options.longs === Number ? new $util.LongBits(message.positiveIntValue.low >>> 0, message.positiveIntValue.high >>> 0).toNumber(true) : message.positiveIntValue;
                    if (message.negativeIntValue != null && message.hasOwnProperty("negativeIntValue"))
                        if (typeof message.negativeIntValue === "number")
                            object.negativeIntValue = options.longs === String ? String(message.negativeIntValue) : message.negativeIntValue;
                        else
                            object.negativeIntValue = options.longs === String ? $util.Long.prototype.toString.call(message.negativeIntValue) : options.longs === Number ? new $util.LongBits(message.negativeIntValue.low >>> 0, message.negativeIntValue.high >>> 0).toNumber() : message.negativeIntValue;
                    if (message.doubleValue != null && message.hasOwnProperty("doubleValue"))
                        object.doubleValue = options.json && !isFinite(message.doubleValue) ? String(message.doubleValue) : message.doubleValue;
                    if (message.stringValue != null && message.hasOwnProperty("stringValue"))
                        object.stringValue = options.bytes === String ? $util.base64.encode(message.stringValue, 0, message.stringValue.length) : options.bytes === Array ? Array.prototype.slice.call(message.stringValue) : message.stringValue;
                    if (message.aggregateValue != null && message.hasOwnProperty("aggregateValue"))
                        object.aggregateValue = message.aggregateValue;
                    return object;
                };
    
                /**
                 * Converts this UninterpretedOption to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.UninterpretedOption
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                UninterpretedOption.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for UninterpretedOption
                 * @function getTypeUrl
                 * @memberof google.protobuf.UninterpretedOption
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                UninterpretedOption.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.UninterpretedOption";
                };
    
                UninterpretedOption.NamePart = (function() {
    
                    /**
                     * Properties of a NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @interface INamePart
                     * @property {string} namePart NamePart namePart
                     * @property {boolean} isExtension NamePart isExtension
                     */
    
                    /**
                     * Constructs a new NamePart.
                     * @memberof google.protobuf.UninterpretedOption
                     * @classdesc Represents a NamePart.
                     * @implements INamePart
                     * @constructor
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     */
                    function NamePart(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NamePart namePart.
                     * @member {string} namePart
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.namePart = "";
    
                    /**
                     * NamePart isExtension.
                     * @member {boolean} isExtension
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     */
                    NamePart.prototype.isExtension = false;
    
                    /**
                     * Creates a new NamePart instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart=} [properties] Properties to set
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart instance
                     */
                    NamePart.create = function create(properties) {
                        return new NamePart(properties);
                    };
    
                    /**
                     * Encodes the specified NamePart message. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.namePart);
                        writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isExtension);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NamePart message, length delimited. Does not implicitly {@link google.protobuf.UninterpretedOption.NamePart.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.INamePart} message NamePart message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NamePart.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.namePart = reader.string();
                                    break;
                                }
                            case 2: {
                                    message.isExtension = reader.bool();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        if (!message.hasOwnProperty("namePart"))
                            throw $util.ProtocolError("missing required 'namePart'", { instance: message });
                        if (!message.hasOwnProperty("isExtension"))
                            throw $util.ProtocolError("missing required 'isExtension'", { instance: message });
                        return message;
                    };
    
                    /**
                     * Decodes a NamePart message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NamePart.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NamePart message.
                     * @function verify
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NamePart.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (!$util.isString(message.namePart))
                            return "namePart: string expected";
                        if (typeof message.isExtension !== "boolean")
                            return "isExtension: boolean expected";
                        return null;
                    };
    
                    /**
                     * Creates a NamePart message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.UninterpretedOption.NamePart} NamePart
                     */
                    NamePart.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.UninterpretedOption.NamePart)
                            return object;
                        var message = new $root.google.protobuf.UninterpretedOption.NamePart();
                        if (object.namePart != null)
                            message.namePart = String(object.namePart);
                        if (object.isExtension != null)
                            message.isExtension = Boolean(object.isExtension);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NamePart message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {google.protobuf.UninterpretedOption.NamePart} message NamePart
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NamePart.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.namePart = "";
                            object.isExtension = false;
                        }
                        if (message.namePart != null && message.hasOwnProperty("namePart"))
                            object.namePart = message.namePart;
                        if (message.isExtension != null && message.hasOwnProperty("isExtension"))
                            object.isExtension = message.isExtension;
                        return object;
                    };
    
                    /**
                     * Converts this NamePart to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NamePart.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NamePart
                     * @function getTypeUrl
                     * @memberof google.protobuf.UninterpretedOption.NamePart
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NamePart.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.UninterpretedOption.NamePart";
                    };
    
                    return NamePart;
                })();
    
                return UninterpretedOption;
            })();
    
            protobuf.SourceCodeInfo = (function() {
    
                /**
                 * Properties of a SourceCodeInfo.
                 * @memberof google.protobuf
                 * @interface ISourceCodeInfo
                 * @property {Array.<google.protobuf.SourceCodeInfo.ILocation>|null} [location] SourceCodeInfo location
                 */
    
                /**
                 * Constructs a new SourceCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a SourceCodeInfo.
                 * @implements ISourceCodeInfo
                 * @constructor
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 */
                function SourceCodeInfo(properties) {
                    this.location = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * SourceCodeInfo location.
                 * @member {Array.<google.protobuf.SourceCodeInfo.ILocation>} location
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 */
                SourceCodeInfo.prototype.location = $util.emptyArray;
    
                /**
                 * Creates a new SourceCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo instance
                 */
                SourceCodeInfo.create = function create(properties) {
                    return new SourceCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.location != null && message.location.length)
                        for (var i = 0; i < message.location.length; ++i)
                            $root.google.protobuf.SourceCodeInfo.Location.encode(message.location[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified SourceCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.ISourceCodeInfo} message SourceCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                SourceCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.location && message.location.length))
                                    message.location = [];
                                message.location.push($root.google.protobuf.SourceCodeInfo.Location.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a SourceCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                SourceCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a SourceCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                SourceCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.location != null && message.hasOwnProperty("location")) {
                        if (!Array.isArray(message.location))
                            return "location: array expected";
                        for (var i = 0; i < message.location.length; ++i) {
                            var error = $root.google.protobuf.SourceCodeInfo.Location.verify(message.location[i]);
                            if (error)
                                return "location." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a SourceCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.SourceCodeInfo} SourceCodeInfo
                 */
                SourceCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.SourceCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.SourceCodeInfo();
                    if (object.location) {
                        if (!Array.isArray(object.location))
                            throw TypeError(".google.protobuf.SourceCodeInfo.location: array expected");
                        message.location = [];
                        for (var i = 0; i < object.location.length; ++i) {
                            if (typeof object.location[i] !== "object")
                                throw TypeError(".google.protobuf.SourceCodeInfo.location: object expected");
                            message.location[i] = $root.google.protobuf.SourceCodeInfo.Location.fromObject(object.location[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a SourceCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {google.protobuf.SourceCodeInfo} message SourceCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                SourceCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.location = [];
                    if (message.location && message.location.length) {
                        object.location = [];
                        for (var j = 0; j < message.location.length; ++j)
                            object.location[j] = $root.google.protobuf.SourceCodeInfo.Location.toObject(message.location[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this SourceCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.SourceCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                SourceCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for SourceCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.SourceCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                SourceCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.SourceCodeInfo";
                };
    
                SourceCodeInfo.Location = (function() {
    
                    /**
                     * Properties of a Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @interface ILocation
                     * @property {Array.<number>|null} [path] Location path
                     * @property {Array.<number>|null} [span] Location span
                     * @property {string|null} [leadingComments] Location leadingComments
                     * @property {string|null} [trailingComments] Location trailingComments
                     * @property {Array.<string>|null} [leadingDetachedComments] Location leadingDetachedComments
                     */
    
                    /**
                     * Constructs a new Location.
                     * @memberof google.protobuf.SourceCodeInfo
                     * @classdesc Represents a Location.
                     * @implements ILocation
                     * @constructor
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     */
                    function Location(properties) {
                        this.path = [];
                        this.span = [];
                        this.leadingDetachedComments = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Location path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.path = $util.emptyArray;
    
                    /**
                     * Location span.
                     * @member {Array.<number>} span
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.span = $util.emptyArray;
    
                    /**
                     * Location leadingComments.
                     * @member {string} leadingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingComments = "";
    
                    /**
                     * Location trailingComments.
                     * @member {string} trailingComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.trailingComments = "";
    
                    /**
                     * Location leadingDetachedComments.
                     * @member {Array.<string>} leadingDetachedComments
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     */
                    Location.prototype.leadingDetachedComments = $util.emptyArray;
    
                    /**
                     * Creates a new Location instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation=} [properties] Properties to set
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location instance
                     */
                    Location.create = function create(properties) {
                        return new Location(properties);
                    };
    
                    /**
                     * Encodes the specified Location message. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.span != null && message.span.length) {
                            writer.uint32(/* id 2, wireType 2 =*/18).fork();
                            for (var i = 0; i < message.span.length; ++i)
                                writer.int32(message.span[i]);
                            writer.ldelim();
                        }
                        if (message.leadingComments != null && Object.hasOwnProperty.call(message, "leadingComments"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.leadingComments);
                        if (message.trailingComments != null && Object.hasOwnProperty.call(message, "trailingComments"))
                            writer.uint32(/* id 4, wireType 2 =*/34).string(message.trailingComments);
                        if (message.leadingDetachedComments != null && message.leadingDetachedComments.length)
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                writer.uint32(/* id 6, wireType 2 =*/50).string(message.leadingDetachedComments[i]);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Location message, length delimited. Does not implicitly {@link google.protobuf.SourceCodeInfo.Location.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.ILocation} message Location message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Location.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.SourceCodeInfo.Location();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    if (!(message.span && message.span.length))
                                        message.span = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.span.push(reader.int32());
                                    } else
                                        message.span.push(reader.int32());
                                    break;
                                }
                            case 3: {
                                    message.leadingComments = reader.string();
                                    break;
                                }
                            case 4: {
                                    message.trailingComments = reader.string();
                                    break;
                                }
                            case 6: {
                                    if (!(message.leadingDetachedComments && message.leadingDetachedComments.length))
                                        message.leadingDetachedComments = [];
                                    message.leadingDetachedComments.push(reader.string());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Location message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Location.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Location message.
                     * @function verify
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Location.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.span != null && message.hasOwnProperty("span")) {
                            if (!Array.isArray(message.span))
                                return "span: array expected";
                            for (var i = 0; i < message.span.length; ++i)
                                if (!$util.isInteger(message.span[i]))
                                    return "span: integer[] expected";
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            if (!$util.isString(message.leadingComments))
                                return "leadingComments: string expected";
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            if (!$util.isString(message.trailingComments))
                                return "trailingComments: string expected";
                        if (message.leadingDetachedComments != null && message.hasOwnProperty("leadingDetachedComments")) {
                            if (!Array.isArray(message.leadingDetachedComments))
                                return "leadingDetachedComments: array expected";
                            for (var i = 0; i < message.leadingDetachedComments.length; ++i)
                                if (!$util.isString(message.leadingDetachedComments[i]))
                                    return "leadingDetachedComments: string[] expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Location message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.SourceCodeInfo.Location} Location
                     */
                    Location.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.SourceCodeInfo.Location)
                            return object;
                        var message = new $root.google.protobuf.SourceCodeInfo.Location();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.span) {
                            if (!Array.isArray(object.span))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.span: array expected");
                            message.span = [];
                            for (var i = 0; i < object.span.length; ++i)
                                message.span[i] = object.span[i] | 0;
                        }
                        if (object.leadingComments != null)
                            message.leadingComments = String(object.leadingComments);
                        if (object.trailingComments != null)
                            message.trailingComments = String(object.trailingComments);
                        if (object.leadingDetachedComments) {
                            if (!Array.isArray(object.leadingDetachedComments))
                                throw TypeError(".google.protobuf.SourceCodeInfo.Location.leadingDetachedComments: array expected");
                            message.leadingDetachedComments = [];
                            for (var i = 0; i < object.leadingDetachedComments.length; ++i)
                                message.leadingDetachedComments[i] = String(object.leadingDetachedComments[i]);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Location message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {google.protobuf.SourceCodeInfo.Location} message Location
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Location.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults) {
                            object.path = [];
                            object.span = [];
                            object.leadingDetachedComments = [];
                        }
                        if (options.defaults) {
                            object.leadingComments = "";
                            object.trailingComments = "";
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.span && message.span.length) {
                            object.span = [];
                            for (var j = 0; j < message.span.length; ++j)
                                object.span[j] = message.span[j];
                        }
                        if (message.leadingComments != null && message.hasOwnProperty("leadingComments"))
                            object.leadingComments = message.leadingComments;
                        if (message.trailingComments != null && message.hasOwnProperty("trailingComments"))
                            object.trailingComments = message.trailingComments;
                        if (message.leadingDetachedComments && message.leadingDetachedComments.length) {
                            object.leadingDetachedComments = [];
                            for (var j = 0; j < message.leadingDetachedComments.length; ++j)
                                object.leadingDetachedComments[j] = message.leadingDetachedComments[j];
                        }
                        return object;
                    };
    
                    /**
                     * Converts this Location to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Location.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Location
                     * @function getTypeUrl
                     * @memberof google.protobuf.SourceCodeInfo.Location
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Location.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.SourceCodeInfo.Location";
                    };
    
                    return Location;
                })();
    
                return SourceCodeInfo;
            })();
    
            protobuf.GeneratedCodeInfo = (function() {
    
                /**
                 * Properties of a GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @interface IGeneratedCodeInfo
                 * @property {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>|null} [annotation] GeneratedCodeInfo annotation
                 */
    
                /**
                 * Constructs a new GeneratedCodeInfo.
                 * @memberof google.protobuf
                 * @classdesc Represents a GeneratedCodeInfo.
                 * @implements IGeneratedCodeInfo
                 * @constructor
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 */
                function GeneratedCodeInfo(properties) {
                    this.annotation = [];
                    if (properties)
                        for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                            if (properties[keys[i]] != null)
                                this[keys[i]] = properties[keys[i]];
                }
    
                /**
                 * GeneratedCodeInfo annotation.
                 * @member {Array.<google.protobuf.GeneratedCodeInfo.IAnnotation>} annotation
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 */
                GeneratedCodeInfo.prototype.annotation = $util.emptyArray;
    
                /**
                 * Creates a new GeneratedCodeInfo instance using the specified properties.
                 * @function create
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo=} [properties] Properties to set
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo instance
                 */
                GeneratedCodeInfo.create = function create(properties) {
                    return new GeneratedCodeInfo(properties);
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encode = function encode(message, writer) {
                    if (!writer)
                        writer = $Writer.create();
                    if (message.annotation != null && message.annotation.length)
                        for (var i = 0; i < message.annotation.length; ++i)
                            $root.google.protobuf.GeneratedCodeInfo.Annotation.encode(message.annotation[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                    return writer;
                };
    
                /**
                 * Encodes the specified GeneratedCodeInfo message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.verify|verify} messages.
                 * @function encodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.IGeneratedCodeInfo} message GeneratedCodeInfo message or plain object to encode
                 * @param {$protobuf.Writer} [writer] Writer to encode to
                 * @returns {$protobuf.Writer} Writer
                 */
                GeneratedCodeInfo.encodeDelimited = function encodeDelimited(message, writer) {
                    return this.encode(message, writer).ldelim();
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer.
                 * @function decode
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @param {number} [length] Message length if known beforehand
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decode = function decode(reader, length) {
                    if (!(reader instanceof $Reader))
                        reader = $Reader.create(reader);
                    var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo();
                    while (reader.pos < end) {
                        var tag = reader.uint32();
                        switch (tag >>> 3) {
                        case 1: {
                                if (!(message.annotation && message.annotation.length))
                                    message.annotation = [];
                                message.annotation.push($root.google.protobuf.GeneratedCodeInfo.Annotation.decode(reader, reader.uint32()));
                                break;
                            }
                        default:
                            reader.skipType(tag & 7);
                            break;
                        }
                    }
                    return message;
                };
    
                /**
                 * Decodes a GeneratedCodeInfo message from the specified reader or buffer, length delimited.
                 * @function decodeDelimited
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 * @throws {Error} If the payload is not a reader or valid buffer
                 * @throws {$protobuf.util.ProtocolError} If required fields are missing
                 */
                GeneratedCodeInfo.decodeDelimited = function decodeDelimited(reader) {
                    if (!(reader instanceof $Reader))
                        reader = new $Reader(reader);
                    return this.decode(reader, reader.uint32());
                };
    
                /**
                 * Verifies a GeneratedCodeInfo message.
                 * @function verify
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} message Plain object to verify
                 * @returns {string|null} `null` if valid, otherwise the reason why it is not
                 */
                GeneratedCodeInfo.verify = function verify(message) {
                    if (typeof message !== "object" || message === null)
                        return "object expected";
                    if (message.annotation != null && message.hasOwnProperty("annotation")) {
                        if (!Array.isArray(message.annotation))
                            return "annotation: array expected";
                        for (var i = 0; i < message.annotation.length; ++i) {
                            var error = $root.google.protobuf.GeneratedCodeInfo.Annotation.verify(message.annotation[i]);
                            if (error)
                                return "annotation." + error;
                        }
                    }
                    return null;
                };
    
                /**
                 * Creates a GeneratedCodeInfo message from a plain object. Also converts values to their respective internal types.
                 * @function fromObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {Object.<string,*>} object Plain object
                 * @returns {google.protobuf.GeneratedCodeInfo} GeneratedCodeInfo
                 */
                GeneratedCodeInfo.fromObject = function fromObject(object) {
                    if (object instanceof $root.google.protobuf.GeneratedCodeInfo)
                        return object;
                    var message = new $root.google.protobuf.GeneratedCodeInfo();
                    if (object.annotation) {
                        if (!Array.isArray(object.annotation))
                            throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: array expected");
                        message.annotation = [];
                        for (var i = 0; i < object.annotation.length; ++i) {
                            if (typeof object.annotation[i] !== "object")
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.annotation: object expected");
                            message.annotation[i] = $root.google.protobuf.GeneratedCodeInfo.Annotation.fromObject(object.annotation[i]);
                        }
                    }
                    return message;
                };
    
                /**
                 * Creates a plain object from a GeneratedCodeInfo message. Also converts values to other types if specified.
                 * @function toObject
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {google.protobuf.GeneratedCodeInfo} message GeneratedCodeInfo
                 * @param {$protobuf.IConversionOptions} [options] Conversion options
                 * @returns {Object.<string,*>} Plain object
                 */
                GeneratedCodeInfo.toObject = function toObject(message, options) {
                    if (!options)
                        options = {};
                    var object = {};
                    if (options.arrays || options.defaults)
                        object.annotation = [];
                    if (message.annotation && message.annotation.length) {
                        object.annotation = [];
                        for (var j = 0; j < message.annotation.length; ++j)
                            object.annotation[j] = $root.google.protobuf.GeneratedCodeInfo.Annotation.toObject(message.annotation[j], options);
                    }
                    return object;
                };
    
                /**
                 * Converts this GeneratedCodeInfo to JSON.
                 * @function toJSON
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @instance
                 * @returns {Object.<string,*>} JSON object
                 */
                GeneratedCodeInfo.prototype.toJSON = function toJSON() {
                    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                };
    
                /**
                 * Gets the default type url for GeneratedCodeInfo
                 * @function getTypeUrl
                 * @memberof google.protobuf.GeneratedCodeInfo
                 * @static
                 * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                 * @returns {string} The default type url
                 */
                GeneratedCodeInfo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                    if (typeUrlPrefix === undefined) {
                        typeUrlPrefix = "type.googleapis.com";
                    }
                    return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo";
                };
    
                GeneratedCodeInfo.Annotation = (function() {
    
                    /**
                     * Properties of an Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @interface IAnnotation
                     * @property {Array.<number>|null} [path] Annotation path
                     * @property {string|null} [sourceFile] Annotation sourceFile
                     * @property {number|null} [begin] Annotation begin
                     * @property {number|null} [end] Annotation end
                     * @property {google.protobuf.GeneratedCodeInfo.Annotation.Semantic|null} [semantic] Annotation semantic
                     */
    
                    /**
                     * Constructs a new Annotation.
                     * @memberof google.protobuf.GeneratedCodeInfo
                     * @classdesc Represents an Annotation.
                     * @implements IAnnotation
                     * @constructor
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     */
                    function Annotation(properties) {
                        this.path = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Annotation path.
                     * @member {Array.<number>} path
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.path = $util.emptyArray;
    
                    /**
                     * Annotation sourceFile.
                     * @member {string} sourceFile
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.sourceFile = "";
    
                    /**
                     * Annotation begin.
                     * @member {number} begin
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.begin = 0;
    
                    /**
                     * Annotation end.
                     * @member {number} end
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.end = 0;
    
                    /**
                     * Annotation semantic.
                     * @member {google.protobuf.GeneratedCodeInfo.Annotation.Semantic} semantic
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     */
                    Annotation.prototype.semantic = 0;
    
                    /**
                     * Creates a new Annotation instance using the specified properties.
                     * @function create
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation=} [properties] Properties to set
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation instance
                     */
                    Annotation.create = function create(properties) {
                        return new Annotation(properties);
                    };
    
                    /**
                     * Encodes the specified Annotation message. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.path != null && message.path.length) {
                            writer.uint32(/* id 1, wireType 2 =*/10).fork();
                            for (var i = 0; i < message.path.length; ++i)
                                writer.int32(message.path[i]);
                            writer.ldelim();
                        }
                        if (message.sourceFile != null && Object.hasOwnProperty.call(message, "sourceFile"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.sourceFile);
                        if (message.begin != null && Object.hasOwnProperty.call(message, "begin"))
                            writer.uint32(/* id 3, wireType 0 =*/24).int32(message.begin);
                        if (message.end != null && Object.hasOwnProperty.call(message, "end"))
                            writer.uint32(/* id 4, wireType 0 =*/32).int32(message.end);
                        if (message.semantic != null && Object.hasOwnProperty.call(message, "semantic"))
                            writer.uint32(/* id 5, wireType 0 =*/40).int32(message.semantic);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Annotation message, length delimited. Does not implicitly {@link google.protobuf.GeneratedCodeInfo.Annotation.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.IAnnotation} message Annotation message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Annotation.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer.
                     * @function decode
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.path && message.path.length))
                                        message.path = [];
                                    if ((tag & 7) === 2) {
                                        var end2 = reader.uint32() + reader.pos;
                                        while (reader.pos < end2)
                                            message.path.push(reader.int32());
                                    } else
                                        message.path.push(reader.int32());
                                    break;
                                }
                            case 2: {
                                    message.sourceFile = reader.string();
                                    break;
                                }
                            case 3: {
                                    message.begin = reader.int32();
                                    break;
                                }
                            case 4: {
                                    message.end = reader.int32();
                                    break;
                                }
                            case 5: {
                                    message.semantic = reader.int32();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Annotation message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Annotation.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Annotation message.
                     * @function verify
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Annotation.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.path != null && message.hasOwnProperty("path")) {
                            if (!Array.isArray(message.path))
                                return "path: array expected";
                            for (var i = 0; i < message.path.length; ++i)
                                if (!$util.isInteger(message.path[i]))
                                    return "path: integer[] expected";
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            if (!$util.isString(message.sourceFile))
                                return "sourceFile: string expected";
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            if (!$util.isInteger(message.begin))
                                return "begin: integer expected";
                        if (message.end != null && message.hasOwnProperty("end"))
                            if (!$util.isInteger(message.end))
                                return "end: integer expected";
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            switch (message.semantic) {
                            default:
                                return "semantic: enum value expected";
                            case 0:
                            case 1:
                            case 2:
                                break;
                            }
                        return null;
                    };
    
                    /**
                     * Creates an Annotation message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {google.protobuf.GeneratedCodeInfo.Annotation} Annotation
                     */
                    Annotation.fromObject = function fromObject(object) {
                        if (object instanceof $root.google.protobuf.GeneratedCodeInfo.Annotation)
                            return object;
                        var message = new $root.google.protobuf.GeneratedCodeInfo.Annotation();
                        if (object.path) {
                            if (!Array.isArray(object.path))
                                throw TypeError(".google.protobuf.GeneratedCodeInfo.Annotation.path: array expected");
                            message.path = [];
                            for (var i = 0; i < object.path.length; ++i)
                                message.path[i] = object.path[i] | 0;
                        }
                        if (object.sourceFile != null)
                            message.sourceFile = String(object.sourceFile);
                        if (object.begin != null)
                            message.begin = object.begin | 0;
                        if (object.end != null)
                            message.end = object.end | 0;
                        switch (object.semantic) {
                        default:
                            if (typeof object.semantic === "number") {
                                message.semantic = object.semantic;
                                break;
                            }
                            break;
                        case "NONE":
                        case 0:
                            message.semantic = 0;
                            break;
                        case "SET":
                        case 1:
                            message.semantic = 1;
                            break;
                        case "ALIAS":
                        case 2:
                            message.semantic = 2;
                            break;
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Annotation message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {google.protobuf.GeneratedCodeInfo.Annotation} message Annotation
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Annotation.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.path = [];
                        if (options.defaults) {
                            object.sourceFile = "";
                            object.begin = 0;
                            object.end = 0;
                            object.semantic = options.enums === String ? "NONE" : 0;
                        }
                        if (message.path && message.path.length) {
                            object.path = [];
                            for (var j = 0; j < message.path.length; ++j)
                                object.path[j] = message.path[j];
                        }
                        if (message.sourceFile != null && message.hasOwnProperty("sourceFile"))
                            object.sourceFile = message.sourceFile;
                        if (message.begin != null && message.hasOwnProperty("begin"))
                            object.begin = message.begin;
                        if (message.end != null && message.hasOwnProperty("end"))
                            object.end = message.end;
                        if (message.semantic != null && message.hasOwnProperty("semantic"))
                            object.semantic = options.enums === String ? $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] === undefined ? message.semantic : $root.google.protobuf.GeneratedCodeInfo.Annotation.Semantic[message.semantic] : message.semantic;
                        return object;
                    };
    
                    /**
                     * Converts this Annotation to JSON.
                     * @function toJSON
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Annotation.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Annotation
                     * @function getTypeUrl
                     * @memberof google.protobuf.GeneratedCodeInfo.Annotation
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Annotation.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/google.protobuf.GeneratedCodeInfo.Annotation";
                    };
    
                    /**
                     * Semantic enum.
                     * @name google.protobuf.GeneratedCodeInfo.Annotation.Semantic
                     * @enum {number}
                     * @property {number} NONE=0 NONE value
                     * @property {number} SET=1 SET value
                     * @property {number} ALIAS=2 ALIAS value
                     */
                    Annotation.Semantic = (function() {
                        var valuesById = {}, values = Object.create(valuesById);
                        values[valuesById[0] = "NONE"] = 0;
                        values[valuesById[1] = "SET"] = 1;
                        values[valuesById[2] = "ALIAS"] = 2;
                        return values;
                    })();
    
                    return Annotation;
                })();
    
                return GeneratedCodeInfo;
            })();
    
            return protobuf;
        })();
    
        return google;
    })();
    
    $root.ic_ledger = (function() {
    
        /**
         * Namespace ic_ledger.
         * @exports ic_ledger
         * @namespace
         */
        var ic_ledger = {};
    
        ic_ledger.pb = (function() {
    
            /**
             * Namespace pb.
             * @memberof ic_ledger
             * @namespace
             */
            var pb = {};
    
            pb.v1 = (function() {
    
                /**
                 * Namespace v1.
                 * @memberof ic_ledger.pb
                 * @namespace
                 */
                var v1 = {};
    
                v1.SendRequest = (function() {
    
                    /**
                     * Properties of a SendRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface ISendRequest
                     * @property {ic_ledger.pb.v1.IMemo|null} [memo] SendRequest memo
                     * @property {ic_ledger.pb.v1.IPayment|null} [payment] SendRequest payment
                     * @property {ic_ledger.pb.v1.IICPTs|null} [maxFee] SendRequest maxFee
                     * @property {ic_ledger.pb.v1.ISubaccount|null} [fromSubaccount] SendRequest fromSubaccount
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [to] SendRequest to
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [createdAt] SendRequest createdAt
                     * @property {ic_ledger.pb.v1.ITimeStamp|null} [createdAtTime] SendRequest createdAtTime
                     */
    
                    /**
                     * Constructs a new SendRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a SendRequest.
                     * @implements ISendRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.ISendRequest=} [properties] Properties to set
                     */
                    function SendRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SendRequest memo.
                     * @member {ic_ledger.pb.v1.IMemo|null|undefined} memo
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.memo = null;
    
                    /**
                     * SendRequest payment.
                     * @member {ic_ledger.pb.v1.IPayment|null|undefined} payment
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.payment = null;
    
                    /**
                     * SendRequest maxFee.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} maxFee
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.maxFee = null;
    
                    /**
                     * SendRequest fromSubaccount.
                     * @member {ic_ledger.pb.v1.ISubaccount|null|undefined} fromSubaccount
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.fromSubaccount = null;
    
                    /**
                     * SendRequest to.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} to
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.to = null;
    
                    /**
                     * SendRequest createdAt.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} createdAt
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.createdAt = null;
    
                    /**
                     * SendRequest createdAtTime.
                     * @member {ic_ledger.pb.v1.ITimeStamp|null|undefined} createdAtTime
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     */
                    SendRequest.prototype.createdAtTime = null;
    
                    /**
                     * Creates a new SendRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ISendRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.SendRequest} SendRequest instance
                     */
                    SendRequest.create = function create(properties) {
                        return new SendRequest(properties);
                    };
    
                    /**
                     * Encodes the specified SendRequest message. Does not implicitly {@link ic_ledger.pb.v1.SendRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ISendRequest} message SendRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                            $root.ic_ledger.pb.v1.Memo.encode(message.memo, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.payment != null && Object.hasOwnProperty.call(message, "payment"))
                            $root.ic_ledger.pb.v1.Payment.encode(message.payment, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.maxFee != null && Object.hasOwnProperty.call(message, "maxFee"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.maxFee, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.fromSubaccount != null && Object.hasOwnProperty.call(message, "fromSubaccount"))
                            $root.ic_ledger.pb.v1.Subaccount.encode(message.fromSubaccount, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.to, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.createdAt != null && Object.hasOwnProperty.call(message, "createdAt"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.createdAt, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.createdAtTime != null && Object.hasOwnProperty.call(message, "createdAtTime"))
                            $root.ic_ledger.pb.v1.TimeStamp.encode(message.createdAtTime, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SendRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.SendRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ISendRequest} message SendRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SendRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.SendRequest} SendRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.SendRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.memo = $root.ic_ledger.pb.v1.Memo.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.payment = $root.ic_ledger.pb.v1.Payment.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.maxFee = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.to = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.createdAt = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SendRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.SendRequest} SendRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SendRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SendRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.memo != null && message.hasOwnProperty("memo")) {
                            var error = $root.ic_ledger.pb.v1.Memo.verify(message.memo);
                            if (error)
                                return "memo." + error;
                        }
                        if (message.payment != null && message.hasOwnProperty("payment")) {
                            var error = $root.ic_ledger.pb.v1.Payment.verify(message.payment);
                            if (error)
                                return "payment." + error;
                        }
                        if (message.maxFee != null && message.hasOwnProperty("maxFee")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.maxFee);
                            if (error)
                                return "maxFee." + error;
                        }
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount")) {
                            var error = $root.ic_ledger.pb.v1.Subaccount.verify(message.fromSubaccount);
                            if (error)
                                return "fromSubaccount." + error;
                        }
                        if (message.to != null && message.hasOwnProperty("to")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.to);
                            if (error)
                                return "to." + error;
                        }
                        if (message.createdAt != null && message.hasOwnProperty("createdAt")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.createdAt);
                            if (error)
                                return "createdAt." + error;
                        }
                        if (message.createdAtTime != null && message.hasOwnProperty("createdAtTime")) {
                            var error = $root.ic_ledger.pb.v1.TimeStamp.verify(message.createdAtTime);
                            if (error)
                                return "createdAtTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SendRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.SendRequest} SendRequest
                     */
                    SendRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.SendRequest)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.SendRequest();
                        if (object.memo != null) {
                            if (typeof object.memo !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.memo: object expected");
                            message.memo = $root.ic_ledger.pb.v1.Memo.fromObject(object.memo);
                        }
                        if (object.payment != null) {
                            if (typeof object.payment !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.payment: object expected");
                            message.payment = $root.ic_ledger.pb.v1.Payment.fromObject(object.payment);
                        }
                        if (object.maxFee != null) {
                            if (typeof object.maxFee !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.maxFee: object expected");
                            message.maxFee = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.maxFee);
                        }
                        if (object.fromSubaccount != null) {
                            if (typeof object.fromSubaccount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.fromSubaccount: object expected");
                            message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.fromObject(object.fromSubaccount);
                        }
                        if (object.to != null) {
                            if (typeof object.to !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.to: object expected");
                            message.to = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.to);
                        }
                        if (object.createdAt != null) {
                            if (typeof object.createdAt !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.createdAt: object expected");
                            message.createdAt = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.createdAt);
                        }
                        if (object.createdAtTime != null) {
                            if (typeof object.createdAtTime !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendRequest.createdAtTime: object expected");
                            message.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.fromObject(object.createdAtTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SendRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {ic_ledger.pb.v1.SendRequest} message SendRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SendRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.memo = null;
                            object.payment = null;
                            object.maxFee = null;
                            object.fromSubaccount = null;
                            object.to = null;
                            object.createdAt = null;
                            object.createdAtTime = null;
                        }
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            object.memo = $root.ic_ledger.pb.v1.Memo.toObject(message.memo, options);
                        if (message.payment != null && message.hasOwnProperty("payment"))
                            object.payment = $root.ic_ledger.pb.v1.Payment.toObject(message.payment, options);
                        if (message.maxFee != null && message.hasOwnProperty("maxFee"))
                            object.maxFee = $root.ic_ledger.pb.v1.ICPTs.toObject(message.maxFee, options);
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount"))
                            object.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.toObject(message.fromSubaccount, options);
                        if (message.to != null && message.hasOwnProperty("to"))
                            object.to = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.to, options);
                        if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                            object.createdAt = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.createdAt, options);
                        if (message.createdAtTime != null && message.hasOwnProperty("createdAtTime"))
                            object.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.toObject(message.createdAtTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this SendRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SendRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SendRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.SendRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SendRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.SendRequest";
                    };
    
                    return SendRequest;
                })();
    
                v1.SendResponse = (function() {
    
                    /**
                     * Properties of a SendResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface ISendResponse
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [resultingHeight] SendResponse resultingHeight
                     */
    
                    /**
                     * Constructs a new SendResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a SendResponse.
                     * @implements ISendResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.ISendResponse=} [properties] Properties to set
                     */
                    function SendResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * SendResponse resultingHeight.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} resultingHeight
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @instance
                     */
                    SendResponse.prototype.resultingHeight = null;
    
                    /**
                     * Creates a new SendResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ISendResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.SendResponse} SendResponse instance
                     */
                    SendResponse.create = function create(properties) {
                        return new SendResponse(properties);
                    };
    
                    /**
                     * Encodes the specified SendResponse message. Does not implicitly {@link ic_ledger.pb.v1.SendResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ISendResponse} message SendResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.resultingHeight != null && Object.hasOwnProperty.call(message, "resultingHeight"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.resultingHeight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified SendResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.SendResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ISendResponse} message SendResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    SendResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a SendResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.SendResponse} SendResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.SendResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.resultingHeight = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a SendResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.SendResponse} SendResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    SendResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a SendResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    SendResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.resultingHeight != null && message.hasOwnProperty("resultingHeight")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.resultingHeight);
                            if (error)
                                return "resultingHeight." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a SendResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.SendResponse} SendResponse
                     */
                    SendResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.SendResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.SendResponse();
                        if (object.resultingHeight != null) {
                            if (typeof object.resultingHeight !== "object")
                                throw TypeError(".ic_ledger.pb.v1.SendResponse.resultingHeight: object expected");
                            message.resultingHeight = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.resultingHeight);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a SendResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {ic_ledger.pb.v1.SendResponse} message SendResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    SendResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.resultingHeight = null;
                        if (message.resultingHeight != null && message.hasOwnProperty("resultingHeight"))
                            object.resultingHeight = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.resultingHeight, options);
                        return object;
                    };
    
                    /**
                     * Converts this SendResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    SendResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for SendResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.SendResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    SendResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.SendResponse";
                    };
    
                    return SendResponse;
                })();
    
                v1.NotifyRequest = (function() {
    
                    /**
                     * Properties of a NotifyRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface INotifyRequest
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [blockHeight] NotifyRequest blockHeight
                     * @property {ic_ledger.pb.v1.IICPTs|null} [maxFee] NotifyRequest maxFee
                     * @property {ic_ledger.pb.v1.ISubaccount|null} [fromSubaccount] NotifyRequest fromSubaccount
                     * @property {ic_base_types.pb.v1.IPrincipalId|null} [toCanister] NotifyRequest toCanister
                     * @property {ic_ledger.pb.v1.ISubaccount|null} [toSubaccount] NotifyRequest toSubaccount
                     */
    
                    /**
                     * Constructs a new NotifyRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a NotifyRequest.
                     * @implements INotifyRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.INotifyRequest=} [properties] Properties to set
                     */
                    function NotifyRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * NotifyRequest blockHeight.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} blockHeight
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     */
                    NotifyRequest.prototype.blockHeight = null;
    
                    /**
                     * NotifyRequest maxFee.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} maxFee
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     */
                    NotifyRequest.prototype.maxFee = null;
    
                    /**
                     * NotifyRequest fromSubaccount.
                     * @member {ic_ledger.pb.v1.ISubaccount|null|undefined} fromSubaccount
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     */
                    NotifyRequest.prototype.fromSubaccount = null;
    
                    /**
                     * NotifyRequest toCanister.
                     * @member {ic_base_types.pb.v1.IPrincipalId|null|undefined} toCanister
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     */
                    NotifyRequest.prototype.toCanister = null;
    
                    /**
                     * NotifyRequest toSubaccount.
                     * @member {ic_ledger.pb.v1.ISubaccount|null|undefined} toSubaccount
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     */
                    NotifyRequest.prototype.toSubaccount = null;
    
                    /**
                     * Creates a new NotifyRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.NotifyRequest} NotifyRequest instance
                     */
                    NotifyRequest.create = function create(properties) {
                        return new NotifyRequest(properties);
                    };
    
                    /**
                     * Encodes the specified NotifyRequest message. Does not implicitly {@link ic_ledger.pb.v1.NotifyRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyRequest} message NotifyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotifyRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blockHeight != null && Object.hasOwnProperty.call(message, "blockHeight"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.blockHeight, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.maxFee != null && Object.hasOwnProperty.call(message, "maxFee"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.maxFee, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.fromSubaccount != null && Object.hasOwnProperty.call(message, "fromSubaccount"))
                            $root.ic_ledger.pb.v1.Subaccount.encode(message.fromSubaccount, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.toCanister != null && Object.hasOwnProperty.call(message, "toCanister"))
                            $root.ic_base_types.pb.v1.PrincipalId.encode(message.toCanister, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.toSubaccount != null && Object.hasOwnProperty.call(message, "toSubaccount"))
                            $root.ic_ledger.pb.v1.Subaccount.encode(message.toSubaccount, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NotifyRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.NotifyRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyRequest} message NotifyRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotifyRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NotifyRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.NotifyRequest} NotifyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotifyRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.NotifyRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.maxFee = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.toCanister = $root.ic_base_types.pb.v1.PrincipalId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NotifyRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.NotifyRequest} NotifyRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotifyRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NotifyRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NotifyRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blockHeight != null && message.hasOwnProperty("blockHeight")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.blockHeight);
                            if (error)
                                return "blockHeight." + error;
                        }
                        if (message.maxFee != null && message.hasOwnProperty("maxFee")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.maxFee);
                            if (error)
                                return "maxFee." + error;
                        }
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount")) {
                            var error = $root.ic_ledger.pb.v1.Subaccount.verify(message.fromSubaccount);
                            if (error)
                                return "fromSubaccount." + error;
                        }
                        if (message.toCanister != null && message.hasOwnProperty("toCanister")) {
                            var error = $root.ic_base_types.pb.v1.PrincipalId.verify(message.toCanister);
                            if (error)
                                return "toCanister." + error;
                        }
                        if (message.toSubaccount != null && message.hasOwnProperty("toSubaccount")) {
                            var error = $root.ic_ledger.pb.v1.Subaccount.verify(message.toSubaccount);
                            if (error)
                                return "toSubaccount." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a NotifyRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.NotifyRequest} NotifyRequest
                     */
                    NotifyRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.NotifyRequest)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.NotifyRequest();
                        if (object.blockHeight != null) {
                            if (typeof object.blockHeight !== "object")
                                throw TypeError(".ic_ledger.pb.v1.NotifyRequest.blockHeight: object expected");
                            message.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.blockHeight);
                        }
                        if (object.maxFee != null) {
                            if (typeof object.maxFee !== "object")
                                throw TypeError(".ic_ledger.pb.v1.NotifyRequest.maxFee: object expected");
                            message.maxFee = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.maxFee);
                        }
                        if (object.fromSubaccount != null) {
                            if (typeof object.fromSubaccount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.NotifyRequest.fromSubaccount: object expected");
                            message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.fromObject(object.fromSubaccount);
                        }
                        if (object.toCanister != null) {
                            if (typeof object.toCanister !== "object")
                                throw TypeError(".ic_ledger.pb.v1.NotifyRequest.toCanister: object expected");
                            message.toCanister = $root.ic_base_types.pb.v1.PrincipalId.fromObject(object.toCanister);
                        }
                        if (object.toSubaccount != null) {
                            if (typeof object.toSubaccount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.NotifyRequest.toSubaccount: object expected");
                            message.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.fromObject(object.toSubaccount);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a NotifyRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {ic_ledger.pb.v1.NotifyRequest} message NotifyRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NotifyRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.blockHeight = null;
                            object.maxFee = null;
                            object.fromSubaccount = null;
                            object.toCanister = null;
                            object.toSubaccount = null;
                        }
                        if (message.blockHeight != null && message.hasOwnProperty("blockHeight"))
                            object.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.blockHeight, options);
                        if (message.maxFee != null && message.hasOwnProperty("maxFee"))
                            object.maxFee = $root.ic_ledger.pb.v1.ICPTs.toObject(message.maxFee, options);
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount"))
                            object.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.toObject(message.fromSubaccount, options);
                        if (message.toCanister != null && message.hasOwnProperty("toCanister"))
                            object.toCanister = $root.ic_base_types.pb.v1.PrincipalId.toObject(message.toCanister, options);
                        if (message.toSubaccount != null && message.hasOwnProperty("toSubaccount"))
                            object.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.toObject(message.toSubaccount, options);
                        return object;
                    };
    
                    /**
                     * Converts this NotifyRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NotifyRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NotifyRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.NotifyRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NotifyRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.NotifyRequest";
                    };
    
                    return NotifyRequest;
                })();
    
                v1.NotifyResponse = (function() {
    
                    /**
                     * Properties of a NotifyResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface INotifyResponse
                     */
    
                    /**
                     * Constructs a new NotifyResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a NotifyResponse.
                     * @implements INotifyResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.INotifyResponse=} [properties] Properties to set
                     */
                    function NotifyResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new NotifyResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.NotifyResponse} NotifyResponse instance
                     */
                    NotifyResponse.create = function create(properties) {
                        return new NotifyResponse(properties);
                    };
    
                    /**
                     * Encodes the specified NotifyResponse message. Does not implicitly {@link ic_ledger.pb.v1.NotifyResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyResponse} message NotifyResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotifyResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified NotifyResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.NotifyResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {ic_ledger.pb.v1.INotifyResponse} message NotifyResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    NotifyResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a NotifyResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.NotifyResponse} NotifyResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotifyResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.NotifyResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a NotifyResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.NotifyResponse} NotifyResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    NotifyResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a NotifyResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    NotifyResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a NotifyResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.NotifyResponse} NotifyResponse
                     */
                    NotifyResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.NotifyResponse)
                            return object;
                        return new $root.ic_ledger.pb.v1.NotifyResponse();
                    };
    
                    /**
                     * Creates a plain object from a NotifyResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {ic_ledger.pb.v1.NotifyResponse} message NotifyResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    NotifyResponse.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this NotifyResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    NotifyResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for NotifyResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.NotifyResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    NotifyResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.NotifyResponse";
                    };
    
                    return NotifyResponse;
                })();
    
                v1.TransactionNotificationRequest = (function() {
    
                    /**
                     * Properties of a TransactionNotificationRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITransactionNotificationRequest
                     * @property {ic_base_types.pb.v1.IPrincipalId|null} [from] TransactionNotificationRequest from
                     * @property {ic_ledger.pb.v1.ISubaccount|null} [fromSubaccount] TransactionNotificationRequest fromSubaccount
                     * @property {ic_base_types.pb.v1.IPrincipalId|null} [to] TransactionNotificationRequest to
                     * @property {ic_ledger.pb.v1.ISubaccount|null} [toSubaccount] TransactionNotificationRequest toSubaccount
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [blockHeight] TransactionNotificationRequest blockHeight
                     * @property {ic_ledger.pb.v1.IICPTs|null} [amount] TransactionNotificationRequest amount
                     * @property {ic_ledger.pb.v1.IMemo|null} [memo] TransactionNotificationRequest memo
                     */
    
                    /**
                     * Constructs a new TransactionNotificationRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a TransactionNotificationRequest.
                     * @implements ITransactionNotificationRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITransactionNotificationRequest=} [properties] Properties to set
                     */
                    function TransactionNotificationRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransactionNotificationRequest from.
                     * @member {ic_base_types.pb.v1.IPrincipalId|null|undefined} from
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.from = null;
    
                    /**
                     * TransactionNotificationRequest fromSubaccount.
                     * @member {ic_ledger.pb.v1.ISubaccount|null|undefined} fromSubaccount
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.fromSubaccount = null;
    
                    /**
                     * TransactionNotificationRequest to.
                     * @member {ic_base_types.pb.v1.IPrincipalId|null|undefined} to
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.to = null;
    
                    /**
                     * TransactionNotificationRequest toSubaccount.
                     * @member {ic_ledger.pb.v1.ISubaccount|null|undefined} toSubaccount
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.toSubaccount = null;
    
                    /**
                     * TransactionNotificationRequest blockHeight.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} blockHeight
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.blockHeight = null;
    
                    /**
                     * TransactionNotificationRequest amount.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} amount
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.amount = null;
    
                    /**
                     * TransactionNotificationRequest memo.
                     * @member {ic_ledger.pb.v1.IMemo|null|undefined} memo
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     */
                    TransactionNotificationRequest.prototype.memo = null;
    
                    /**
                     * Creates a new TransactionNotificationRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.TransactionNotificationRequest} TransactionNotificationRequest instance
                     */
                    TransactionNotificationRequest.create = function create(properties) {
                        return new TransactionNotificationRequest(properties);
                    };
    
                    /**
                     * Encodes the specified TransactionNotificationRequest message. Does not implicitly {@link ic_ledger.pb.v1.TransactionNotificationRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationRequest} message TransactionNotificationRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionNotificationRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                            $root.ic_base_types.pb.v1.PrincipalId.encode(message.from, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.fromSubaccount != null && Object.hasOwnProperty.call(message, "fromSubaccount"))
                            $root.ic_ledger.pb.v1.Subaccount.encode(message.fromSubaccount, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                            $root.ic_base_types.pb.v1.PrincipalId.encode(message.to, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.toSubaccount != null && Object.hasOwnProperty.call(message, "toSubaccount"))
                            $root.ic_ledger.pb.v1.Subaccount.encode(message.toSubaccount, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.blockHeight != null && Object.hasOwnProperty.call(message, "blockHeight"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.blockHeight, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.amount, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                            $root.ic_ledger.pb.v1.Memo.encode(message.memo, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransactionNotificationRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.TransactionNotificationRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationRequest} message TransactionNotificationRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionNotificationRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransactionNotificationRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.TransactionNotificationRequest} TransactionNotificationRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionNotificationRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.TransactionNotificationRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.from = $root.ic_base_types.pb.v1.PrincipalId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.to = $root.ic_base_types.pb.v1.PrincipalId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.amount = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            case 7: {
                                    message.memo = $root.ic_ledger.pb.v1.Memo.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransactionNotificationRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.TransactionNotificationRequest} TransactionNotificationRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionNotificationRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransactionNotificationRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransactionNotificationRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.from != null && message.hasOwnProperty("from")) {
                            var error = $root.ic_base_types.pb.v1.PrincipalId.verify(message.from);
                            if (error)
                                return "from." + error;
                        }
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount")) {
                            var error = $root.ic_ledger.pb.v1.Subaccount.verify(message.fromSubaccount);
                            if (error)
                                return "fromSubaccount." + error;
                        }
                        if (message.to != null && message.hasOwnProperty("to")) {
                            var error = $root.ic_base_types.pb.v1.PrincipalId.verify(message.to);
                            if (error)
                                return "to." + error;
                        }
                        if (message.toSubaccount != null && message.hasOwnProperty("toSubaccount")) {
                            var error = $root.ic_ledger.pb.v1.Subaccount.verify(message.toSubaccount);
                            if (error)
                                return "toSubaccount." + error;
                        }
                        if (message.blockHeight != null && message.hasOwnProperty("blockHeight")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.blockHeight);
                            if (error)
                                return "blockHeight." + error;
                        }
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        if (message.memo != null && message.hasOwnProperty("memo")) {
                            var error = $root.ic_ledger.pb.v1.Memo.verify(message.memo);
                            if (error)
                                return "memo." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TransactionNotificationRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.TransactionNotificationRequest} TransactionNotificationRequest
                     */
                    TransactionNotificationRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.TransactionNotificationRequest)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.TransactionNotificationRequest();
                        if (object.from != null) {
                            if (typeof object.from !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.from: object expected");
                            message.from = $root.ic_base_types.pb.v1.PrincipalId.fromObject(object.from);
                        }
                        if (object.fromSubaccount != null) {
                            if (typeof object.fromSubaccount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.fromSubaccount: object expected");
                            message.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.fromObject(object.fromSubaccount);
                        }
                        if (object.to != null) {
                            if (typeof object.to !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.to: object expected");
                            message.to = $root.ic_base_types.pb.v1.PrincipalId.fromObject(object.to);
                        }
                        if (object.toSubaccount != null) {
                            if (typeof object.toSubaccount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.toSubaccount: object expected");
                            message.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.fromObject(object.toSubaccount);
                        }
                        if (object.blockHeight != null) {
                            if (typeof object.blockHeight !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.blockHeight: object expected");
                            message.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.blockHeight);
                        }
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.amount: object expected");
                            message.amount = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.amount);
                        }
                        if (object.memo != null) {
                            if (typeof object.memo !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TransactionNotificationRequest.memo: object expected");
                            message.memo = $root.ic_ledger.pb.v1.Memo.fromObject(object.memo);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransactionNotificationRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {ic_ledger.pb.v1.TransactionNotificationRequest} message TransactionNotificationRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransactionNotificationRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.from = null;
                            object.fromSubaccount = null;
                            object.to = null;
                            object.toSubaccount = null;
                            object.blockHeight = null;
                            object.amount = null;
                            object.memo = null;
                        }
                        if (message.from != null && message.hasOwnProperty("from"))
                            object.from = $root.ic_base_types.pb.v1.PrincipalId.toObject(message.from, options);
                        if (message.fromSubaccount != null && message.hasOwnProperty("fromSubaccount"))
                            object.fromSubaccount = $root.ic_ledger.pb.v1.Subaccount.toObject(message.fromSubaccount, options);
                        if (message.to != null && message.hasOwnProperty("to"))
                            object.to = $root.ic_base_types.pb.v1.PrincipalId.toObject(message.to, options);
                        if (message.toSubaccount != null && message.hasOwnProperty("toSubaccount"))
                            object.toSubaccount = $root.ic_ledger.pb.v1.Subaccount.toObject(message.toSubaccount, options);
                        if (message.blockHeight != null && message.hasOwnProperty("blockHeight"))
                            object.blockHeight = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.blockHeight, options);
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.ic_ledger.pb.v1.ICPTs.toObject(message.amount, options);
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            object.memo = $root.ic_ledger.pb.v1.Memo.toObject(message.memo, options);
                        return object;
                    };
    
                    /**
                     * Converts this TransactionNotificationRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransactionNotificationRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TransactionNotificationRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.TransactionNotificationRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TransactionNotificationRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.TransactionNotificationRequest";
                    };
    
                    return TransactionNotificationRequest;
                })();
    
                v1.TransactionNotificationResponse = (function() {
    
                    /**
                     * Properties of a TransactionNotificationResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITransactionNotificationResponse
                     * @property {Uint8Array|null} [response] TransactionNotificationResponse response
                     */
    
                    /**
                     * Constructs a new TransactionNotificationResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a TransactionNotificationResponse.
                     * @implements ITransactionNotificationResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITransactionNotificationResponse=} [properties] Properties to set
                     */
                    function TransactionNotificationResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TransactionNotificationResponse response.
                     * @member {Uint8Array} response
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @instance
                     */
                    TransactionNotificationResponse.prototype.response = $util.newBuffer([]);
    
                    /**
                     * Creates a new TransactionNotificationResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.TransactionNotificationResponse} TransactionNotificationResponse instance
                     */
                    TransactionNotificationResponse.create = function create(properties) {
                        return new TransactionNotificationResponse(properties);
                    };
    
                    /**
                     * Encodes the specified TransactionNotificationResponse message. Does not implicitly {@link ic_ledger.pb.v1.TransactionNotificationResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationResponse} message TransactionNotificationResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionNotificationResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.response != null && Object.hasOwnProperty.call(message, "response"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.response);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TransactionNotificationResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.TransactionNotificationResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITransactionNotificationResponse} message TransactionNotificationResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TransactionNotificationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TransactionNotificationResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.TransactionNotificationResponse} TransactionNotificationResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionNotificationResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.TransactionNotificationResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.response = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TransactionNotificationResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.TransactionNotificationResponse} TransactionNotificationResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TransactionNotificationResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TransactionNotificationResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TransactionNotificationResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.response != null && message.hasOwnProperty("response"))
                            if (!(message.response && typeof message.response.length === "number" || $util.isString(message.response)))
                                return "response: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a TransactionNotificationResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.TransactionNotificationResponse} TransactionNotificationResponse
                     */
                    TransactionNotificationResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.TransactionNotificationResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.TransactionNotificationResponse();
                        if (object.response != null)
                            if (typeof object.response === "string")
                                $util.base64.decode(object.response, message.response = $util.newBuffer($util.base64.length(object.response)), 0);
                            else if (object.response.length >= 0)
                                message.response = object.response;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TransactionNotificationResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.TransactionNotificationResponse} message TransactionNotificationResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TransactionNotificationResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.response = "";
                            else {
                                object.response = [];
                                if (options.bytes !== Array)
                                    object.response = $util.newBuffer(object.response);
                            }
                        if (message.response != null && message.hasOwnProperty("response"))
                            object.response = options.bytes === String ? $util.base64.encode(message.response, 0, message.response.length) : options.bytes === Array ? Array.prototype.slice.call(message.response) : message.response;
                        return object;
                    };
    
                    /**
                     * Converts this TransactionNotificationResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TransactionNotificationResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TransactionNotificationResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.TransactionNotificationResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TransactionNotificationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.TransactionNotificationResponse";
                    };
    
                    return TransactionNotificationResponse;
                })();
    
                v1.CyclesNotificationResponse = (function() {
    
                    /**
                     * Properties of a CyclesNotificationResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface ICyclesNotificationResponse
                     * @property {ic_base_types.pb.v1.IPrincipalId|null} [createdCanisterId] CyclesNotificationResponse createdCanisterId
                     * @property {ic_ledger.pb.v1.IRefund|null} [refund] CyclesNotificationResponse refund
                     * @property {ic_ledger.pb.v1.IToppedUp|null} [toppedUp] CyclesNotificationResponse toppedUp
                     */
    
                    /**
                     * Constructs a new CyclesNotificationResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a CyclesNotificationResponse.
                     * @implements ICyclesNotificationResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.ICyclesNotificationResponse=} [properties] Properties to set
                     */
                    function CyclesNotificationResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * CyclesNotificationResponse createdCanisterId.
                     * @member {ic_base_types.pb.v1.IPrincipalId|null|undefined} createdCanisterId
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @instance
                     */
                    CyclesNotificationResponse.prototype.createdCanisterId = null;
    
                    /**
                     * CyclesNotificationResponse refund.
                     * @member {ic_ledger.pb.v1.IRefund|null|undefined} refund
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @instance
                     */
                    CyclesNotificationResponse.prototype.refund = null;
    
                    /**
                     * CyclesNotificationResponse toppedUp.
                     * @member {ic_ledger.pb.v1.IToppedUp|null|undefined} toppedUp
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @instance
                     */
                    CyclesNotificationResponse.prototype.toppedUp = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * CyclesNotificationResponse response.
                     * @member {"createdCanisterId"|"refund"|"toppedUp"|undefined} response
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @instance
                     */
                    Object.defineProperty(CyclesNotificationResponse.prototype, "response", {
                        get: $util.oneOfGetter($oneOfFields = ["createdCanisterId", "refund", "toppedUp"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new CyclesNotificationResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ICyclesNotificationResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.CyclesNotificationResponse} CyclesNotificationResponse instance
                     */
                    CyclesNotificationResponse.create = function create(properties) {
                        return new CyclesNotificationResponse(properties);
                    };
    
                    /**
                     * Encodes the specified CyclesNotificationResponse message. Does not implicitly {@link ic_ledger.pb.v1.CyclesNotificationResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ICyclesNotificationResponse} message CyclesNotificationResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CyclesNotificationResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.createdCanisterId != null && Object.hasOwnProperty.call(message, "createdCanisterId"))
                            $root.ic_base_types.pb.v1.PrincipalId.encode(message.createdCanisterId, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.refund != null && Object.hasOwnProperty.call(message, "refund"))
                            $root.ic_ledger.pb.v1.Refund.encode(message.refund, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.toppedUp != null && Object.hasOwnProperty.call(message, "toppedUp"))
                            $root.ic_ledger.pb.v1.ToppedUp.encode(message.toppedUp, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified CyclesNotificationResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.CyclesNotificationResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ICyclesNotificationResponse} message CyclesNotificationResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    CyclesNotificationResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a CyclesNotificationResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.CyclesNotificationResponse} CyclesNotificationResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CyclesNotificationResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.CyclesNotificationResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.createdCanisterId = $root.ic_base_types.pb.v1.PrincipalId.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.refund = $root.ic_ledger.pb.v1.Refund.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.toppedUp = $root.ic_ledger.pb.v1.ToppedUp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a CyclesNotificationResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.CyclesNotificationResponse} CyclesNotificationResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    CyclesNotificationResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a CyclesNotificationResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    CyclesNotificationResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.createdCanisterId != null && message.hasOwnProperty("createdCanisterId")) {
                            properties.response = 1;
                            {
                                var error = $root.ic_base_types.pb.v1.PrincipalId.verify(message.createdCanisterId);
                                if (error)
                                    return "createdCanisterId." + error;
                            }
                        }
                        if (message.refund != null && message.hasOwnProperty("refund")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.Refund.verify(message.refund);
                                if (error)
                                    return "refund." + error;
                            }
                        }
                        if (message.toppedUp != null && message.hasOwnProperty("toppedUp")) {
                            if (properties.response === 1)
                                return "response: multiple values";
                            properties.response = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.ToppedUp.verify(message.toppedUp);
                                if (error)
                                    return "toppedUp." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates a CyclesNotificationResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.CyclesNotificationResponse} CyclesNotificationResponse
                     */
                    CyclesNotificationResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.CyclesNotificationResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.CyclesNotificationResponse();
                        if (object.createdCanisterId != null) {
                            if (typeof object.createdCanisterId !== "object")
                                throw TypeError(".ic_ledger.pb.v1.CyclesNotificationResponse.createdCanisterId: object expected");
                            message.createdCanisterId = $root.ic_base_types.pb.v1.PrincipalId.fromObject(object.createdCanisterId);
                        }
                        if (object.refund != null) {
                            if (typeof object.refund !== "object")
                                throw TypeError(".ic_ledger.pb.v1.CyclesNotificationResponse.refund: object expected");
                            message.refund = $root.ic_ledger.pb.v1.Refund.fromObject(object.refund);
                        }
                        if (object.toppedUp != null) {
                            if (typeof object.toppedUp !== "object")
                                throw TypeError(".ic_ledger.pb.v1.CyclesNotificationResponse.toppedUp: object expected");
                            message.toppedUp = $root.ic_ledger.pb.v1.ToppedUp.fromObject(object.toppedUp);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a CyclesNotificationResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {ic_ledger.pb.v1.CyclesNotificationResponse} message CyclesNotificationResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    CyclesNotificationResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.createdCanisterId != null && message.hasOwnProperty("createdCanisterId")) {
                            object.createdCanisterId = $root.ic_base_types.pb.v1.PrincipalId.toObject(message.createdCanisterId, options);
                            if (options.oneofs)
                                object.response = "createdCanisterId";
                        }
                        if (message.refund != null && message.hasOwnProperty("refund")) {
                            object.refund = $root.ic_ledger.pb.v1.Refund.toObject(message.refund, options);
                            if (options.oneofs)
                                object.response = "refund";
                        }
                        if (message.toppedUp != null && message.hasOwnProperty("toppedUp")) {
                            object.toppedUp = $root.ic_ledger.pb.v1.ToppedUp.toObject(message.toppedUp, options);
                            if (options.oneofs)
                                object.response = "toppedUp";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this CyclesNotificationResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    CyclesNotificationResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for CyclesNotificationResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.CyclesNotificationResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    CyclesNotificationResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.CyclesNotificationResponse";
                    };
    
                    return CyclesNotificationResponse;
                })();
    
                v1.AccountBalanceRequest = (function() {
    
                    /**
                     * Properties of an AccountBalanceRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface IAccountBalanceRequest
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [account] AccountBalanceRequest account
                     */
    
                    /**
                     * Constructs a new AccountBalanceRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an AccountBalanceRequest.
                     * @implements IAccountBalanceRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.IAccountBalanceRequest=} [properties] Properties to set
                     */
                    function AccountBalanceRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AccountBalanceRequest account.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} account
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @instance
                     */
                    AccountBalanceRequest.prototype.account = null;
    
                    /**
                     * Creates a new AccountBalanceRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.AccountBalanceRequest} AccountBalanceRequest instance
                     */
                    AccountBalanceRequest.create = function create(properties) {
                        return new AccountBalanceRequest(properties);
                    };
    
                    /**
                     * Encodes the specified AccountBalanceRequest message. Does not implicitly {@link ic_ledger.pb.v1.AccountBalanceRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceRequest} message AccountBalanceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountBalanceRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.account != null && Object.hasOwnProperty.call(message, "account"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.account, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AccountBalanceRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.AccountBalanceRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceRequest} message AccountBalanceRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountBalanceRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AccountBalanceRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.AccountBalanceRequest} AccountBalanceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountBalanceRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.AccountBalanceRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.account = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AccountBalanceRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.AccountBalanceRequest} AccountBalanceRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountBalanceRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AccountBalanceRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountBalanceRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.account != null && message.hasOwnProperty("account")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.account);
                            if (error)
                                return "account." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AccountBalanceRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.AccountBalanceRequest} AccountBalanceRequest
                     */
                    AccountBalanceRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.AccountBalanceRequest)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.AccountBalanceRequest();
                        if (object.account != null) {
                            if (typeof object.account !== "object")
                                throw TypeError(".ic_ledger.pb.v1.AccountBalanceRequest.account: object expected");
                            message.account = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.account);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AccountBalanceRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {ic_ledger.pb.v1.AccountBalanceRequest} message AccountBalanceRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountBalanceRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.account = null;
                        if (message.account != null && message.hasOwnProperty("account"))
                            object.account = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.account, options);
                        return object;
                    };
    
                    /**
                     * Converts this AccountBalanceRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountBalanceRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AccountBalanceRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.AccountBalanceRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AccountBalanceRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.AccountBalanceRequest";
                    };
    
                    return AccountBalanceRequest;
                })();
    
                v1.AccountBalanceResponse = (function() {
    
                    /**
                     * Properties of an AccountBalanceResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface IAccountBalanceResponse
                     * @property {ic_ledger.pb.v1.IICPTs|null} [balance] AccountBalanceResponse balance
                     */
    
                    /**
                     * Constructs a new AccountBalanceResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an AccountBalanceResponse.
                     * @implements IAccountBalanceResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.IAccountBalanceResponse=} [properties] Properties to set
                     */
                    function AccountBalanceResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AccountBalanceResponse balance.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} balance
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @instance
                     */
                    AccountBalanceResponse.prototype.balance = null;
    
                    /**
                     * Creates a new AccountBalanceResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.AccountBalanceResponse} AccountBalanceResponse instance
                     */
                    AccountBalanceResponse.create = function create(properties) {
                        return new AccountBalanceResponse(properties);
                    };
    
                    /**
                     * Encodes the specified AccountBalanceResponse message. Does not implicitly {@link ic_ledger.pb.v1.AccountBalanceResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceResponse} message AccountBalanceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountBalanceResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.balance != null && Object.hasOwnProperty.call(message, "balance"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.balance, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AccountBalanceResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.AccountBalanceResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountBalanceResponse} message AccountBalanceResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountBalanceResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AccountBalanceResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.AccountBalanceResponse} AccountBalanceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountBalanceResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.AccountBalanceResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.balance = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AccountBalanceResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.AccountBalanceResponse} AccountBalanceResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountBalanceResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AccountBalanceResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountBalanceResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.balance != null && message.hasOwnProperty("balance")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.balance);
                            if (error)
                                return "balance." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an AccountBalanceResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.AccountBalanceResponse} AccountBalanceResponse
                     */
                    AccountBalanceResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.AccountBalanceResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.AccountBalanceResponse();
                        if (object.balance != null) {
                            if (typeof object.balance !== "object")
                                throw TypeError(".ic_ledger.pb.v1.AccountBalanceResponse.balance: object expected");
                            message.balance = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.balance);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AccountBalanceResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {ic_ledger.pb.v1.AccountBalanceResponse} message AccountBalanceResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountBalanceResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.balance = null;
                        if (message.balance != null && message.hasOwnProperty("balance"))
                            object.balance = $root.ic_ledger.pb.v1.ICPTs.toObject(message.balance, options);
                        return object;
                    };
    
                    /**
                     * Converts this AccountBalanceResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountBalanceResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AccountBalanceResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.AccountBalanceResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AccountBalanceResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.AccountBalanceResponse";
                    };
    
                    return AccountBalanceResponse;
                })();
    
                v1.TipOfChainRequest = (function() {
    
                    /**
                     * Properties of a TipOfChainRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITipOfChainRequest
                     */
    
                    /**
                     * Constructs a new TipOfChainRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a TipOfChainRequest.
                     * @implements ITipOfChainRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITipOfChainRequest=} [properties] Properties to set
                     */
                    function TipOfChainRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new TipOfChainRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.TipOfChainRequest} TipOfChainRequest instance
                     */
                    TipOfChainRequest.create = function create(properties) {
                        return new TipOfChainRequest(properties);
                    };
    
                    /**
                     * Encodes the specified TipOfChainRequest message. Does not implicitly {@link ic_ledger.pb.v1.TipOfChainRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainRequest} message TipOfChainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TipOfChainRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TipOfChainRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.TipOfChainRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainRequest} message TipOfChainRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TipOfChainRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TipOfChainRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.TipOfChainRequest} TipOfChainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TipOfChainRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.TipOfChainRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TipOfChainRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.TipOfChainRequest} TipOfChainRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TipOfChainRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TipOfChainRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TipOfChainRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a TipOfChainRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.TipOfChainRequest} TipOfChainRequest
                     */
                    TipOfChainRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.TipOfChainRequest)
                            return object;
                        return new $root.ic_ledger.pb.v1.TipOfChainRequest();
                    };
    
                    /**
                     * Creates a plain object from a TipOfChainRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {ic_ledger.pb.v1.TipOfChainRequest} message TipOfChainRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TipOfChainRequest.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this TipOfChainRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TipOfChainRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TipOfChainRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.TipOfChainRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TipOfChainRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.TipOfChainRequest";
                    };
    
                    return TipOfChainRequest;
                })();
    
                v1.TipOfChainResponse = (function() {
    
                    /**
                     * Properties of a TipOfChainResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITipOfChainResponse
                     * @property {ic_ledger.pb.v1.ICertification|null} [certification] TipOfChainResponse certification
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [chainLength] TipOfChainResponse chainLength
                     */
    
                    /**
                     * Constructs a new TipOfChainResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a TipOfChainResponse.
                     * @implements ITipOfChainResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITipOfChainResponse=} [properties] Properties to set
                     */
                    function TipOfChainResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TipOfChainResponse certification.
                     * @member {ic_ledger.pb.v1.ICertification|null|undefined} certification
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @instance
                     */
                    TipOfChainResponse.prototype.certification = null;
    
                    /**
                     * TipOfChainResponse chainLength.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} chainLength
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @instance
                     */
                    TipOfChainResponse.prototype.chainLength = null;
    
                    /**
                     * Creates a new TipOfChainResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.TipOfChainResponse} TipOfChainResponse instance
                     */
                    TipOfChainResponse.create = function create(properties) {
                        return new TipOfChainResponse(properties);
                    };
    
                    /**
                     * Encodes the specified TipOfChainResponse message. Does not implicitly {@link ic_ledger.pb.v1.TipOfChainResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainResponse} message TipOfChainResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TipOfChainResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.certification != null && Object.hasOwnProperty.call(message, "certification"))
                            $root.ic_ledger.pb.v1.Certification.encode(message.certification, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.chainLength != null && Object.hasOwnProperty.call(message, "chainLength"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.chainLength, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TipOfChainResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.TipOfChainResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {ic_ledger.pb.v1.ITipOfChainResponse} message TipOfChainResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TipOfChainResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TipOfChainResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.TipOfChainResponse} TipOfChainResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TipOfChainResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.TipOfChainResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.certification = $root.ic_ledger.pb.v1.Certification.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.chainLength = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TipOfChainResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.TipOfChainResponse} TipOfChainResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TipOfChainResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TipOfChainResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TipOfChainResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.certification != null && message.hasOwnProperty("certification")) {
                            var error = $root.ic_ledger.pb.v1.Certification.verify(message.certification);
                            if (error)
                                return "certification." + error;
                        }
                        if (message.chainLength != null && message.hasOwnProperty("chainLength")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.chainLength);
                            if (error)
                                return "chainLength." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a TipOfChainResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.TipOfChainResponse} TipOfChainResponse
                     */
                    TipOfChainResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.TipOfChainResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.TipOfChainResponse();
                        if (object.certification != null) {
                            if (typeof object.certification !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TipOfChainResponse.certification: object expected");
                            message.certification = $root.ic_ledger.pb.v1.Certification.fromObject(object.certification);
                        }
                        if (object.chainLength != null) {
                            if (typeof object.chainLength !== "object")
                                throw TypeError(".ic_ledger.pb.v1.TipOfChainResponse.chainLength: object expected");
                            message.chainLength = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.chainLength);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TipOfChainResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {ic_ledger.pb.v1.TipOfChainResponse} message TipOfChainResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TipOfChainResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.certification = null;
                            object.chainLength = null;
                        }
                        if (message.certification != null && message.hasOwnProperty("certification"))
                            object.certification = $root.ic_ledger.pb.v1.Certification.toObject(message.certification, options);
                        if (message.chainLength != null && message.hasOwnProperty("chainLength"))
                            object.chainLength = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.chainLength, options);
                        return object;
                    };
    
                    /**
                     * Converts this TipOfChainResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TipOfChainResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TipOfChainResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.TipOfChainResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TipOfChainResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.TipOfChainResponse";
                    };
    
                    return TipOfChainResponse;
                })();
    
                v1.EncodedBlock = (function() {
    
                    /**
                     * Properties of an EncodedBlock.
                     * @memberof ic_ledger.pb.v1
                     * @interface IEncodedBlock
                     * @property {Uint8Array|null} [block] EncodedBlock block
                     */
    
                    /**
                     * Constructs a new EncodedBlock.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an EncodedBlock.
                     * @implements IEncodedBlock
                     * @constructor
                     * @param {ic_ledger.pb.v1.IEncodedBlock=} [properties] Properties to set
                     */
                    function EncodedBlock(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EncodedBlock block.
                     * @member {Uint8Array} block
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @instance
                     */
                    EncodedBlock.prototype.block = $util.newBuffer([]);
    
                    /**
                     * Creates a new EncodedBlock instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlock=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.EncodedBlock} EncodedBlock instance
                     */
                    EncodedBlock.create = function create(properties) {
                        return new EncodedBlock(properties);
                    };
    
                    /**
                     * Encodes the specified EncodedBlock message. Does not implicitly {@link ic_ledger.pb.v1.EncodedBlock.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlock} message EncodedBlock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EncodedBlock.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.block != null && Object.hasOwnProperty.call(message, "block"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.block);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EncodedBlock message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.EncodedBlock.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlock} message EncodedBlock message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EncodedBlock.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EncodedBlock message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.EncodedBlock} EncodedBlock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EncodedBlock.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.EncodedBlock();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.block = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EncodedBlock message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.EncodedBlock} EncodedBlock
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EncodedBlock.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EncodedBlock message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EncodedBlock.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.block != null && message.hasOwnProperty("block"))
                            if (!(message.block && typeof message.block.length === "number" || $util.isString(message.block)))
                                return "block: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates an EncodedBlock message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.EncodedBlock} EncodedBlock
                     */
                    EncodedBlock.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.EncodedBlock)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.EncodedBlock();
                        if (object.block != null)
                            if (typeof object.block === "string")
                                $util.base64.decode(object.block, message.block = $util.newBuffer($util.base64.length(object.block)), 0);
                            else if (object.block.length >= 0)
                                message.block = object.block;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EncodedBlock message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {ic_ledger.pb.v1.EncodedBlock} message EncodedBlock
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EncodedBlock.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.block = "";
                            else {
                                object.block = [];
                                if (options.bytes !== Array)
                                    object.block = $util.newBuffer(object.block);
                            }
                        if (message.block != null && message.hasOwnProperty("block"))
                            object.block = options.bytes === String ? $util.base64.encode(message.block, 0, message.block.length) : options.bytes === Array ? Array.prototype.slice.call(message.block) : message.block;
                        return object;
                    };
    
                    /**
                     * Converts this EncodedBlock to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EncodedBlock.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EncodedBlock
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.EncodedBlock
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EncodedBlock.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.EncodedBlock";
                    };
    
                    return EncodedBlock;
                })();
    
                v1.GetBlocksRequest = (function() {
    
                    /**
                     * Properties of a GetBlocksRequest.
                     * @memberof ic_ledger.pb.v1
                     * @interface IGetBlocksRequest
                     * @property {number|Long|null} [start] GetBlocksRequest start
                     * @property {number|Long|null} [length] GetBlocksRequest length
                     */
    
                    /**
                     * Constructs a new GetBlocksRequest.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a GetBlocksRequest.
                     * @implements IGetBlocksRequest
                     * @constructor
                     * @param {ic_ledger.pb.v1.IGetBlocksRequest=} [properties] Properties to set
                     */
                    function GetBlocksRequest(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetBlocksRequest start.
                     * @member {number|Long} start
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @instance
                     */
                    GetBlocksRequest.prototype.start = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * GetBlocksRequest length.
                     * @member {number|Long} length
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @instance
                     */
                    GetBlocksRequest.prototype.length = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new GetBlocksRequest instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksRequest=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.GetBlocksRequest} GetBlocksRequest instance
                     */
                    GetBlocksRequest.create = function create(properties) {
                        return new GetBlocksRequest(properties);
                    };
    
                    /**
                     * Encodes the specified GetBlocksRequest message. Does not implicitly {@link ic_ledger.pb.v1.GetBlocksRequest.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksRequest} message GetBlocksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlocksRequest.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.start != null && Object.hasOwnProperty.call(message, "start"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.start);
                        if (message.length != null && Object.hasOwnProperty.call(message, "length"))
                            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.length);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetBlocksRequest message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.GetBlocksRequest.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksRequest} message GetBlocksRequest message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlocksRequest.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetBlocksRequest message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.GetBlocksRequest} GetBlocksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlocksRequest.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.GetBlocksRequest();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.start = reader.uint64();
                                    break;
                                }
                            case 2: {
                                    message.length = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetBlocksRequest message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.GetBlocksRequest} GetBlocksRequest
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlocksRequest.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetBlocksRequest message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetBlocksRequest.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (!$util.isInteger(message.start) && !(message.start && $util.isInteger(message.start.low) && $util.isInteger(message.start.high)))
                                return "start: integer|Long expected";
                        if (message.length != null && message.hasOwnProperty("length"))
                            if (!$util.isInteger(message.length) && !(message.length && $util.isInteger(message.length.low) && $util.isInteger(message.length.high)))
                                return "length: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a GetBlocksRequest message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.GetBlocksRequest} GetBlocksRequest
                     */
                    GetBlocksRequest.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.GetBlocksRequest)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.GetBlocksRequest();
                        if (object.start != null)
                            if ($util.Long)
                                (message.start = $util.Long.fromValue(object.start)).unsigned = true;
                            else if (typeof object.start === "string")
                                message.start = parseInt(object.start, 10);
                            else if (typeof object.start === "number")
                                message.start = object.start;
                            else if (typeof object.start === "object")
                                message.start = new $util.LongBits(object.start.low >>> 0, object.start.high >>> 0).toNumber(true);
                        if (object.length != null)
                            if ($util.Long)
                                (message.length = $util.Long.fromValue(object.length)).unsigned = true;
                            else if (typeof object.length === "string")
                                message.length = parseInt(object.length, 10);
                            else if (typeof object.length === "number")
                                message.length = object.length;
                            else if (typeof object.length === "object")
                                message.length = new $util.LongBits(object.length.low >>> 0, object.length.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetBlocksRequest message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {ic_ledger.pb.v1.GetBlocksRequest} message GetBlocksRequest
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetBlocksRequest.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.start = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.start = options.longs === String ? "0" : 0;
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.length = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.length = options.longs === String ? "0" : 0;
                        }
                        if (message.start != null && message.hasOwnProperty("start"))
                            if (typeof message.start === "number")
                                object.start = options.longs === String ? String(message.start) : message.start;
                            else
                                object.start = options.longs === String ? $util.Long.prototype.toString.call(message.start) : options.longs === Number ? new $util.LongBits(message.start.low >>> 0, message.start.high >>> 0).toNumber(true) : message.start;
                        if (message.length != null && message.hasOwnProperty("length"))
                            if (typeof message.length === "number")
                                object.length = options.longs === String ? String(message.length) : message.length;
                            else
                                object.length = options.longs === String ? $util.Long.prototype.toString.call(message.length) : options.longs === Number ? new $util.LongBits(message.length.low >>> 0, message.length.high >>> 0).toNumber(true) : message.length;
                        return object;
                    };
    
                    /**
                     * Converts this GetBlocksRequest to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetBlocksRequest.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetBlocksRequest
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.GetBlocksRequest
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetBlocksRequest.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.GetBlocksRequest";
                    };
    
                    return GetBlocksRequest;
                })();
    
                v1.Refund = (function() {
    
                    /**
                     * Properties of a Refund.
                     * @memberof ic_ledger.pb.v1
                     * @interface IRefund
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [refund] Refund refund
                     * @property {string|null} [error] Refund error
                     */
    
                    /**
                     * Constructs a new Refund.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Refund.
                     * @implements IRefund
                     * @constructor
                     * @param {ic_ledger.pb.v1.IRefund=} [properties] Properties to set
                     */
                    function Refund(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Refund refund.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} refund
                     * @memberof ic_ledger.pb.v1.Refund
                     * @instance
                     */
                    Refund.prototype.refund = null;
    
                    /**
                     * Refund error.
                     * @member {string} error
                     * @memberof ic_ledger.pb.v1.Refund
                     * @instance
                     */
                    Refund.prototype.error = "";
    
                    /**
                     * Creates a new Refund instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {ic_ledger.pb.v1.IRefund=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Refund} Refund instance
                     */
                    Refund.create = function create(properties) {
                        return new Refund(properties);
                    };
    
                    /**
                     * Encodes the specified Refund message. Does not implicitly {@link ic_ledger.pb.v1.Refund.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {ic_ledger.pb.v1.IRefund} message Refund message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Refund.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.refund != null && Object.hasOwnProperty.call(message, "refund"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.refund, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 3, wireType 2 =*/26).string(message.error);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Refund message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Refund.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {ic_ledger.pb.v1.IRefund} message Refund message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Refund.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Refund message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Refund} Refund
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Refund.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Refund();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.refund = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.error = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Refund message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Refund} Refund
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Refund.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Refund message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Refund.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.refund != null && message.hasOwnProperty("refund")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.refund);
                            if (error)
                                return "refund." + error;
                        }
                        if (message.error != null && message.hasOwnProperty("error"))
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        return null;
                    };
    
                    /**
                     * Creates a Refund message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Refund} Refund
                     */
                    Refund.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Refund)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Refund();
                        if (object.refund != null) {
                            if (typeof object.refund !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Refund.refund: object expected");
                            message.refund = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.refund);
                        }
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Refund message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {ic_ledger.pb.v1.Refund} message Refund
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Refund.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.refund = null;
                            object.error = "";
                        }
                        if (message.refund != null && message.hasOwnProperty("refund"))
                            object.refund = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.refund, options);
                        if (message.error != null && message.hasOwnProperty("error"))
                            object.error = message.error;
                        return object;
                    };
    
                    /**
                     * Converts this Refund to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Refund
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Refund.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Refund
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Refund
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Refund.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Refund";
                    };
    
                    return Refund;
                })();
    
                v1.ToppedUp = (function() {
    
                    /**
                     * Properties of a ToppedUp.
                     * @memberof ic_ledger.pb.v1
                     * @interface IToppedUp
                     */
    
                    /**
                     * Constructs a new ToppedUp.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a ToppedUp.
                     * @implements IToppedUp
                     * @constructor
                     * @param {ic_ledger.pb.v1.IToppedUp=} [properties] Properties to set
                     */
                    function ToppedUp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Creates a new ToppedUp instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {ic_ledger.pb.v1.IToppedUp=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.ToppedUp} ToppedUp instance
                     */
                    ToppedUp.create = function create(properties) {
                        return new ToppedUp(properties);
                    };
    
                    /**
                     * Encodes the specified ToppedUp message. Does not implicitly {@link ic_ledger.pb.v1.ToppedUp.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {ic_ledger.pb.v1.IToppedUp} message ToppedUp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ToppedUp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ToppedUp message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.ToppedUp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {ic_ledger.pb.v1.IToppedUp} message ToppedUp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ToppedUp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ToppedUp message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.ToppedUp} ToppedUp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ToppedUp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.ToppedUp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ToppedUp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.ToppedUp} ToppedUp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ToppedUp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ToppedUp message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ToppedUp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        return null;
                    };
    
                    /**
                     * Creates a ToppedUp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.ToppedUp} ToppedUp
                     */
                    ToppedUp.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.ToppedUp)
                            return object;
                        return new $root.ic_ledger.pb.v1.ToppedUp();
                    };
    
                    /**
                     * Creates a plain object from a ToppedUp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {ic_ledger.pb.v1.ToppedUp} message ToppedUp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ToppedUp.toObject = function toObject() {
                        return {};
                    };
    
                    /**
                     * Converts this ToppedUp to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ToppedUp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ToppedUp
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.ToppedUp
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ToppedUp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.ToppedUp";
                    };
    
                    return ToppedUp;
                })();
    
                v1.EncodedBlocks = (function() {
    
                    /**
                     * Properties of an EncodedBlocks.
                     * @memberof ic_ledger.pb.v1
                     * @interface IEncodedBlocks
                     * @property {Array.<ic_ledger.pb.v1.IEncodedBlock>|null} [blocks] EncodedBlocks blocks
                     */
    
                    /**
                     * Constructs a new EncodedBlocks.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an EncodedBlocks.
                     * @implements IEncodedBlocks
                     * @constructor
                     * @param {ic_ledger.pb.v1.IEncodedBlocks=} [properties] Properties to set
                     */
                    function EncodedBlocks(properties) {
                        this.blocks = [];
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * EncodedBlocks blocks.
                     * @member {Array.<ic_ledger.pb.v1.IEncodedBlock>} blocks
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @instance
                     */
                    EncodedBlocks.prototype.blocks = $util.emptyArray;
    
                    /**
                     * Creates a new EncodedBlocks instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlocks=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.EncodedBlocks} EncodedBlocks instance
                     */
                    EncodedBlocks.create = function create(properties) {
                        return new EncodedBlocks(properties);
                    };
    
                    /**
                     * Encodes the specified EncodedBlocks message. Does not implicitly {@link ic_ledger.pb.v1.EncodedBlocks.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlocks} message EncodedBlocks message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EncodedBlocks.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blocks != null && message.blocks.length)
                            for (var i = 0; i < message.blocks.length; ++i)
                                $root.ic_ledger.pb.v1.EncodedBlock.encode(message.blocks[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified EncodedBlocks message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.EncodedBlocks.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {ic_ledger.pb.v1.IEncodedBlocks} message EncodedBlocks message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    EncodedBlocks.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an EncodedBlocks message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.EncodedBlocks} EncodedBlocks
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EncodedBlocks.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.EncodedBlocks();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    if (!(message.blocks && message.blocks.length))
                                        message.blocks = [];
                                    message.blocks.push($root.ic_ledger.pb.v1.EncodedBlock.decode(reader, reader.uint32()));
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an EncodedBlocks message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.EncodedBlocks} EncodedBlocks
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    EncodedBlocks.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an EncodedBlocks message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    EncodedBlocks.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.blocks != null && message.hasOwnProperty("blocks")) {
                            if (!Array.isArray(message.blocks))
                                return "blocks: array expected";
                            for (var i = 0; i < message.blocks.length; ++i) {
                                var error = $root.ic_ledger.pb.v1.EncodedBlock.verify(message.blocks[i]);
                                if (error)
                                    return "blocks." + error;
                            }
                        }
                        return null;
                    };
    
                    /**
                     * Creates an EncodedBlocks message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.EncodedBlocks} EncodedBlocks
                     */
                    EncodedBlocks.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.EncodedBlocks)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.EncodedBlocks();
                        if (object.blocks) {
                            if (!Array.isArray(object.blocks))
                                throw TypeError(".ic_ledger.pb.v1.EncodedBlocks.blocks: array expected");
                            message.blocks = [];
                            for (var i = 0; i < object.blocks.length; ++i) {
                                if (typeof object.blocks[i] !== "object")
                                    throw TypeError(".ic_ledger.pb.v1.EncodedBlocks.blocks: object expected");
                                message.blocks[i] = $root.ic_ledger.pb.v1.EncodedBlock.fromObject(object.blocks[i]);
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an EncodedBlocks message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {ic_ledger.pb.v1.EncodedBlocks} message EncodedBlocks
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    EncodedBlocks.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.arrays || options.defaults)
                            object.blocks = [];
                        if (message.blocks && message.blocks.length) {
                            object.blocks = [];
                            for (var j = 0; j < message.blocks.length; ++j)
                                object.blocks[j] = $root.ic_ledger.pb.v1.EncodedBlock.toObject(message.blocks[j], options);
                        }
                        return object;
                    };
    
                    /**
                     * Converts this EncodedBlocks to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    EncodedBlocks.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for EncodedBlocks
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.EncodedBlocks
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    EncodedBlocks.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.EncodedBlocks";
                    };
    
                    return EncodedBlocks;
                })();
    
                v1.GetBlocksResponse = (function() {
    
                    /**
                     * Properties of a GetBlocksResponse.
                     * @memberof ic_ledger.pb.v1
                     * @interface IGetBlocksResponse
                     * @property {ic_ledger.pb.v1.IEncodedBlocks|null} [blocks] GetBlocksResponse blocks
                     * @property {string|null} [error] GetBlocksResponse error
                     */
    
                    /**
                     * Constructs a new GetBlocksResponse.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a GetBlocksResponse.
                     * @implements IGetBlocksResponse
                     * @constructor
                     * @param {ic_ledger.pb.v1.IGetBlocksResponse=} [properties] Properties to set
                     */
                    function GetBlocksResponse(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * GetBlocksResponse blocks.
                     * @member {ic_ledger.pb.v1.IEncodedBlocks|null|undefined} blocks
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @instance
                     */
                    GetBlocksResponse.prototype.blocks = null;
    
                    /**
                     * GetBlocksResponse error.
                     * @member {string|null|undefined} error
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @instance
                     */
                    GetBlocksResponse.prototype.error = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * GetBlocksResponse getBlocksContent.
                     * @member {"blocks"|"error"|undefined} getBlocksContent
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @instance
                     */
                    Object.defineProperty(GetBlocksResponse.prototype, "getBlocksContent", {
                        get: $util.oneOfGetter($oneOfFields = ["blocks", "error"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new GetBlocksResponse instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksResponse=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.GetBlocksResponse} GetBlocksResponse instance
                     */
                    GetBlocksResponse.create = function create(properties) {
                        return new GetBlocksResponse(properties);
                    };
    
                    /**
                     * Encodes the specified GetBlocksResponse message. Does not implicitly {@link ic_ledger.pb.v1.GetBlocksResponse.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksResponse} message GetBlocksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlocksResponse.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.blocks != null && Object.hasOwnProperty.call(message, "blocks"))
                            $root.ic_ledger.pb.v1.EncodedBlocks.encode(message.blocks, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.error != null && Object.hasOwnProperty.call(message, "error"))
                            writer.uint32(/* id 2, wireType 2 =*/18).string(message.error);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified GetBlocksResponse message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.GetBlocksResponse.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {ic_ledger.pb.v1.IGetBlocksResponse} message GetBlocksResponse message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    GetBlocksResponse.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a GetBlocksResponse message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.GetBlocksResponse} GetBlocksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlocksResponse.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.GetBlocksResponse();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.blocks = $root.ic_ledger.pb.v1.EncodedBlocks.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.error = reader.string();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a GetBlocksResponse message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.GetBlocksResponse} GetBlocksResponse
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    GetBlocksResponse.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a GetBlocksResponse message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    GetBlocksResponse.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.blocks != null && message.hasOwnProperty("blocks")) {
                            properties.getBlocksContent = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.EncodedBlocks.verify(message.blocks);
                                if (error)
                                    return "blocks." + error;
                            }
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            if (properties.getBlocksContent === 1)
                                return "getBlocksContent: multiple values";
                            properties.getBlocksContent = 1;
                            if (!$util.isString(message.error))
                                return "error: string expected";
                        }
                        return null;
                    };
    
                    /**
                     * Creates a GetBlocksResponse message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.GetBlocksResponse} GetBlocksResponse
                     */
                    GetBlocksResponse.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.GetBlocksResponse)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.GetBlocksResponse();
                        if (object.blocks != null) {
                            if (typeof object.blocks !== "object")
                                throw TypeError(".ic_ledger.pb.v1.GetBlocksResponse.blocks: object expected");
                            message.blocks = $root.ic_ledger.pb.v1.EncodedBlocks.fromObject(object.blocks);
                        }
                        if (object.error != null)
                            message.error = String(object.error);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a GetBlocksResponse message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {ic_ledger.pb.v1.GetBlocksResponse} message GetBlocksResponse
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    GetBlocksResponse.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (message.blocks != null && message.hasOwnProperty("blocks")) {
                            object.blocks = $root.ic_ledger.pb.v1.EncodedBlocks.toObject(message.blocks, options);
                            if (options.oneofs)
                                object.getBlocksContent = "blocks";
                        }
                        if (message.error != null && message.hasOwnProperty("error")) {
                            object.error = message.error;
                            if (options.oneofs)
                                object.getBlocksContent = "error";
                        }
                        return object;
                    };
    
                    /**
                     * Converts this GetBlocksResponse to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    GetBlocksResponse.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for GetBlocksResponse
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.GetBlocksResponse
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    GetBlocksResponse.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.GetBlocksResponse";
                    };
    
                    return GetBlocksResponse;
                })();
    
                v1.ICPTs = (function() {
    
                    /**
                     * Properties of a ICPTs.
                     * @memberof ic_ledger.pb.v1
                     * @interface IICPTs
                     * @property {number|Long|null} [e8s] ICPTs e8s
                     */
    
                    /**
                     * Constructs a new ICPTs.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a ICPTs.
                     * @implements IICPTs
                     * @constructor
                     * @param {ic_ledger.pb.v1.IICPTs=} [properties] Properties to set
                     */
                    function ICPTs(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * ICPTs e8s.
                     * @member {number|Long} e8s
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @instance
                     */
                    ICPTs.prototype.e8s = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new ICPTs instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {ic_ledger.pb.v1.IICPTs=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.ICPTs} ICPTs instance
                     */
                    ICPTs.create = function create(properties) {
                        return new ICPTs(properties);
                    };
    
                    /**
                     * Encodes the specified ICPTs message. Does not implicitly {@link ic_ledger.pb.v1.ICPTs.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {ic_ledger.pb.v1.IICPTs} message ICPTs message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ICPTs.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.e8s != null && Object.hasOwnProperty.call(message, "e8s"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.e8s);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified ICPTs message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.ICPTs.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {ic_ledger.pb.v1.IICPTs} message ICPTs message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    ICPTs.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a ICPTs message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.ICPTs} ICPTs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ICPTs.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.ICPTs();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.e8s = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a ICPTs message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.ICPTs} ICPTs
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    ICPTs.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a ICPTs message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    ICPTs.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.e8s != null && message.hasOwnProperty("e8s"))
                            if (!$util.isInteger(message.e8s) && !(message.e8s && $util.isInteger(message.e8s.low) && $util.isInteger(message.e8s.high)))
                                return "e8s: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a ICPTs message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.ICPTs} ICPTs
                     */
                    ICPTs.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.ICPTs)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.ICPTs();
                        if (object.e8s != null)
                            if ($util.Long)
                                (message.e8s = $util.Long.fromValue(object.e8s)).unsigned = true;
                            else if (typeof object.e8s === "string")
                                message.e8s = parseInt(object.e8s, 10);
                            else if (typeof object.e8s === "number")
                                message.e8s = object.e8s;
                            else if (typeof object.e8s === "object")
                                message.e8s = new $util.LongBits(object.e8s.low >>> 0, object.e8s.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a ICPTs message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {ic_ledger.pb.v1.ICPTs} message ICPTs
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    ICPTs.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.e8s = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.e8s = options.longs === String ? "0" : 0;
                        if (message.e8s != null && message.hasOwnProperty("e8s"))
                            if (typeof message.e8s === "number")
                                object.e8s = options.longs === String ? String(message.e8s) : message.e8s;
                            else
                                object.e8s = options.longs === String ? $util.Long.prototype.toString.call(message.e8s) : options.longs === Number ? new $util.LongBits(message.e8s.low >>> 0, message.e8s.high >>> 0).toNumber(true) : message.e8s;
                        return object;
                    };
    
                    /**
                     * Converts this ICPTs to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    ICPTs.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for ICPTs
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.ICPTs
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    ICPTs.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.ICPTs";
                    };
    
                    return ICPTs;
                })();
    
                v1.Payment = (function() {
    
                    /**
                     * Properties of a Payment.
                     * @memberof ic_ledger.pb.v1
                     * @interface IPayment
                     * @property {ic_ledger.pb.v1.IICPTs|null} [receiverGets] Payment receiverGets
                     */
    
                    /**
                     * Constructs a new Payment.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Payment.
                     * @implements IPayment
                     * @constructor
                     * @param {ic_ledger.pb.v1.IPayment=} [properties] Properties to set
                     */
                    function Payment(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Payment receiverGets.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} receiverGets
                     * @memberof ic_ledger.pb.v1.Payment
                     * @instance
                     */
                    Payment.prototype.receiverGets = null;
    
                    /**
                     * Creates a new Payment instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {ic_ledger.pb.v1.IPayment=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Payment} Payment instance
                     */
                    Payment.create = function create(properties) {
                        return new Payment(properties);
                    };
    
                    /**
                     * Encodes the specified Payment message. Does not implicitly {@link ic_ledger.pb.v1.Payment.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {ic_ledger.pb.v1.IPayment} message Payment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Payment.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.receiverGets != null && Object.hasOwnProperty.call(message, "receiverGets"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.receiverGets, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Payment message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Payment.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {ic_ledger.pb.v1.IPayment} message Payment message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Payment.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Payment message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Payment} Payment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Payment.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Payment();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.receiverGets = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Payment message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Payment} Payment
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Payment.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Payment message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Payment.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.receiverGets != null && message.hasOwnProperty("receiverGets")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.receiverGets);
                            if (error)
                                return "receiverGets." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Payment message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Payment} Payment
                     */
                    Payment.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Payment)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Payment();
                        if (object.receiverGets != null) {
                            if (typeof object.receiverGets !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Payment.receiverGets: object expected");
                            message.receiverGets = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.receiverGets);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Payment message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {ic_ledger.pb.v1.Payment} message Payment
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Payment.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            object.receiverGets = null;
                        if (message.receiverGets != null && message.hasOwnProperty("receiverGets"))
                            object.receiverGets = $root.ic_ledger.pb.v1.ICPTs.toObject(message.receiverGets, options);
                        return object;
                    };
    
                    /**
                     * Converts this Payment to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Payment
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Payment.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Payment
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Payment
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Payment.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Payment";
                    };
    
                    return Payment;
                })();
    
                v1.BlockHeight = (function() {
    
                    /**
                     * Properties of a BlockHeight.
                     * @memberof ic_ledger.pb.v1
                     * @interface IBlockHeight
                     * @property {number|Long|null} [height] BlockHeight height
                     */
    
                    /**
                     * Constructs a new BlockHeight.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a BlockHeight.
                     * @implements IBlockHeight
                     * @constructor
                     * @param {ic_ledger.pb.v1.IBlockHeight=} [properties] Properties to set
                     */
                    function BlockHeight(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * BlockHeight height.
                     * @member {number|Long} height
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @instance
                     */
                    BlockHeight.prototype.height = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new BlockHeight instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {ic_ledger.pb.v1.IBlockHeight=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.BlockHeight} BlockHeight instance
                     */
                    BlockHeight.create = function create(properties) {
                        return new BlockHeight(properties);
                    };
    
                    /**
                     * Encodes the specified BlockHeight message. Does not implicitly {@link ic_ledger.pb.v1.BlockHeight.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {ic_ledger.pb.v1.IBlockHeight} message BlockHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockHeight.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.height != null && Object.hasOwnProperty.call(message, "height"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.height);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified BlockHeight message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.BlockHeight.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {ic_ledger.pb.v1.IBlockHeight} message BlockHeight message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    BlockHeight.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a BlockHeight message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.BlockHeight} BlockHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockHeight.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.BlockHeight();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.height = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a BlockHeight message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.BlockHeight} BlockHeight
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    BlockHeight.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a BlockHeight message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    BlockHeight.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.height != null && message.hasOwnProperty("height"))
                            if (!$util.isInteger(message.height) && !(message.height && $util.isInteger(message.height.low) && $util.isInteger(message.height.high)))
                                return "height: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a BlockHeight message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.BlockHeight} BlockHeight
                     */
                    BlockHeight.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.BlockHeight)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.BlockHeight();
                        if (object.height != null)
                            if ($util.Long)
                                (message.height = $util.Long.fromValue(object.height)).unsigned = true;
                            else if (typeof object.height === "string")
                                message.height = parseInt(object.height, 10);
                            else if (typeof object.height === "number")
                                message.height = object.height;
                            else if (typeof object.height === "object")
                                message.height = new $util.LongBits(object.height.low >>> 0, object.height.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a BlockHeight message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {ic_ledger.pb.v1.BlockHeight} message BlockHeight
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    BlockHeight.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.height = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.height = options.longs === String ? "0" : 0;
                        if (message.height != null && message.hasOwnProperty("height"))
                            if (typeof message.height === "number")
                                object.height = options.longs === String ? String(message.height) : message.height;
                            else
                                object.height = options.longs === String ? $util.Long.prototype.toString.call(message.height) : options.longs === Number ? new $util.LongBits(message.height.low >>> 0, message.height.high >>> 0).toNumber(true) : message.height;
                        return object;
                    };
    
                    /**
                     * Converts this BlockHeight to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    BlockHeight.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for BlockHeight
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.BlockHeight
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    BlockHeight.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.BlockHeight";
                    };
    
                    return BlockHeight;
                })();
    
                v1.Block = (function() {
    
                    /**
                     * Properties of a Block.
                     * @memberof ic_ledger.pb.v1
                     * @interface IBlock
                     * @property {ic_ledger.pb.v1.IHash|null} [parentHash] Block parentHash
                     * @property {ic_ledger.pb.v1.ITimeStamp|null} [timestamp] Block timestamp
                     * @property {ic_ledger.pb.v1.ITransaction|null} [transaction] Block transaction
                     */
    
                    /**
                     * Constructs a new Block.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Block.
                     * @implements IBlock
                     * @constructor
                     * @param {ic_ledger.pb.v1.IBlock=} [properties] Properties to set
                     */
                    function Block(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Block parentHash.
                     * @member {ic_ledger.pb.v1.IHash|null|undefined} parentHash
                     * @memberof ic_ledger.pb.v1.Block
                     * @instance
                     */
                    Block.prototype.parentHash = null;
    
                    /**
                     * Block timestamp.
                     * @member {ic_ledger.pb.v1.ITimeStamp|null|undefined} timestamp
                     * @memberof ic_ledger.pb.v1.Block
                     * @instance
                     */
                    Block.prototype.timestamp = null;
    
                    /**
                     * Block transaction.
                     * @member {ic_ledger.pb.v1.ITransaction|null|undefined} transaction
                     * @memberof ic_ledger.pb.v1.Block
                     * @instance
                     */
                    Block.prototype.transaction = null;
    
                    /**
                     * Creates a new Block instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {ic_ledger.pb.v1.IBlock=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Block} Block instance
                     */
                    Block.create = function create(properties) {
                        return new Block(properties);
                    };
    
                    /**
                     * Encodes the specified Block message. Does not implicitly {@link ic_ledger.pb.v1.Block.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {ic_ledger.pb.v1.IBlock} message Block message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Block.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.parentHash != null && Object.hasOwnProperty.call(message, "parentHash"))
                            $root.ic_ledger.pb.v1.Hash.encode(message.parentHash, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.timestamp != null && Object.hasOwnProperty.call(message, "timestamp"))
                            $root.ic_ledger.pb.v1.TimeStamp.encode(message.timestamp, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.transaction != null && Object.hasOwnProperty.call(message, "transaction"))
                            $root.ic_ledger.pb.v1.Transaction.encode(message.transaction, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Block message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Block.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {ic_ledger.pb.v1.IBlock} message Block message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Block.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Block message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Block} Block
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Block.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Block();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.parentHash = $root.ic_ledger.pb.v1.Hash.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.timestamp = $root.ic_ledger.pb.v1.TimeStamp.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.transaction = $root.ic_ledger.pb.v1.Transaction.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Block message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Block} Block
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Block.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Block message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Block.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.parentHash != null && message.hasOwnProperty("parentHash")) {
                            var error = $root.ic_ledger.pb.v1.Hash.verify(message.parentHash);
                            if (error)
                                return "parentHash." + error;
                        }
                        if (message.timestamp != null && message.hasOwnProperty("timestamp")) {
                            var error = $root.ic_ledger.pb.v1.TimeStamp.verify(message.timestamp);
                            if (error)
                                return "timestamp." + error;
                        }
                        if (message.transaction != null && message.hasOwnProperty("transaction")) {
                            var error = $root.ic_ledger.pb.v1.Transaction.verify(message.transaction);
                            if (error)
                                return "transaction." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Block message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Block} Block
                     */
                    Block.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Block)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Block();
                        if (object.parentHash != null) {
                            if (typeof object.parentHash !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Block.parentHash: object expected");
                            message.parentHash = $root.ic_ledger.pb.v1.Hash.fromObject(object.parentHash);
                        }
                        if (object.timestamp != null) {
                            if (typeof object.timestamp !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Block.timestamp: object expected");
                            message.timestamp = $root.ic_ledger.pb.v1.TimeStamp.fromObject(object.timestamp);
                        }
                        if (object.transaction != null) {
                            if (typeof object.transaction !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Block.transaction: object expected");
                            message.transaction = $root.ic_ledger.pb.v1.Transaction.fromObject(object.transaction);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Block message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {ic_ledger.pb.v1.Block} message Block
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Block.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.parentHash = null;
                            object.timestamp = null;
                            object.transaction = null;
                        }
                        if (message.parentHash != null && message.hasOwnProperty("parentHash"))
                            object.parentHash = $root.ic_ledger.pb.v1.Hash.toObject(message.parentHash, options);
                        if (message.timestamp != null && message.hasOwnProperty("timestamp"))
                            object.timestamp = $root.ic_ledger.pb.v1.TimeStamp.toObject(message.timestamp, options);
                        if (message.transaction != null && message.hasOwnProperty("transaction"))
                            object.transaction = $root.ic_ledger.pb.v1.Transaction.toObject(message.transaction, options);
                        return object;
                    };
    
                    /**
                     * Converts this Block to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Block
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Block.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Block
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Block
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Block.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Block";
                    };
    
                    return Block;
                })();
    
                v1.Hash = (function() {
    
                    /**
                     * Properties of a Hash.
                     * @memberof ic_ledger.pb.v1
                     * @interface IHash
                     * @property {Uint8Array|null} [hash] Hash hash
                     */
    
                    /**
                     * Constructs a new Hash.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Hash.
                     * @implements IHash
                     * @constructor
                     * @param {ic_ledger.pb.v1.IHash=} [properties] Properties to set
                     */
                    function Hash(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Hash hash.
                     * @member {Uint8Array} hash
                     * @memberof ic_ledger.pb.v1.Hash
                     * @instance
                     */
                    Hash.prototype.hash = $util.newBuffer([]);
    
                    /**
                     * Creates a new Hash instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {ic_ledger.pb.v1.IHash=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Hash} Hash instance
                     */
                    Hash.create = function create(properties) {
                        return new Hash(properties);
                    };
    
                    /**
                     * Encodes the specified Hash message. Does not implicitly {@link ic_ledger.pb.v1.Hash.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {ic_ledger.pb.v1.IHash} message Hash message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hash.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Hash message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Hash.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {ic_ledger.pb.v1.IHash} message Hash message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Hash.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Hash message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Hash} Hash
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hash.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Hash();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.hash = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Hash message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Hash} Hash
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Hash.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Hash message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Hash.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                                return "hash: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Hash message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Hash} Hash
                     */
                    Hash.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Hash)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Hash();
                        if (object.hash != null)
                            if (typeof object.hash === "string")
                                $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                            else if (object.hash.length >= 0)
                                message.hash = object.hash;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Hash message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {ic_ledger.pb.v1.Hash} message Hash
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Hash.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.hash = "";
                            else {
                                object.hash = [];
                                if (options.bytes !== Array)
                                    object.hash = $util.newBuffer(object.hash);
                            }
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                        return object;
                    };
    
                    /**
                     * Converts this Hash to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Hash
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Hash.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Hash
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Hash
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Hash.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Hash";
                    };
    
                    return Hash;
                })();
    
                v1.Account = (function() {
    
                    /**
                     * Properties of an Account.
                     * @memberof ic_ledger.pb.v1
                     * @interface IAccount
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [identifier] Account identifier
                     * @property {ic_ledger.pb.v1.IICPTs|null} [balance] Account balance
                     */
    
                    /**
                     * Constructs a new Account.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an Account.
                     * @implements IAccount
                     * @constructor
                     * @param {ic_ledger.pb.v1.IAccount=} [properties] Properties to set
                     */
                    function Account(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Account identifier.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} identifier
                     * @memberof ic_ledger.pb.v1.Account
                     * @instance
                     */
                    Account.prototype.identifier = null;
    
                    /**
                     * Account balance.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} balance
                     * @memberof ic_ledger.pb.v1.Account
                     * @instance
                     */
                    Account.prototype.balance = null;
    
                    /**
                     * Creates a new Account instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {ic_ledger.pb.v1.IAccount=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Account} Account instance
                     */
                    Account.create = function create(properties) {
                        return new Account(properties);
                    };
    
                    /**
                     * Encodes the specified Account message. Does not implicitly {@link ic_ledger.pb.v1.Account.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {ic_ledger.pb.v1.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.identifier != null && Object.hasOwnProperty.call(message, "identifier"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.identifier, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.balance != null && Object.hasOwnProperty.call(message, "balance"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.balance, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Account message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Account.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {ic_ledger.pb.v1.IAccount} message Account message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Account.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an Account message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Account();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.identifier = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.balance = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an Account message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Account} Account
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Account.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an Account message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Account.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.identifier != null && message.hasOwnProperty("identifier")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.identifier);
                            if (error)
                                return "identifier." + error;
                        }
                        if (message.balance != null && message.hasOwnProperty("balance")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.balance);
                            if (error)
                                return "balance." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates an Account message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Account} Account
                     */
                    Account.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Account)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Account();
                        if (object.identifier != null) {
                            if (typeof object.identifier !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Account.identifier: object expected");
                            message.identifier = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.identifier);
                        }
                        if (object.balance != null) {
                            if (typeof object.balance !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Account.balance: object expected");
                            message.balance = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.balance);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an Account message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {ic_ledger.pb.v1.Account} message Account
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Account.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.identifier = null;
                            object.balance = null;
                        }
                        if (message.identifier != null && message.hasOwnProperty("identifier"))
                            object.identifier = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.identifier, options);
                        if (message.balance != null && message.hasOwnProperty("balance"))
                            object.balance = $root.ic_ledger.pb.v1.ICPTs.toObject(message.balance, options);
                        return object;
                    };
    
                    /**
                     * Converts this Account to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Account
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Account.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Account
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Account
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Account.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Account";
                    };
    
                    return Account;
                })();
    
                v1.Transaction = (function() {
    
                    /**
                     * Properties of a Transaction.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITransaction
                     * @property {ic_ledger.pb.v1.IBurn|null} [burn] Transaction burn
                     * @property {ic_ledger.pb.v1.IMint|null} [mint] Transaction mint
                     * @property {ic_ledger.pb.v1.ISend|null} [send] Transaction send
                     * @property {ic_ledger.pb.v1.IMemo|null} [memo] Transaction memo
                     * @property {ic_ledger.pb.v1.IBlockHeight|null} [createdAt] Transaction createdAt
                     * @property {ic_ledger.pb.v1.ITimeStamp|null} [createdAtTime] Transaction createdAtTime
                     */
    
                    /**
                     * Constructs a new Transaction.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Transaction.
                     * @implements ITransaction
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITransaction=} [properties] Properties to set
                     */
                    function Transaction(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Transaction burn.
                     * @member {ic_ledger.pb.v1.IBurn|null|undefined} burn
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.burn = null;
    
                    /**
                     * Transaction mint.
                     * @member {ic_ledger.pb.v1.IMint|null|undefined} mint
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.mint = null;
    
                    /**
                     * Transaction send.
                     * @member {ic_ledger.pb.v1.ISend|null|undefined} send
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.send = null;
    
                    /**
                     * Transaction memo.
                     * @member {ic_ledger.pb.v1.IMemo|null|undefined} memo
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.memo = null;
    
                    /**
                     * Transaction createdAt.
                     * @member {ic_ledger.pb.v1.IBlockHeight|null|undefined} createdAt
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.createdAt = null;
    
                    /**
                     * Transaction createdAtTime.
                     * @member {ic_ledger.pb.v1.ITimeStamp|null|undefined} createdAtTime
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Transaction.prototype.createdAtTime = null;
    
                    // OneOf field names bound to virtual getters and setters
                    var $oneOfFields;
    
                    /**
                     * Transaction transfer.
                     * @member {"burn"|"mint"|"send"|undefined} transfer
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     */
                    Object.defineProperty(Transaction.prototype, "transfer", {
                        get: $util.oneOfGetter($oneOfFields = ["burn", "mint", "send"]),
                        set: $util.oneOfSetter($oneOfFields)
                    });
    
                    /**
                     * Creates a new Transaction instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {ic_ledger.pb.v1.ITransaction=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Transaction} Transaction instance
                     */
                    Transaction.create = function create(properties) {
                        return new Transaction(properties);
                    };
    
                    /**
                     * Encodes the specified Transaction message. Does not implicitly {@link ic_ledger.pb.v1.Transaction.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {ic_ledger.pb.v1.ITransaction} message Transaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transaction.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.burn != null && Object.hasOwnProperty.call(message, "burn"))
                            $root.ic_ledger.pb.v1.Burn.encode(message.burn, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.mint != null && Object.hasOwnProperty.call(message, "mint"))
                            $root.ic_ledger.pb.v1.Mint.encode(message.mint, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.send != null && Object.hasOwnProperty.call(message, "send"))
                            $root.ic_ledger.pb.v1.Send.encode(message.send, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                            $root.ic_ledger.pb.v1.Memo.encode(message.memo, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        if (message.createdAt != null && Object.hasOwnProperty.call(message, "createdAt"))
                            $root.ic_ledger.pb.v1.BlockHeight.encode(message.createdAt, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();
                        if (message.createdAtTime != null && Object.hasOwnProperty.call(message, "createdAtTime"))
                            $root.ic_ledger.pb.v1.TimeStamp.encode(message.createdAtTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Transaction message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Transaction.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {ic_ledger.pb.v1.ITransaction} message Transaction message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Transaction.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Transaction message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Transaction} Transaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transaction.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Transaction();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.burn = $root.ic_ledger.pb.v1.Burn.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.mint = $root.ic_ledger.pb.v1.Mint.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.send = $root.ic_ledger.pb.v1.Send.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.memo = $root.ic_ledger.pb.v1.Memo.decode(reader, reader.uint32());
                                    break;
                                }
                            case 5: {
                                    message.createdAt = $root.ic_ledger.pb.v1.BlockHeight.decode(reader, reader.uint32());
                                    break;
                                }
                            case 6: {
                                    message.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Transaction message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Transaction} Transaction
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Transaction.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Transaction message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Transaction.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        var properties = {};
                        if (message.burn != null && message.hasOwnProperty("burn")) {
                            properties.transfer = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.Burn.verify(message.burn);
                                if (error)
                                    return "burn." + error;
                            }
                        }
                        if (message.mint != null && message.hasOwnProperty("mint")) {
                            if (properties.transfer === 1)
                                return "transfer: multiple values";
                            properties.transfer = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.Mint.verify(message.mint);
                                if (error)
                                    return "mint." + error;
                            }
                        }
                        if (message.send != null && message.hasOwnProperty("send")) {
                            if (properties.transfer === 1)
                                return "transfer: multiple values";
                            properties.transfer = 1;
                            {
                                var error = $root.ic_ledger.pb.v1.Send.verify(message.send);
                                if (error)
                                    return "send." + error;
                            }
                        }
                        if (message.memo != null && message.hasOwnProperty("memo")) {
                            var error = $root.ic_ledger.pb.v1.Memo.verify(message.memo);
                            if (error)
                                return "memo." + error;
                        }
                        if (message.createdAt != null && message.hasOwnProperty("createdAt")) {
                            var error = $root.ic_ledger.pb.v1.BlockHeight.verify(message.createdAt);
                            if (error)
                                return "createdAt." + error;
                        }
                        if (message.createdAtTime != null && message.hasOwnProperty("createdAtTime")) {
                            var error = $root.ic_ledger.pb.v1.TimeStamp.verify(message.createdAtTime);
                            if (error)
                                return "createdAtTime." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Transaction message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Transaction} Transaction
                     */
                    Transaction.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Transaction)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Transaction();
                        if (object.burn != null) {
                            if (typeof object.burn !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.burn: object expected");
                            message.burn = $root.ic_ledger.pb.v1.Burn.fromObject(object.burn);
                        }
                        if (object.mint != null) {
                            if (typeof object.mint !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.mint: object expected");
                            message.mint = $root.ic_ledger.pb.v1.Mint.fromObject(object.mint);
                        }
                        if (object.send != null) {
                            if (typeof object.send !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.send: object expected");
                            message.send = $root.ic_ledger.pb.v1.Send.fromObject(object.send);
                        }
                        if (object.memo != null) {
                            if (typeof object.memo !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.memo: object expected");
                            message.memo = $root.ic_ledger.pb.v1.Memo.fromObject(object.memo);
                        }
                        if (object.createdAt != null) {
                            if (typeof object.createdAt !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.createdAt: object expected");
                            message.createdAt = $root.ic_ledger.pb.v1.BlockHeight.fromObject(object.createdAt);
                        }
                        if (object.createdAtTime != null) {
                            if (typeof object.createdAtTime !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Transaction.createdAtTime: object expected");
                            message.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.fromObject(object.createdAtTime);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Transaction message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {ic_ledger.pb.v1.Transaction} message Transaction
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Transaction.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.memo = null;
                            object.createdAt = null;
                            object.createdAtTime = null;
                        }
                        if (message.burn != null && message.hasOwnProperty("burn")) {
                            object.burn = $root.ic_ledger.pb.v1.Burn.toObject(message.burn, options);
                            if (options.oneofs)
                                object.transfer = "burn";
                        }
                        if (message.mint != null && message.hasOwnProperty("mint")) {
                            object.mint = $root.ic_ledger.pb.v1.Mint.toObject(message.mint, options);
                            if (options.oneofs)
                                object.transfer = "mint";
                        }
                        if (message.send != null && message.hasOwnProperty("send")) {
                            object.send = $root.ic_ledger.pb.v1.Send.toObject(message.send, options);
                            if (options.oneofs)
                                object.transfer = "send";
                        }
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            object.memo = $root.ic_ledger.pb.v1.Memo.toObject(message.memo, options);
                        if (message.createdAt != null && message.hasOwnProperty("createdAt"))
                            object.createdAt = $root.ic_ledger.pb.v1.BlockHeight.toObject(message.createdAt, options);
                        if (message.createdAtTime != null && message.hasOwnProperty("createdAtTime"))
                            object.createdAtTime = $root.ic_ledger.pb.v1.TimeStamp.toObject(message.createdAtTime, options);
                        return object;
                    };
    
                    /**
                     * Converts this Transaction to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Transaction.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Transaction
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Transaction
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Transaction.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Transaction";
                    };
    
                    return Transaction;
                })();
    
                v1.Send = (function() {
    
                    /**
                     * Properties of a Send.
                     * @memberof ic_ledger.pb.v1
                     * @interface ISend
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [from] Send from
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [to] Send to
                     * @property {ic_ledger.pb.v1.IICPTs|null} [amount] Send amount
                     * @property {ic_ledger.pb.v1.IICPTs|null} [maxFee] Send maxFee
                     */
    
                    /**
                     * Constructs a new Send.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Send.
                     * @implements ISend
                     * @constructor
                     * @param {ic_ledger.pb.v1.ISend=} [properties] Properties to set
                     */
                    function Send(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Send from.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} from
                     * @memberof ic_ledger.pb.v1.Send
                     * @instance
                     */
                    Send.prototype.from = null;
    
                    /**
                     * Send to.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} to
                     * @memberof ic_ledger.pb.v1.Send
                     * @instance
                     */
                    Send.prototype.to = null;
    
                    /**
                     * Send amount.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} amount
                     * @memberof ic_ledger.pb.v1.Send
                     * @instance
                     */
                    Send.prototype.amount = null;
    
                    /**
                     * Send maxFee.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} maxFee
                     * @memberof ic_ledger.pb.v1.Send
                     * @instance
                     */
                    Send.prototype.maxFee = null;
    
                    /**
                     * Creates a new Send instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {ic_ledger.pb.v1.ISend=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Send} Send instance
                     */
                    Send.create = function create(properties) {
                        return new Send(properties);
                    };
    
                    /**
                     * Encodes the specified Send message. Does not implicitly {@link ic_ledger.pb.v1.Send.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {ic_ledger.pb.v1.ISend} message Send message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Send.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.from, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.to, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.amount, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        if (message.maxFee != null && Object.hasOwnProperty.call(message, "maxFee"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.maxFee, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Send message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Send.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {ic_ledger.pb.v1.ISend} message Send message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Send.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Send message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Send} Send
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Send.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Send();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.from = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 2: {
                                    message.to = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.amount = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            case 4: {
                                    message.maxFee = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Send message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Send} Send
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Send.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Send message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Send.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.from != null && message.hasOwnProperty("from")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.from);
                            if (error)
                                return "from." + error;
                        }
                        if (message.to != null && message.hasOwnProperty("to")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.to);
                            if (error)
                                return "to." + error;
                        }
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        if (message.maxFee != null && message.hasOwnProperty("maxFee")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.maxFee);
                            if (error)
                                return "maxFee." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Send message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Send} Send
                     */
                    Send.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Send)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Send();
                        if (object.from != null) {
                            if (typeof object.from !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Send.from: object expected");
                            message.from = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.from);
                        }
                        if (object.to != null) {
                            if (typeof object.to !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Send.to: object expected");
                            message.to = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.to);
                        }
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Send.amount: object expected");
                            message.amount = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.amount);
                        }
                        if (object.maxFee != null) {
                            if (typeof object.maxFee !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Send.maxFee: object expected");
                            message.maxFee = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.maxFee);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Send message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {ic_ledger.pb.v1.Send} message Send
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Send.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.from = null;
                            object.to = null;
                            object.amount = null;
                            object.maxFee = null;
                        }
                        if (message.from != null && message.hasOwnProperty("from"))
                            object.from = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.from, options);
                        if (message.to != null && message.hasOwnProperty("to"))
                            object.to = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.to, options);
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.ic_ledger.pb.v1.ICPTs.toObject(message.amount, options);
                        if (message.maxFee != null && message.hasOwnProperty("maxFee"))
                            object.maxFee = $root.ic_ledger.pb.v1.ICPTs.toObject(message.maxFee, options);
                        return object;
                    };
    
                    /**
                     * Converts this Send to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Send
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Send.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Send
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Send
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Send.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Send";
                    };
    
                    return Send;
                })();
    
                v1.Mint = (function() {
    
                    /**
                     * Properties of a Mint.
                     * @memberof ic_ledger.pb.v1
                     * @interface IMint
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [to] Mint to
                     * @property {ic_ledger.pb.v1.IICPTs|null} [amount] Mint amount
                     */
    
                    /**
                     * Constructs a new Mint.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Mint.
                     * @implements IMint
                     * @constructor
                     * @param {ic_ledger.pb.v1.IMint=} [properties] Properties to set
                     */
                    function Mint(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Mint to.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} to
                     * @memberof ic_ledger.pb.v1.Mint
                     * @instance
                     */
                    Mint.prototype.to = null;
    
                    /**
                     * Mint amount.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} amount
                     * @memberof ic_ledger.pb.v1.Mint
                     * @instance
                     */
                    Mint.prototype.amount = null;
    
                    /**
                     * Creates a new Mint instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {ic_ledger.pb.v1.IMint=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Mint} Mint instance
                     */
                    Mint.create = function create(properties) {
                        return new Mint(properties);
                    };
    
                    /**
                     * Encodes the specified Mint message. Does not implicitly {@link ic_ledger.pb.v1.Mint.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {ic_ledger.pb.v1.IMint} message Mint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mint.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.to != null && Object.hasOwnProperty.call(message, "to"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.to, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.amount, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Mint message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Mint.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {ic_ledger.pb.v1.IMint} message Mint message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Mint.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Mint message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Mint} Mint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mint.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Mint();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 2: {
                                    message.to = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.amount = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Mint message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Mint} Mint
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Mint.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Mint message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Mint.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.to != null && message.hasOwnProperty("to")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.to);
                            if (error)
                                return "to." + error;
                        }
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Mint message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Mint} Mint
                     */
                    Mint.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Mint)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Mint();
                        if (object.to != null) {
                            if (typeof object.to !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Mint.to: object expected");
                            message.to = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.to);
                        }
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Mint.amount: object expected");
                            message.amount = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.amount);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Mint message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {ic_ledger.pb.v1.Mint} message Mint
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Mint.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.to = null;
                            object.amount = null;
                        }
                        if (message.to != null && message.hasOwnProperty("to"))
                            object.to = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.to, options);
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.ic_ledger.pb.v1.ICPTs.toObject(message.amount, options);
                        return object;
                    };
    
                    /**
                     * Converts this Mint to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Mint
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Mint.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Mint
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Mint
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Mint.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Mint";
                    };
    
                    return Mint;
                })();
    
                v1.Burn = (function() {
    
                    /**
                     * Properties of a Burn.
                     * @memberof ic_ledger.pb.v1
                     * @interface IBurn
                     * @property {ic_ledger.pb.v1.IAccountIdentifier|null} [from] Burn from
                     * @property {ic_ledger.pb.v1.IICPTs|null} [amount] Burn amount
                     */
    
                    /**
                     * Constructs a new Burn.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Burn.
                     * @implements IBurn
                     * @constructor
                     * @param {ic_ledger.pb.v1.IBurn=} [properties] Properties to set
                     */
                    function Burn(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Burn from.
                     * @member {ic_ledger.pb.v1.IAccountIdentifier|null|undefined} from
                     * @memberof ic_ledger.pb.v1.Burn
                     * @instance
                     */
                    Burn.prototype.from = null;
    
                    /**
                     * Burn amount.
                     * @member {ic_ledger.pb.v1.IICPTs|null|undefined} amount
                     * @memberof ic_ledger.pb.v1.Burn
                     * @instance
                     */
                    Burn.prototype.amount = null;
    
                    /**
                     * Creates a new Burn instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {ic_ledger.pb.v1.IBurn=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Burn} Burn instance
                     */
                    Burn.create = function create(properties) {
                        return new Burn(properties);
                    };
    
                    /**
                     * Encodes the specified Burn message. Does not implicitly {@link ic_ledger.pb.v1.Burn.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {ic_ledger.pb.v1.IBurn} message Burn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Burn.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.from != null && Object.hasOwnProperty.call(message, "from"))
                            $root.ic_ledger.pb.v1.AccountIdentifier.encode(message.from, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();
                        if (message.amount != null && Object.hasOwnProperty.call(message, "amount"))
                            $root.ic_ledger.pb.v1.ICPTs.encode(message.amount, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Burn message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Burn.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {ic_ledger.pb.v1.IBurn} message Burn message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Burn.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Burn message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Burn} Burn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Burn.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Burn();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.from = $root.ic_ledger.pb.v1.AccountIdentifier.decode(reader, reader.uint32());
                                    break;
                                }
                            case 3: {
                                    message.amount = $root.ic_ledger.pb.v1.ICPTs.decode(reader, reader.uint32());
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Burn message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Burn} Burn
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Burn.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Burn message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Burn.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.from != null && message.hasOwnProperty("from")) {
                            var error = $root.ic_ledger.pb.v1.AccountIdentifier.verify(message.from);
                            if (error)
                                return "from." + error;
                        }
                        if (message.amount != null && message.hasOwnProperty("amount")) {
                            var error = $root.ic_ledger.pb.v1.ICPTs.verify(message.amount);
                            if (error)
                                return "amount." + error;
                        }
                        return null;
                    };
    
                    /**
                     * Creates a Burn message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Burn} Burn
                     */
                    Burn.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Burn)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Burn();
                        if (object.from != null) {
                            if (typeof object.from !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Burn.from: object expected");
                            message.from = $root.ic_ledger.pb.v1.AccountIdentifier.fromObject(object.from);
                        }
                        if (object.amount != null) {
                            if (typeof object.amount !== "object")
                                throw TypeError(".ic_ledger.pb.v1.Burn.amount: object expected");
                            message.amount = $root.ic_ledger.pb.v1.ICPTs.fromObject(object.amount);
                        }
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Burn message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {ic_ledger.pb.v1.Burn} message Burn
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Burn.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults) {
                            object.from = null;
                            object.amount = null;
                        }
                        if (message.from != null && message.hasOwnProperty("from"))
                            object.from = $root.ic_ledger.pb.v1.AccountIdentifier.toObject(message.from, options);
                        if (message.amount != null && message.hasOwnProperty("amount"))
                            object.amount = $root.ic_ledger.pb.v1.ICPTs.toObject(message.amount, options);
                        return object;
                    };
    
                    /**
                     * Converts this Burn to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Burn
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Burn.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Burn
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Burn
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Burn.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Burn";
                    };
    
                    return Burn;
                })();
    
                v1.AccountIdentifier = (function() {
    
                    /**
                     * Properties of an AccountIdentifier.
                     * @memberof ic_ledger.pb.v1
                     * @interface IAccountIdentifier
                     * @property {Uint8Array|null} [hash] AccountIdentifier hash
                     */
    
                    /**
                     * Constructs a new AccountIdentifier.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents an AccountIdentifier.
                     * @implements IAccountIdentifier
                     * @constructor
                     * @param {ic_ledger.pb.v1.IAccountIdentifier=} [properties] Properties to set
                     */
                    function AccountIdentifier(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * AccountIdentifier hash.
                     * @member {Uint8Array} hash
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @instance
                     */
                    AccountIdentifier.prototype.hash = $util.newBuffer([]);
    
                    /**
                     * Creates a new AccountIdentifier instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountIdentifier=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.AccountIdentifier} AccountIdentifier instance
                     */
                    AccountIdentifier.create = function create(properties) {
                        return new AccountIdentifier(properties);
                    };
    
                    /**
                     * Encodes the specified AccountIdentifier message. Does not implicitly {@link ic_ledger.pb.v1.AccountIdentifier.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountIdentifier} message AccountIdentifier message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountIdentifier.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.hash != null && Object.hasOwnProperty.call(message, "hash"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.hash);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified AccountIdentifier message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.AccountIdentifier.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {ic_ledger.pb.v1.IAccountIdentifier} message AccountIdentifier message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    AccountIdentifier.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes an AccountIdentifier message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.AccountIdentifier} AccountIdentifier
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountIdentifier.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.AccountIdentifier();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.hash = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes an AccountIdentifier message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.AccountIdentifier} AccountIdentifier
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    AccountIdentifier.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies an AccountIdentifier message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    AccountIdentifier.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            if (!(message.hash && typeof message.hash.length === "number" || $util.isString(message.hash)))
                                return "hash: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates an AccountIdentifier message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.AccountIdentifier} AccountIdentifier
                     */
                    AccountIdentifier.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.AccountIdentifier)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.AccountIdentifier();
                        if (object.hash != null)
                            if (typeof object.hash === "string")
                                $util.base64.decode(object.hash, message.hash = $util.newBuffer($util.base64.length(object.hash)), 0);
                            else if (object.hash.length >= 0)
                                message.hash = object.hash;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from an AccountIdentifier message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {ic_ledger.pb.v1.AccountIdentifier} message AccountIdentifier
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    AccountIdentifier.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.hash = "";
                            else {
                                object.hash = [];
                                if (options.bytes !== Array)
                                    object.hash = $util.newBuffer(object.hash);
                            }
                        if (message.hash != null && message.hasOwnProperty("hash"))
                            object.hash = options.bytes === String ? $util.base64.encode(message.hash, 0, message.hash.length) : options.bytes === Array ? Array.prototype.slice.call(message.hash) : message.hash;
                        return object;
                    };
    
                    /**
                     * Converts this AccountIdentifier to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    AccountIdentifier.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for AccountIdentifier
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.AccountIdentifier
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    AccountIdentifier.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.AccountIdentifier";
                    };
    
                    return AccountIdentifier;
                })();
    
                v1.Subaccount = (function() {
    
                    /**
                     * Properties of a Subaccount.
                     * @memberof ic_ledger.pb.v1
                     * @interface ISubaccount
                     * @property {Uint8Array|null} [subAccount] Subaccount subAccount
                     */
    
                    /**
                     * Constructs a new Subaccount.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Subaccount.
                     * @implements ISubaccount
                     * @constructor
                     * @param {ic_ledger.pb.v1.ISubaccount=} [properties] Properties to set
                     */
                    function Subaccount(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Subaccount subAccount.
                     * @member {Uint8Array} subAccount
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @instance
                     */
                    Subaccount.prototype.subAccount = $util.newBuffer([]);
    
                    /**
                     * Creates a new Subaccount instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {ic_ledger.pb.v1.ISubaccount=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Subaccount} Subaccount instance
                     */
                    Subaccount.create = function create(properties) {
                        return new Subaccount(properties);
                    };
    
                    /**
                     * Encodes the specified Subaccount message. Does not implicitly {@link ic_ledger.pb.v1.Subaccount.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {ic_ledger.pb.v1.ISubaccount} message Subaccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Subaccount.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.subAccount != null && Object.hasOwnProperty.call(message, "subAccount"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.subAccount);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Subaccount message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Subaccount.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {ic_ledger.pb.v1.ISubaccount} message Subaccount message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Subaccount.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Subaccount message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Subaccount} Subaccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Subaccount.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Subaccount();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.subAccount = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Subaccount message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Subaccount} Subaccount
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Subaccount.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Subaccount message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Subaccount.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.subAccount != null && message.hasOwnProperty("subAccount"))
                            if (!(message.subAccount && typeof message.subAccount.length === "number" || $util.isString(message.subAccount)))
                                return "subAccount: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Subaccount message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Subaccount} Subaccount
                     */
                    Subaccount.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Subaccount)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Subaccount();
                        if (object.subAccount != null)
                            if (typeof object.subAccount === "string")
                                $util.base64.decode(object.subAccount, message.subAccount = $util.newBuffer($util.base64.length(object.subAccount)), 0);
                            else if (object.subAccount.length >= 0)
                                message.subAccount = object.subAccount;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Subaccount message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {ic_ledger.pb.v1.Subaccount} message Subaccount
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Subaccount.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.subAccount = "";
                            else {
                                object.subAccount = [];
                                if (options.bytes !== Array)
                                    object.subAccount = $util.newBuffer(object.subAccount);
                            }
                        if (message.subAccount != null && message.hasOwnProperty("subAccount"))
                            object.subAccount = options.bytes === String ? $util.base64.encode(message.subAccount, 0, message.subAccount.length) : options.bytes === Array ? Array.prototype.slice.call(message.subAccount) : message.subAccount;
                        return object;
                    };
    
                    /**
                     * Converts this Subaccount to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Subaccount.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Subaccount
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Subaccount
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Subaccount.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Subaccount";
                    };
    
                    return Subaccount;
                })();
    
                v1.Memo = (function() {
    
                    /**
                     * Properties of a Memo.
                     * @memberof ic_ledger.pb.v1
                     * @interface IMemo
                     * @property {number|Long|null} [memo] Memo memo
                     */
    
                    /**
                     * Constructs a new Memo.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Memo.
                     * @implements IMemo
                     * @constructor
                     * @param {ic_ledger.pb.v1.IMemo=} [properties] Properties to set
                     */
                    function Memo(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Memo memo.
                     * @member {number|Long} memo
                     * @memberof ic_ledger.pb.v1.Memo
                     * @instance
                     */
                    Memo.prototype.memo = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new Memo instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {ic_ledger.pb.v1.IMemo=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Memo} Memo instance
                     */
                    Memo.create = function create(properties) {
                        return new Memo(properties);
                    };
    
                    /**
                     * Encodes the specified Memo message. Does not implicitly {@link ic_ledger.pb.v1.Memo.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {ic_ledger.pb.v1.IMemo} message Memo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Memo.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.memo != null && Object.hasOwnProperty.call(message, "memo"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.memo);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Memo message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Memo.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {ic_ledger.pb.v1.IMemo} message Memo message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Memo.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Memo message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Memo} Memo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Memo.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Memo();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.memo = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Memo message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Memo} Memo
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Memo.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Memo message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Memo.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            if (!$util.isInteger(message.memo) && !(message.memo && $util.isInteger(message.memo.low) && $util.isInteger(message.memo.high)))
                                return "memo: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a Memo message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Memo} Memo
                     */
                    Memo.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Memo)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Memo();
                        if (object.memo != null)
                            if ($util.Long)
                                (message.memo = $util.Long.fromValue(object.memo)).unsigned = true;
                            else if (typeof object.memo === "string")
                                message.memo = parseInt(object.memo, 10);
                            else if (typeof object.memo === "number")
                                message.memo = object.memo;
                            else if (typeof object.memo === "object")
                                message.memo = new $util.LongBits(object.memo.low >>> 0, object.memo.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Memo message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {ic_ledger.pb.v1.Memo} message Memo
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Memo.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.memo = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.memo = options.longs === String ? "0" : 0;
                        if (message.memo != null && message.hasOwnProperty("memo"))
                            if (typeof message.memo === "number")
                                object.memo = options.longs === String ? String(message.memo) : message.memo;
                            else
                                object.memo = options.longs === String ? $util.Long.prototype.toString.call(message.memo) : options.longs === Number ? new $util.LongBits(message.memo.low >>> 0, message.memo.high >>> 0).toNumber(true) : message.memo;
                        return object;
                    };
    
                    /**
                     * Converts this Memo to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Memo
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Memo.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Memo
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Memo
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Memo.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Memo";
                    };
    
                    return Memo;
                })();
    
                v1.TimeStamp = (function() {
    
                    /**
                     * Properties of a TimeStamp.
                     * @memberof ic_ledger.pb.v1
                     * @interface ITimeStamp
                     * @property {number|Long|null} [timestampNanos] TimeStamp timestampNanos
                     */
    
                    /**
                     * Constructs a new TimeStamp.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a TimeStamp.
                     * @implements ITimeStamp
                     * @constructor
                     * @param {ic_ledger.pb.v1.ITimeStamp=} [properties] Properties to set
                     */
                    function TimeStamp(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * TimeStamp timestampNanos.
                     * @member {number|Long} timestampNanos
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @instance
                     */
                    TimeStamp.prototype.timestampNanos = $util.Long ? $util.Long.fromBits(0,0,true) : 0;
    
                    /**
                     * Creates a new TimeStamp instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {ic_ledger.pb.v1.ITimeStamp=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.TimeStamp} TimeStamp instance
                     */
                    TimeStamp.create = function create(properties) {
                        return new TimeStamp(properties);
                    };
    
                    /**
                     * Encodes the specified TimeStamp message. Does not implicitly {@link ic_ledger.pb.v1.TimeStamp.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {ic_ledger.pb.v1.ITimeStamp} message TimeStamp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimeStamp.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.timestampNanos != null && Object.hasOwnProperty.call(message, "timestampNanos"))
                            writer.uint32(/* id 1, wireType 0 =*/8).uint64(message.timestampNanos);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified TimeStamp message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.TimeStamp.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {ic_ledger.pb.v1.ITimeStamp} message TimeStamp message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    TimeStamp.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a TimeStamp message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.TimeStamp} TimeStamp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimeStamp.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.TimeStamp();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.timestampNanos = reader.uint64();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a TimeStamp message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.TimeStamp} TimeStamp
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    TimeStamp.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a TimeStamp message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    TimeStamp.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.timestampNanos != null && message.hasOwnProperty("timestampNanos"))
                            if (!$util.isInteger(message.timestampNanos) && !(message.timestampNanos && $util.isInteger(message.timestampNanos.low) && $util.isInteger(message.timestampNanos.high)))
                                return "timestampNanos: integer|Long expected";
                        return null;
                    };
    
                    /**
                     * Creates a TimeStamp message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.TimeStamp} TimeStamp
                     */
                    TimeStamp.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.TimeStamp)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.TimeStamp();
                        if (object.timestampNanos != null)
                            if ($util.Long)
                                (message.timestampNanos = $util.Long.fromValue(object.timestampNanos)).unsigned = true;
                            else if (typeof object.timestampNanos === "string")
                                message.timestampNanos = parseInt(object.timestampNanos, 10);
                            else if (typeof object.timestampNanos === "number")
                                message.timestampNanos = object.timestampNanos;
                            else if (typeof object.timestampNanos === "object")
                                message.timestampNanos = new $util.LongBits(object.timestampNanos.low >>> 0, object.timestampNanos.high >>> 0).toNumber(true);
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a TimeStamp message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {ic_ledger.pb.v1.TimeStamp} message TimeStamp
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    TimeStamp.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if ($util.Long) {
                                var long = new $util.Long(0, 0, true);
                                object.timestampNanos = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;
                            } else
                                object.timestampNanos = options.longs === String ? "0" : 0;
                        if (message.timestampNanos != null && message.hasOwnProperty("timestampNanos"))
                            if (typeof message.timestampNanos === "number")
                                object.timestampNanos = options.longs === String ? String(message.timestampNanos) : message.timestampNanos;
                            else
                                object.timestampNanos = options.longs === String ? $util.Long.prototype.toString.call(message.timestampNanos) : options.longs === Number ? new $util.LongBits(message.timestampNanos.low >>> 0, message.timestampNanos.high >>> 0).toNumber(true) : message.timestampNanos;
                        return object;
                    };
    
                    /**
                     * Converts this TimeStamp to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    TimeStamp.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for TimeStamp
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.TimeStamp
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    TimeStamp.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.TimeStamp";
                    };
    
                    return TimeStamp;
                })();
    
                v1.Certification = (function() {
    
                    /**
                     * Properties of a Certification.
                     * @memberof ic_ledger.pb.v1
                     * @interface ICertification
                     * @property {Uint8Array|null} [certification] Certification certification
                     */
    
                    /**
                     * Constructs a new Certification.
                     * @memberof ic_ledger.pb.v1
                     * @classdesc Represents a Certification.
                     * @implements ICertification
                     * @constructor
                     * @param {ic_ledger.pb.v1.ICertification=} [properties] Properties to set
                     */
                    function Certification(properties) {
                        if (properties)
                            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)
                                if (properties[keys[i]] != null)
                                    this[keys[i]] = properties[keys[i]];
                    }
    
                    /**
                     * Certification certification.
                     * @member {Uint8Array} certification
                     * @memberof ic_ledger.pb.v1.Certification
                     * @instance
                     */
                    Certification.prototype.certification = $util.newBuffer([]);
    
                    /**
                     * Creates a new Certification instance using the specified properties.
                     * @function create
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {ic_ledger.pb.v1.ICertification=} [properties] Properties to set
                     * @returns {ic_ledger.pb.v1.Certification} Certification instance
                     */
                    Certification.create = function create(properties) {
                        return new Certification(properties);
                    };
    
                    /**
                     * Encodes the specified Certification message. Does not implicitly {@link ic_ledger.pb.v1.Certification.verify|verify} messages.
                     * @function encode
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {ic_ledger.pb.v1.ICertification} message Certification message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Certification.encode = function encode(message, writer) {
                        if (!writer)
                            writer = $Writer.create();
                        if (message.certification != null && Object.hasOwnProperty.call(message, "certification"))
                            writer.uint32(/* id 1, wireType 2 =*/10).bytes(message.certification);
                        return writer;
                    };
    
                    /**
                     * Encodes the specified Certification message, length delimited. Does not implicitly {@link ic_ledger.pb.v1.Certification.verify|verify} messages.
                     * @function encodeDelimited
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {ic_ledger.pb.v1.ICertification} message Certification message or plain object to encode
                     * @param {$protobuf.Writer} [writer] Writer to encode to
                     * @returns {$protobuf.Writer} Writer
                     */
                    Certification.encodeDelimited = function encodeDelimited(message, writer) {
                        return this.encode(message, writer).ldelim();
                    };
    
                    /**
                     * Decodes a Certification message from the specified reader or buffer.
                     * @function decode
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @param {number} [length] Message length if known beforehand
                     * @returns {ic_ledger.pb.v1.Certification} Certification
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Certification.decode = function decode(reader, length) {
                        if (!(reader instanceof $Reader))
                            reader = $Reader.create(reader);
                        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ic_ledger.pb.v1.Certification();
                        while (reader.pos < end) {
                            var tag = reader.uint32();
                            switch (tag >>> 3) {
                            case 1: {
                                    message.certification = reader.bytes();
                                    break;
                                }
                            default:
                                reader.skipType(tag & 7);
                                break;
                            }
                        }
                        return message;
                    };
    
                    /**
                     * Decodes a Certification message from the specified reader or buffer, length delimited.
                     * @function decodeDelimited
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from
                     * @returns {ic_ledger.pb.v1.Certification} Certification
                     * @throws {Error} If the payload is not a reader or valid buffer
                     * @throws {$protobuf.util.ProtocolError} If required fields are missing
                     */
                    Certification.decodeDelimited = function decodeDelimited(reader) {
                        if (!(reader instanceof $Reader))
                            reader = new $Reader(reader);
                        return this.decode(reader, reader.uint32());
                    };
    
                    /**
                     * Verifies a Certification message.
                     * @function verify
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {Object.<string,*>} message Plain object to verify
                     * @returns {string|null} `null` if valid, otherwise the reason why it is not
                     */
                    Certification.verify = function verify(message) {
                        if (typeof message !== "object" || message === null)
                            return "object expected";
                        if (message.certification != null && message.hasOwnProperty("certification"))
                            if (!(message.certification && typeof message.certification.length === "number" || $util.isString(message.certification)))
                                return "certification: buffer expected";
                        return null;
                    };
    
                    /**
                     * Creates a Certification message from a plain object. Also converts values to their respective internal types.
                     * @function fromObject
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {Object.<string,*>} object Plain object
                     * @returns {ic_ledger.pb.v1.Certification} Certification
                     */
                    Certification.fromObject = function fromObject(object) {
                        if (object instanceof $root.ic_ledger.pb.v1.Certification)
                            return object;
                        var message = new $root.ic_ledger.pb.v1.Certification();
                        if (object.certification != null)
                            if (typeof object.certification === "string")
                                $util.base64.decode(object.certification, message.certification = $util.newBuffer($util.base64.length(object.certification)), 0);
                            else if (object.certification.length >= 0)
                                message.certification = object.certification;
                        return message;
                    };
    
                    /**
                     * Creates a plain object from a Certification message. Also converts values to other types if specified.
                     * @function toObject
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {ic_ledger.pb.v1.Certification} message Certification
                     * @param {$protobuf.IConversionOptions} [options] Conversion options
                     * @returns {Object.<string,*>} Plain object
                     */
                    Certification.toObject = function toObject(message, options) {
                        if (!options)
                            options = {};
                        var object = {};
                        if (options.defaults)
                            if (options.bytes === String)
                                object.certification = "";
                            else {
                                object.certification = [];
                                if (options.bytes !== Array)
                                    object.certification = $util.newBuffer(object.certification);
                            }
                        if (message.certification != null && message.hasOwnProperty("certification"))
                            object.certification = options.bytes === String ? $util.base64.encode(message.certification, 0, message.certification.length) : options.bytes === Array ? Array.prototype.slice.call(message.certification) : message.certification;
                        return object;
                    };
    
                    /**
                     * Converts this Certification to JSON.
                     * @function toJSON
                     * @memberof ic_ledger.pb.v1.Certification
                     * @instance
                     * @returns {Object.<string,*>} JSON object
                     */
                    Certification.prototype.toJSON = function toJSON() {
                        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);
                    };
    
                    /**
                     * Gets the default type url for Certification
                     * @function getTypeUrl
                     * @memberof ic_ledger.pb.v1.Certification
                     * @static
                     * @param {string} [typeUrlPrefix] your custom typeUrlPrefix(default "type.googleapis.com")
                     * @returns {string} The default type url
                     */
                    Certification.getTypeUrl = function getTypeUrl(typeUrlPrefix) {
                        if (typeUrlPrefix === undefined) {
                            typeUrlPrefix = "type.googleapis.com";
                        }
                        return typeUrlPrefix + "/ic_ledger.pb.v1.Certification";
                    };
    
                    return Certification;
                })();
    
                return v1;
            })();
    
            return pb;
        })();
    
        return ic_ledger;
    })();

    return $root;
});
